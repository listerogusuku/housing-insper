{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"P\u00e1gina Inicial","text":"<p>Bem-vindo ao Inside Insper!</p>"},{"location":"Sao-Paulo-life/","title":"A Vida em S\u00e3o Paulo","text":"<p>Se voc\u00ea chegou at\u00e9 esse site, muito provavelmente \u00e9 um novo estudante do Insper, ent\u00e3o desde j\u00e1 parab\u00e9ns pela conquista! Sabemos que a trajet\u00f3ria n\u00e3o \u00e9 f\u00e1cil e que esse \u00e9 s\u00f3 o come\u00e7o de uma bel\u00edssima jornada nessa incr\u00edvel institui\u00e7\u00e3o.</p> <p>O Insper recebe, semestralmente, muitos estudantes que vivem fora da regi\u00e3o metropolitana de S\u00e3o Paulo, ent\u00e3o deixamos a seguir um v\u00eddeo institucional elaborado pela Prefeitura de S\u00e3o Paulo que mostra um pouco mais da cidade e sua dimens\u00e3o:</p>"},{"location":"Sao-Paulo-life/#insper-e-vila-olimpia","title":"Insper e Vila Ol\u00edmpia","text":"<p>O Insper est\u00e1 localizado no bairro Vila Ol\u00edmpia, sendo considerado um dos melhores, mais seguros, corporativos e luxuosos bairros da capital.</p> <p>No v\u00eddeo a seguir, elaborado pelo pr\u00f3prio Insper, \u00e9 poss\u00edvel assistir alguns depoimentos de como estudantes de outras cidades encararam o desafio de vir para S\u00e3o Paulo:</p>"},{"location":"Sao-Paulo-life/#localizacao-do-insper","title":"Localiza\u00e7\u00e3o do Insper","text":"<p>O Insper est\u00e1 localizado em 2 pr\u00e9dios na Vila Ol\u00edmpia, sendo o \"Pr\u00e9dio 1\" na Rua Quat\u00e1, 300 e o \"Pr\u00e9dio 2\" na Rua Quat\u00e1, 200, tal como pode ser conferido no mapa a seguir:</p> <p></p> <p>Em um raio de 2km do Insper est\u00e3o localizados 4 shoppings, sendo eles (em ordem de dist\u00e2ncia, do mais pr\u00f3ximo ao mais distante): Shopping Vila Ol\u00edmpia, Shopping JK Iguatemi, Shopping Ibirapuera e Shopping Cidade Jardim. Al\u00e9m disso, tamb\u00e9m est\u00e3o localizados 2 famosos parques p\u00fablicos da capital, sendo eles o Parque Ibirapuera (1.5km de dist\u00e2ncia) e o Parque do Povo (1.8km de dist\u00e2ncia).</p> <p>A poucos metros do Insper est\u00e1 localizado, ainda, o maior centro financeiro e tecnol\u00f3gico do Brasil: a Avenida Brigadeiro Faria Lima (local ocasionalmente descrito como \"Vale do Sil\u00edcio brasileiro\"), a qual abriga a sede de empresas como Google, Facebook, Shopee, LinkedIn, Ita\u00fa, BTG Pactual, Cimed, JP Morgan, Morgan Stanley, entre outras (e, sim, todas essas empresas amam os alunos do Insper, ent\u00e3o prepare-se para a possibilidade de estagiar ou ser contratado por alguma delas durante ou ap\u00f3s a gradua\u00e7\u00e3o).</p>"},{"location":"Sao-Paulo-life/#bairros-mais-comuns-dos-alunos-do-insper","title":"Bairros mais comuns dos alunos do Insper","text":"<p>Em uma pesquisa feita com estudantes da gradua\u00e7\u00e3o do Insper entre mar\u00e7o e abril de 2023, foi poss\u00edvel constatar que os bairros mais comuns escolhidos como moradia pelos estudantes da institui\u00e7\u00e3o ao se mudar para S\u00e3o Paulo s\u00e3o:</p> <p>1\u00ba - Vila Ol\u00edmpia (local em que o Insper est\u00e1 localizado)</p> <p>2\u00ba - Moema</p> <p>3\u00ba - Vila Nova Concei\u00e7\u00e3o</p> <p>4\u00ba - Itaim</p> <p>5\u00ba - Brooklin</p> <p>Pelo fato da maioria dos estudantes do Insper escolherem morar em bairros pr\u00f3ximos a institui\u00e7\u00e3o, o meio de locomo\u00e7\u00e3o mais comum \u00e9 a p\u00e9, seguido por carro pr\u00f3prio/transporte por aplicativo/carona com outros estudantes, \u00f4nibus ou metr\u00f4, bicicleta/patinete.</p> <p>Ambos os pr\u00e9dios do Insper contam com estacionamentos (terceirizados, pagos) localizados nos subsolos, al\u00e9m de tamb\u00e9m possuir biciclet\u00e1rios (gratuitos) para estudantes que utilizam bike como forma de locomo\u00e7\u00e3o. Na rua entre os pr\u00e9dios do Insper (Uberabinha) tamb\u00e9m h\u00e1 uma esta\u00e7\u00e3o de loca\u00e7\u00e3o de bicicletas (as famosas e laranjinhas \"Bikes Ita\u00fa\"), com planos di\u00e1rios, mensais e anuais para quem deseja se locomover de forma mais flex\u00edvel sem ter que comprar uma bicicleta pr\u00f3pria.</p> <p> </p> <p>Agora que voc\u00ea j\u00e1 entendeu um pouco melhor a din\u00e2mica seguida por parte dos alunos da institui\u00e7\u00e3o e tamb\u00e9m j\u00e1 conheceu um pouco melhor o ambiente em que voc\u00ea ir\u00e1 conviver pelos pr\u00f3ximos (pelo menos) 4 anos, vamos conhecer melhor algumas oportunidades de moradias mais utilizadas e recomendadas pelos alunos da institui\u00e7\u00e3o!</p>"},{"location":"about-housing-insper/","title":"HOUSING INSPER","text":"Sobre o Desenvolvedor Github <pre>\n\nNome: Lister Ogusuku Ribeiro\nCurso: Engenharia de Computa\u00e7\u00e3o\nSemestre: 6\u00ba (2023.1)\nInstagram: @insperinside\nLinkedIn: Lister Ogusuku Ribeiro\nContato: listeror@al.insper.edu.br\n\n</pre> Lister OgusukuDeveloper <p>O Housing Insper foi desenvolvido pelo estudante do 6\u00ba semestre da Engenharia de Computa\u00e7\u00e3o do Insper, Lister Ogusuku Ribeiro (@insperinside), com a inten\u00e7\u00e3o de compilar, num \u00fanico site, as op\u00e7\u00f5es de moradias mais utilizadas e recomendadas pelos nossos alunos, sobretudo pensando nos calouros da gradua\u00e7\u00e3o rec\u00e9m-chegados em S\u00e3o Paulo.</p> <p>Aviso</p> <p>Todas as op\u00e7\u00f5es aqui apresentadas n\u00e3o representam uma indica\u00e7\u00e3o direta do Insper, mas sim indica\u00e7\u00f5es baseadas em feedbacks coletados de alguns alunos da gradua\u00e7\u00e3o da institui\u00e7\u00e3o.</p> <p>O Insper n\u00e3o faz indica\u00e7\u00f5es pr\u00f3prias nem possui parceria com corretores, condom\u00ednios, colivings e/ou student housing.</p> <p>A c\u00f3pia, integral ou parcial, do conte\u00fado aqui apresentado \u00e9 proibida sem autoriza\u00e7\u00e3o pr\u00e9via do desenvolvedor.</p> <p>A \u00faltima atualiza\u00e7\u00e3o do conte\u00fado aqui apresentado foi realizada em julho de 2023.</p>"},{"location":"about-housing-insper/#moradias-ate-500-metros-do-insper","title":"Moradias at\u00e9 500 metros do Insper","text":"<p>Para os estudantes que desejam morar bem perto do Insper, as op\u00e7\u00f5es mais indicadas pelos estudantes da institui\u00e7\u00e3o podem ser conferidas abaixo. Lembre-se que a tend\u00eancia \u00e9 que os valores de moradia mais pr\u00f3ximos ao Insper sejam consideravelmente mais altos em rela\u00e7\u00e3o a outros locais, trouxemos aqui aproxima\u00e7\u00f5es de valores com base nos feedbacks recebidos e com base em informa\u00e7\u00f5es disponibilizadas na Web.</p>"},{"location":"about-housing-insper/#condominio-igloo","title":"Condom\u00ednio Igloo","text":"<p>O Igloo (R. Quat\u00e1, 339) fica localizado em frente ao Pr\u00e9dio 1 do Insper (R. Quat\u00e1, 300). Segundo informa\u00e7\u00f5es de estudantes do Insper e tamb\u00e9m de sites online, o Igloo possui cerca de 1 quarto por im\u00f3vel e apartamentos em torno de 39m\u00b2. O custo do condom\u00ednio gira em torno de 800 reais e o valor m\u00e9dio para alugar gira em torno dos 4 mil reais.</p> <p>Lembre-se de sempre verificar as informa\u00e7\u00f5es diretamente com um corretor, pois os valores podem sofrer varia\u00e7\u00f5es ou terem sido atualizados.</p> <p></p>"},{"location":"about-housing-insper/#vantagens","title":"Vantagens:","text":"<p>Localiza\u00e7\u00e3o: Em frente ao Pr\u00e9dio 1 do Insper</p>"},{"location":"about-housing-insper/#desvantagens","title":"Desvantagens:","text":"<p>Pre\u00e7o</p>"},{"location":"about-housing-insper/#seed-vila-olimpia","title":"Seed Vila Ol\u00edmpia","text":"<p>O Seed (R. Quat\u00e1, 181) fica localizado em frente ao Pr\u00e9dio 2 do Insper (R. Quat\u00e1, 200). Segundo informa\u00e7\u00f5es de estudantes do Insper e tamb\u00e9m de sites online, o Seed possui im\u00f3veis com 2 quartos e apartamentos entre 81m\u00b2 e 83m\u00b2. O custo do condom\u00ednio gira em torno de 1400 reais e o valor m\u00e9dio para alugar gira em torno dos 8300 reais.</p> <p>Lembre-se de sempre verificar as informa\u00e7\u00f5es diretamente com um corretor, pois os valores podem sofrer varia\u00e7\u00f5es ou terem sido atualizados.</p> <p></p>"},{"location":"about-housing-insper/#vantagens_1","title":"Vantagens:","text":"<p>Localiza\u00e7\u00e3o: Em frente ao Pr\u00e9dio 2 do Insper, apartamentos maiores, possibilidade de dividir apartamento</p>"},{"location":"about-housing-insper/#desvantagens_1","title":"Desvantagens:","text":"<p>Pre\u00e7o</p>"},{"location":"about-housing-insper/#vn-quata","title":"VN Quat\u00e1","text":"<p>O VN Quat\u00e1 (R. Quat\u00e1, 76) fica localizado a cerca de 190 metros do Insper. Segundo informa\u00e7\u00f5es de estudantes do Insper e tamb\u00e9m de sites online, o VN Quat\u00e1 possui im\u00f3veis com 1quarto e apartamentos com cerca de 27m\u00b2. O custo do condom\u00ednio gira em torno de 800 reais e o valor m\u00e9dio para alugar gira em torno dos 3000 reais.</p> <p>Lembre-se de sempre verificar as informa\u00e7\u00f5es diretamente com um corretor, pois os valores podem sofrer varia\u00e7\u00f5es ou terem sido atualizados.</p> <p></p>"},{"location":"about-housing-insper/#vantagens_2","title":"Vantagens:","text":"<p>Localiza\u00e7\u00e3o</p>"},{"location":"about-housing-insper/#desvantagens_2","title":"Desvantagens:","text":"<p>Apartamentos compactos e pre\u00e7o</p>"},{"location":"about-housing-insper/#be-design","title":"Be Design","text":"<p>O Be Design (R. Baluarte, 125) fica localizado a cerca de 230 metros do Insper. Segundo informa\u00e7\u00f5es de estudantes do Insper e tamb\u00e9m de sites online, o Be Design possui im\u00f3veis com 1 a 2 quartos e apartamentos entre 29m\u00b2 e 32m\u00b2. O custo do condom\u00ednio gira em torno de 757 reais e o valor m\u00e9dio para alugar gira em torno dos 3200 reais.</p> <p>Lembre-se de sempre verificar as informa\u00e7\u00f5es diretamente com um corretor, pois os valores podem sofrer varia\u00e7\u00f5es ou terem sido atualizados.</p> <p></p>"},{"location":"about-housing-insper/#vantagens_3","title":"Vantagens:","text":"<p>Localiza\u00e7\u00e3o, possibilidade de dividir apartamento</p>"},{"location":"about-housing-insper/#desvantagens_3","title":"Desvantagens:","text":"<p>Apartamentos compactos</p>"},{"location":"about-housing-insper/#kasa-coliving","title":"Kasa Coliving","text":"<p>O Kasa (R. Casa do Ator, 99) fica localizado a cerca de 280 metros do Insper. Segundo informa\u00e7\u00f5es de estudantes do Insper e tamb\u00e9m do site oficial do coliving, o Kasa possui v\u00e1rias op\u00e7\u00f5es de apartamentos, como Single Studio, Shared Studio, Single Suite, Suite Casal e Studio Casal, com apartamentos que giram em torno de 25m\u00b2 a 30m\u00b2.</p> <p>O custo do condom\u00ednio gira em torno de 760-890 reais (valor vari\u00e1vel de acordo com o m\u00b2 do apartamento escolhido) e o valor m\u00e9dio para alugar tamb\u00e9m varia de acordo com o tempo de contrato e tipo e tamanho de apartamento escolhido, cujos valores (para um contrato de 12 meses) variam entre 2730 a 4095 reais.</p> <p>Um dos diferenciais \u00e9 a op\u00e7\u00e3o de Shared Studio (apartamento compartilhado), cujo valor do aluguel \u00e9 de 3045 reais e h\u00e1 possibilidade do estudante dividir a moradia com outro estudante.</p> <p>Lembre-se de sempre verificar as informa\u00e7\u00f5es diretamente com um corretor, pois os valores podem sofrer varia\u00e7\u00f5es ou terem sido atualizados.</p> <p></p>"},{"location":"about-housing-insper/#vantagens_4","title":"Vantagens:","text":"<p>Localiza\u00e7\u00e3o, possibilidade de dividir apartamento, pre\u00e7o um pouco menor e clareza de informa\u00e7\u00f5es e fotos no site</p>"},{"location":"about-housing-insper/#desvantagens_4","title":"Desvantagens:","text":"<p>Apartamentos compactos</p>"},{"location":"about-housing-insper/#condominio-nex-one-itaim","title":"Condom\u00ednio Nex One Itaim","text":"<p>O Nex One (Av. Santo Amaro, 1342 - Vila Nova Concei\u00e7\u00e3o) fica localizado a cerca de 450 metros do Insper. Por ser um pr\u00e9dio novo (constru\u00eddo em 2022), n\u00e3o possu\u00edmos uma vasta quantidade de informa\u00e7\u00f5es sobre ele e as informa\u00e7\u00f5es que conseguimos na internet falam apenas sobre valores de venda dos apartamentos. Como recebemos indica\u00e7\u00f5es de estudantes do Insper sobre o Nex One, deixaremos aqui o que obtivemos:</p> <p>Os apartamentos do Nex One variam de 26m\u00b2 a 74m\u00b2, podendo conter at\u00e9 1 quarto (1 su\u00edte), 2 banheiros e 1 vaga de garagem. O valor do condom\u00ednio \u00e9 de 860 reais e o valor dos im\u00f3veis varia entre 150 a 639 mil reais.</p> <p>Lembre-se de sempre verificar as informa\u00e7\u00f5es diretamente com um corretor, pois os valores podem sofrer varia\u00e7\u00f5es ou terem sido atualizados.</p> <p></p>"},{"location":"about-housing-insper/#vantagens_5","title":"Vantagens:","text":"<p>Apartamentos maiores, pr\u00e9dio novo</p>"},{"location":"about-housing-insper/#desvantagens_5","title":"Desvantagens:","text":"<p>Falta de informa\u00e7\u00f5es mais detalhadas no site, localiza\u00e7\u00e3o em avenida movimentada</p>"},{"location":"about-housing-insper/#moradias-de-500-metros-a-1km-do-insper","title":"Moradias de 500 metros a 1km do Insper","text":""},{"location":"about-housing-insper/#edificio-dartagnan","title":"Edif\u00edcio D'Artagnan","text":"<p>O D'Artagnan (R. Gomes de Carvalho, 83 - Vila Ol\u00edmpia) fica localizado a cerca de 500 metros do Insper. Segundo informa\u00e7\u00f5es de estudantes do Insper e tamb\u00e9m de sites online, o D'Artagnan possui im\u00f3veis com 2 a 3 quartos e apartamentos a partir de 76m\u00b2. O custo do condom\u00ednio gira em torno de 851 reais e o valor m\u00e9dio para alugar gira em torno dos 2800 reais.</p> <p>Lembre-se de sempre verificar as informa\u00e7\u00f5es diretamente com um corretor, pois os valores podem sofrer varia\u00e7\u00f5es ou terem sido atualizados.</p> <p></p>"},{"location":"about-housing-insper/#vantagens_6","title":"Vantagens:","text":"<p>Apartamentos maiores e com at\u00e9 3 quartos, possibilidade de dividir apartamento</p>"},{"location":"about-housing-insper/#desvantagens_6","title":"Desvantagens:","text":"<p>Localiza\u00e7\u00e3o: um pouco mais distante do Insper</p>"},{"location":"about-housing-insper/#domus-garden-coliving-coliving-para-mulheres","title":"Domus Garden Coliving (Coliving para mulheres)","text":"<p>O Domus Garden (R. Ribeir\u00e3o Claro, 547) fica localizado a cerca de 520 metros do Insper. N\u00e3o obtivemos informa\u00e7\u00f5es sobre pre\u00e7os praticados pelo coliving, mas por ser composto por ambientes, quartos e \u00e1reas compartilhadas (e tamb\u00e9m por estar mais distante do Insper) imaginamos que os valores sejam menores. Recomendamos tentar entrar em contato diretamente com algu\u00e9m do coliving para mais informa\u00e7\u00f5es.</p> <p>Lembre-se de sempre verificar as informa\u00e7\u00f5es diretamente com um corretor, pois os valores podem sofrer varia\u00e7\u00f5es ou terem sido atualizados.</p> <p></p>"},{"location":"about-housing-insper/#vantagens_7","title":"Vantagens:","text":"<p>Pre\u00e7o, possibilidade de dividir apartamento, ambiente somente para mulheres</p>"},{"location":"about-housing-insper/#desvantagens_7","title":"Desvantagens:","text":"<p>Ambientes compartilhados, ambiente com regras e restri\u00e7\u00f5es pr\u00f3prias, localiza\u00e7\u00e3o um pouco mais distante do Insper</p>"},{"location":"about-housing-insper/#moradias-entre-1-e-2km-do-insper","title":"Moradias entre 1 e 2km do Insper","text":""},{"location":"about-housing-insper/#moema-hyde-park","title":"Moema Hyde Park","text":"<p>O Moema Hyde Park (Av. Hor\u00e1cio Lafer, 265 - Moema) fica localizado a cerca de 1.3km do Insper. Segundo informa\u00e7\u00f5es de estudantes do Insper e tamb\u00e9m de sites online, o Moema Hyde Park possui im\u00f3veis com cerca de 2 quartos e apartamentos em torno de 55m\u00b2. O custo do condom\u00ednio gira em torno de 700 reais e o valor m\u00e9dio para alugar gira em torno dos 2700 reais.</p> <p>Lembre-se de sempre verificar as informa\u00e7\u00f5es diretamente com um corretor, pois os valores podem sofrer varia\u00e7\u00f5es ou terem sido atualizados.</p> <p></p>"},{"location":"about-housing-insper/#vantagens_8","title":"Vantagens:","text":"<p>Pre\u00e7o, possibilidade de dividir apartamento, bairro com mais op\u00e7\u00f5es de lazer, cultura e gastronomia, proximidade com as esta\u00e7\u00f5es do metr\u00f4 Moema e Eucaliptos</p>"},{"location":"about-housing-insper/#desvantagens_8","title":"Desvantagens:","text":"<p>Localiza\u00e7\u00e3o: um pouco mais distante do Insper</p> <p>Aviso</p> <p>Por enquanto foram essas as op\u00e7\u00f5es que coletamos e compilamos. Nosso site ainda est\u00e1 em constru\u00e7\u00e3o e em manuten\u00e7\u00e3o constante para melhor se adequar as necessidades dos novos ingressantes do Insper! N\u00e3o deixe de fazer sua pr\u00f3pria consulta na web e tamb\u00e9m n\u00e3o deixe de consultar outros corretores, sites e veteranos da institui\u00e7\u00e3o para melhor embasar sua opini\u00e3o antes de tomar uma decis\u00e3o.</p> <p>Outras \"vantagens\" e complementos, como presen\u00e7a de academia, quadras esportivas, sal\u00e3o para festas etc n\u00e3o foram inclu\u00eddas aqui e devem ser conferidas diretamente com o corretor respons\u00e1vel pelo im\u00f3vel.</p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright \u00a9 2016-2023 Martin Donath</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"toca-da-raposa/","title":"Toca da Raposa (para bolsistas integrais)","text":"<p>Aos calouros que conquistaram uma bolsa de estudos integral no Insper, meus parab\u00e9ns! Uma conquista e tanto!!</p> <p>Voc\u00eas n\u00e3o precisam se preocupar em procurar moradias (pelo menos n\u00e3o durante o pr\u00f3ximo 1 ano de curso), pois o Insper fornece aos bolsistas integrais um ano de moradia na Toca da Raposa! (Isso mesmo, 1 ano inteiro de moradia, sem ter que se preocupar com aluguel, conta de g\u00e1s, luz, internet ou outras despesas! Incr\u00edvel, n\u00e3o \u00e9 mesmo?!)</p> <p>A Toca da Raposa foi inaugurada em 2017 e foi o primeiro alojamento para alunos bolsistas constru\u00eddo por uma universidade privada no Brasil. O pr\u00e9dio da Toca est\u00e1 localizado na Vila Ol\u00edmpia (a 600 metros de dist\u00e2ncia do Insper) e possui capacidade para receber mais de 50 alunos bolsistas integrais que moram fora da regi\u00e3o metropolitana de S\u00e3o Paulo.</p> <p>O Insper entende que a Toca \u00e9 um ambiente voltado n\u00e3o somente \u00e0 moradia, como tamb\u00e9m aos estudos, lazer, cria\u00e7\u00e3o de la\u00e7os entre os estudantes e \u00e9 um ambiente fundamental \u00e0 adapta\u00e7\u00e3o em S\u00e3o Paulo, sobretudo pelo fato de a maioria dos novos estudantes virem de muito longe e nunca terem pisado na capital. Por esse motivo \u00e9 obrigat\u00f3ria a perman\u00eancia na Toca por, no m\u00ednimo, 1 ano.</p> <p>Ap\u00f3s passado esse 1 ano de conv\u00edvio na Toca, o aluno tem 2 op\u00e7\u00f5es: Se houver vagas no residencial, ele pode ficar por mais um semestre. Caso n\u00e3o haja mais vaga devido ao ingresso de novos estudantes, o Insper ir\u00e1 pagar um aux\u00edlio moradia ao aluno bolsista integral e ele ter\u00e1 que procurar algum apartamento, coliving ou student housing para morar. \u00c9 extremamente comum que, ap\u00f3s esse 1 ano de Toca, os pr\u00f3prios estudantes j\u00e1 tenham criado la\u00e7os entre si e formem grupos para alugar apartamentos em conjunto na Vila Ol\u00edmpia, Moema, Itaim ou Brooklin (todos bairros muito pr\u00f3ximos ao Insper).</p> <p>A seguir deixamos dois v\u00eddeos muito legais sobre a Toca. O primeiro deles mostra a inaugura\u00e7\u00e3o do residencial e todo carinho e apoio dado pela Comunidade Insper para que tudo isso acontecesse. J\u00e1 o segundo v\u00eddeo foi produzido em 2020 pela lideran\u00e7a da Toca da Raposa na \u00e9poca mostrando um pouco mais como \u00e9 residencial:</p> <p>Por fim, deixo a seguir mais dois v\u00eddeos. O primeiro deles \u00e9 o Arrai\u00e1 da Toca realizado em junho de 2023 pela lideran\u00e7a da Toca em parceria com o Comit\u00ea de Bolsistas e o outro v\u00eddeo mostrando um pouco da Toca durante as f\u00e9rias:</p> Ver essa foto no Instagram <p>Uma publica\u00e7\u00e3o compartilhada por Comit\u00ea de Bolsistas Insper (@bolsistasinsper)</p> Ver essa foto no Instagram <p>Uma publica\u00e7\u00e3o compartilhada por Toca da Raposa (@tocadaraposa__)</p>"},{"location":"universo-da-computacao-em-nuvem/","title":"HOUSING INSPER","text":"<p>Aviso</p> <p>Esse material faz parte do projeto final da disciplina Computa\u00e7\u00e3o em Nuvem do Insper. Novas atualiza\u00e7\u00f5es e adi\u00e7\u00e3o de informa\u00e7\u00f5es ser\u00e3o implementadas ao longo das pr\u00f3ximas semanas (e, principalmente, durante as f\u00e9rias ), por\u00e9m fique tranquilo porque o projeto aqui apresentado est\u00e1 pronto. Futuras adi\u00e7\u00f5es visam apenas tornar o material ainda mais completo.</p> <p>Todo o material aqui desenvolvido foi modelado em formato de handout para ser utilizado em sala de aula. A minha ideia \u00e9 fazer com que algu\u00e9m com ZERO conhecimento em Computa\u00e7\u00e3o em Nuvem consiga dar os primeiros passos nesse universo e criar sua primeira infraestrutura na AWS de um jeito simples e did\u00e1tico.</p> <p>A \u00faltima atualiza\u00e7\u00e3o do conte\u00fado foi realizada em maio de 2023**</p>"},{"location":"universo-da-computacao-em-nuvem/#o-que-e-e-para-que-serve-a-computacao-em-nuvem","title":"O que \u00e9 e para que serve a Computa\u00e7\u00e3o em Nuvem?","text":"<p>A computa\u00e7\u00e3o em nuvem \u00e9 um modelo de tecnologia de informa\u00e7\u00e3o que permite o acesso sob demanda a um conjunto compartilhado de recursos de computa\u00e7\u00e3o, como servidores, armazenamento, aplicativos e servi\u00e7os, por meio da internet. Em outras palavras, a computa\u00e7\u00e3o em nuvem \u00e9 uma forma de disponibilizar recursos computacionais atrav\u00e9s da internet, em vez de ter todos os recursos armazenados localmente em um \u00fanico computador ou servidor. Esses recursos s\u00e3o gerenciados e mantidos por provedores de servi\u00e7os em nuvem, como a Amazon Web Services, Microsoft Azure e Google Cloud Platform.</p> Sobre o Desenvolvedor Github <pre>\n\nAluno: Lister Ogusuku Ribeiro\nContato: listeror@al.insper.edu.br\nCurso: Engenharia de Computa\u00e7\u00e3o\nInstagram: @insperinside\n\n</pre> Lister OgusukuDeveloper"},{"location":"upgrade/","title":"How to upgrade","text":"<p>Upgrade to the latest version with:</p> <pre><code>pip install --upgrade --force-reinstall mkdocs-material\n</code></pre> <p>Show the currently installed version with:</p> <pre><code>pip show mkdocs-material\n</code></pre>"},{"location":"upgrade/#upgrading-from-8x-to-9x","title":"Upgrading from 8.x to 9.x","text":"<p>This major release includes a brand new search implementation that is faster and allows for rich previews, advanced tokenization and better highlighting. It was available as part of Insiders for over a year, and now that the funding goal was hit, makes its way into the community edition.</p>"},{"location":"upgrade/#changes-to-mkdocsyml","title":"Changes to <code>mkdocs.yml</code>","text":""},{"location":"upgrade/#contentcodecopy","title":"<code>content.code.copy</code>","text":"<p>The copy-to-clipboard buttons are now opt-in and can be enabled or disabled per block. If you wish to enable them for all code blocks, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- content.code.copy\n</code></pre>"},{"location":"upgrade/#contentaction","title":"<code>content.action.*</code>","text":"<p>A \"view source\" button can be shown next to the \"edit this page\" button, both of which must now be explicitly enabled. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- content.action.edit\n- content.action.view\n</code></pre>"},{"location":"upgrade/#navigationfooter","title":"<code>navigation.footer</code>","text":"<p>The previous and next buttons in the footer are now opt-in. If you wish to keep them for your documentation, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- navigation.footer\n</code></pre>"},{"location":"upgrade/#themelanguage","title":"<code>theme.language</code>","text":"<p>The Korean and Norwegian language codes were renamed, as they were non-standard:</p> <ul> <li><code>kr</code> to <code>ko</code></li> <li><code>no</code> to <code>nb</code></li> </ul>"},{"location":"upgrade/#feedbackratings","title":"<code>feedback.ratings</code>","text":"<p>The old, nameless placeholders were removed (after being deprecated for several months). Make sure to switch to the new named placeholders <code>{title}</code> and <code>{url}</code>:</p> <pre><code>https://github.com/.../issues/new/?title=[Feedback]+{title}+-+{url}\n</code></pre>"},{"location":"upgrade/#changes-to-html-files","title":"Changes to <code>*.html</code> files","text":"<p>The templates have undergone a series of changes. If you have customized Material for MkDocs with theme extension, be sure to incorporate the latest changes into your templates. A good starting point is to inspect the diff.</p> <p>Built-in plugins not working after upgrade?</p> <p>If one of the built-in plugins (search or tags) doesn't work anymore without any apparent error or cause, it is very likely related to custom overrides. MkDocs 1.4.1 and above allow themes to namespace built-in plugins, which Material for MkDocs 9 now does in order to allow authors to use third-party plugins with the same name as built-in plugins. Search your overrides for <code>\"in config.plugins\"</code> and add the <code>material/</code> namespace. Affected partials:</p> <ul> <li><code>content.html</code></li> <li><code>header.html</code></li> </ul>"},{"location":"upgrade/#upgrading-from-7x-to-8x","title":"Upgrading from 7.x to 8.x","text":""},{"location":"upgrade/#whats-new","title":"What's new?","text":"<ul> <li>Added support for code annotations</li> <li>Added support for anchor tracking</li> <li>Added support for version warning</li> <li>Added <code>copyright</code> partial for easier override</li> <li>Removed deprecated content tabs legacy implementation</li> <li>Removed deprecated <code>seealso</code> admonition type</li> <li>Removed deprecated <code>site_keywords</code> setting (unsupported by MkDocs)</li> <li>Removed deprecated prebuilt search index support</li> <li>Removed deprecated web app manifest \u2013 use customization</li> <li>Removed <code>extracopyright</code> variable \u2013 use new <code>copyright</code> partial</li> <li>Removed Disqus integration \u2013 use customization</li> <li>Switched to <code>:is()</code> selectors for simple selector lists</li> <li>Switched autoprefixer from <code>last 4 years</code> to <code>last 2 years</code></li> <li>Improved CSS overall to match modern standards</li> <li>Improved CSS variable semantics for fonts</li> <li>Improved extensibility by restructuring partials</li> <li>Improved handling of <code>details</code> when printing</li> <li>Improved keyboard navigation for footnotes</li> <li>Fixed #3214: Search highlighting breaks site when empty</li> </ul>"},{"location":"upgrade/#changes-to-mkdocsyml_1","title":"Changes to <code>mkdocs.yml</code>","text":""},{"location":"upgrade/#pymdownxtabbed","title":"<code>pymdownx.tabbed</code>","text":"<p>Support for the legacy style of the Tabbed extension was dropped in favor of the new, alternate implementation which has better behavior on mobile viewports:</p> 8.x7.x <pre><code>markdown_extensions:\n- pymdownx.tabbed:\nalternate_style: true\n</code></pre> <pre><code>markdown_extensions:\n- pymdownx.tabbed\n</code></pre>"},{"location":"upgrade/#pymdownxsuperfences","title":"<code>pymdownx.superfences</code>","text":"<p>The <code>*-experimental</code> suffix must be removed from the custom fence class property, which is used to target code blocks to be rendered as diagrams using Mermaid.js:</p> 8.x7.x <pre><code>markdown_extensions:\n- pymdownx.superfences:\ncustom_fences:\n- name: mermaid\nclass: mermaid\nformat: !!python/name:pymdownx.superfences.fence_code_format\n</code></pre> <pre><code>markdown_extensions:\n- pymdownx.superfences:\ncustom_fences:\n- name: mermaid\nclass: mermaid-experimental\nformat: !!python/name:pymdownx.superfences.fence_code_format\n</code></pre>"},{"location":"upgrade/#google_analytics","title":"<code>google_analytics</code>","text":"<p>This option was deprecated in MkDocs 1.2.0, as the implementation of a JavaScript-based analytics integration is the responsibility of a theme. The following lines must be changed:</p> 8.x7.x <pre><code>extra:\nanalytics:\nprovider: google\nproperty: UA-XXXXXXXX-X\n</code></pre> <pre><code>google_analytics:\n- UA-XXXXXXXX-X\n- auto\n</code></pre>"},{"location":"upgrade/#upgrading-from-6x-to-7x","title":"Upgrading from 6.x to 7.x","text":""},{"location":"upgrade/#whats-new_1","title":"What's new?","text":"<ul> <li>Added support for deploying multiple versions</li> <li>Added support for integrating a language selector</li> <li>Added support for rendering admonitions as inline blocks</li> <li>Rewrite of the underlying reactive architecture</li> <li>Removed Webpack in favor of reactive build strategy (\u2013480 dependencies)</li> <li>Fixed keyboard navigation for code blocks after content tabs switch</li> </ul>"},{"location":"upgrade/#changes-to-mkdocsyml_2","title":"Changes to <code>mkdocs.yml</code>","text":""},{"location":"upgrade/#extraversionmethod","title":"<code>extra.version.method</code>","text":"<p>The versioning method configuration was renamed to <code>extra.version.provider</code> to allow for different versioning strategies in the future:</p> 7.x6.x <pre><code>extra:\nversion:\nprovider: mike\n</code></pre> <pre><code>extra:\nversion:\nmethod: mike\n</code></pre>"},{"location":"upgrade/#upgrading-from-5x-to-6x","title":"Upgrading from 5.x to 6.x","text":""},{"location":"upgrade/#whats-new_2","title":"What's new?","text":"<ul> <li>Improved search result look and feel</li> <li>Improved search result stability while typing</li> <li>Improved search result grouping (pages + headings)</li> <li>Improved search result relevance and scoring</li> <li>Added display of missing query terms to search results</li> <li>Reduced size of vendor bundle by 25% (84kb \u2192 67kb)</li> <li>Reduced size of the Docker image to improve CI build performance</li> <li>Removed hero partial in favor of custom implementation</li> <li>Removed deprecated front matter features</li> </ul>"},{"location":"upgrade/#changes-to-mkdocsyml_3","title":"Changes to <code>mkdocs.yml</code>","text":"<p>Following is a list of changes that need to be made to <code>mkdocs.yml</code>. Note that you only have to adjust the value if you defined it, so if your configuration does not contain the key, you can skip it.</p>"},{"location":"upgrade/#themefeatures","title":"<code>theme.features</code>","text":"<p>All feature flags that can be set from <code>mkdocs.yml</code>, like tabs and instant loading, are now prefixed with the name of the component or function they apply to, e.g. <code>navigation.*</code>:</p> 6.x5.x <pre><code>theme:\nfeatures:\n- navigation.tabs\n- navigation.instant\n</code></pre> <pre><code>theme:\nfeatures:\n- tabs\n- instant\n</code></pre>"},{"location":"upgrade/#upgrading-from-4x-to-5x","title":"Upgrading from 4.x to 5.x","text":""},{"location":"upgrade/#whats-new_3","title":"What's new?","text":"<ul> <li>Reactive architecture \u2013 try <code>app.dialog$.next(\"Hi!\")</code> in the console</li> <li>Instant loading \u2013 make Material behave like a Single Page Application</li> <li>Improved CSS customization with CSS variables \u2013 set your brand's colors</li> <li>Improved CSS resilience, e.g. proper sidebar locking for customized headers</li> <li>Improved icon integration and configuration \u2013 now including over 5k icons</li> <li>Added possibility to use any icon for logo, repository and social links</li> <li>Search UI does not freeze anymore (moved to web worker)</li> <li>Search index built only once when using instant loading</li> <li>Improved extensible keyboard handling</li> <li>Support for prebuilt search indexes</li> <li>Support for displaying stars and forks for GitLab repositories</li> <li>Support for scroll snapping of sidebars and search results</li> <li>Reduced HTML and CSS footprint due to deprecation of Internet Explorer support</li> <li>Slight facelifting of some UI elements (admonitions, tables, ...)</li> </ul>"},{"location":"upgrade/#changes-to-mkdocsyml_4","title":"Changes to <code>mkdocs.yml</code>","text":"<p>Following is a list of changes that need to be made to <code>mkdocs.yml</code>. Note that you only have to adjust the value if you defined it, so if your configuration does not contain the key, you can skip it.</p>"},{"location":"upgrade/#themefeature","title":"<code>theme.feature</code>","text":"<p>Optional features like tabs and instant loading are now implemented as flags and can be enabled by listing them in <code>mkdocs.yml</code> under <code>theme.features</code>:</p> 5.x4.x <pre><code>theme:\nfeatures:\n- tabs\n- instant\n</code></pre> <pre><code>theme:\nfeature:\ntabs: true\n</code></pre>"},{"location":"upgrade/#themelogoicon","title":"<code>theme.logo.icon</code>","text":"<p>The logo icon configuration was centralized under <code>theme.icon.logo</code> and can now be set to any of the icons bundled with the theme:</p> 5.x4.x <pre><code>theme:\nicon:\nlogo: material/cloud\n</code></pre> <pre><code>theme:\nlogo:\nicon: cloud\n</code></pre>"},{"location":"upgrade/#extrarepo_icon","title":"<code>extra.repo_icon</code>","text":"<p>The repo icon configuration was centralized under <code>theme.icon.repo</code> and can now be set to any of the icons bundled with the theme:</p> 5.x4.x <pre><code>theme:\nicon:\nrepo: fontawesome/brands/gitlab\n</code></pre> <pre><code>extra:\nrepo_icon: gitlab\n</code></pre>"},{"location":"upgrade/#extrasearch","title":"<code>extra.search.*</code>","text":"<p>Search is now configured as part of the plugin options. Note that the search languages must now be listed as an array of strings and the <code>tokenizer</code> was renamed to <code>separator</code>:</p> 5.x4.x <pre><code>plugins:\n- search:\nseparator: '[\\s\\-\\.]+'\nlang:\n- en\n- de\n- ru\n</code></pre> <pre><code>extra:\nsearch:\nlanguage: en, de, ru\ntokenizer: '[\\s\\-\\.]+'\n</code></pre>"},{"location":"upgrade/#extrasocial","title":"<code>extra.social.*</code>","text":"<p>Social links stayed in the same place, but the <code>type</code> key was renamed to <code>icon</code> in order to match the new way of specifying which icon to be used:</p> 5.x4.x <pre><code>extra:\nsocial:\n- icon: fontawesome/brands/github-alt\nlink: https://github.com/squidfunk\n</code></pre> <pre><code>extra:\nsocial:\n- type: github\nlink: https://github.com/squidfunk\n</code></pre>"},{"location":"upgrade/#upgrading-from-3x-to-4x","title":"Upgrading from 3.x to 4.x","text":""},{"location":"upgrade/#whats-new_4","title":"What's new?","text":"<p>Material for MkDocs 4 fixes incorrect layout on Chinese systems. The fix includes a mandatory change of the base font-size from <code>10px</code> to <code>20px</code> which means all <code>rem</code> values needed to be updated. Within the theme, <code>px</code> to <code>rem</code> calculation is now encapsulated in a new function called <code>px2rem</code> which is part of the SASS code base.</p> <p>If you use Material for MkDocs with custom CSS that is based on <code>rem</code> values, note that those values must now be divided by 2. Now, <code>1.0rem</code> doesn't map to <code>10px</code>, but <code>20px</code>. To learn more about the problem and implications, please refer to #911 in which the problem was discovered and fixed.</p>"},{"location":"upgrade/#changes-to-mkdocsyml_5","title":"Changes to <code>mkdocs.yml</code>","text":"<p>None.</p>"},{"location":"upgrade/#changes-to-html-files_5","title":"Changes to <code>*.html</code> files","text":"<p>None.</p>"},{"location":"vagas-aptos-insper/","title":"Vagas em apartamentos divulgadas por alunos do Insper","text":"<p>No momento os estudantes do Insper interessados em dividir apartamento est\u00e3o interagindo nesse post no Instagram:</p> Ver essa foto no Instagram <p>Uma publica\u00e7\u00e3o compartilhada por Spotted Insper (@spottedinsper300)</p> <p>P\u00e1gina atualizada em 21 de julho de 2023</p>"},{"location":"vagas-aptos-insper/#orientacao-para-divulgacao-de-vagas","title":"Orienta\u00e7\u00e3o para divulga\u00e7\u00e3o de vagas","text":"<p>\u00c9 aluno do Insper e deseja anunciar alguma vaga dispon\u00edvel no seu apartamento? Entre em contato conosco via mensagem no Instagram @insperinside.</p> <p>Sua mensagem dever\u00e1 conter a maior quantidade de detalhes poss\u00edvel e tamb\u00e9m pelo menos uma forma de contato. Caso haja algum post com a divulga\u00e7\u00e3o da vaga no Instagram ou em alguma outra rede social, envie-nos o link do post.</p> <p>Se estiver tudo certo, as vagas ser\u00e3o divulgadas aqui em at\u00e9 24h ap\u00f3s recebermos sua mensagem.</p> <p>O prazo de perman\u00eancia de vagas nessa p\u00e1gina, caso n\u00e3o seja solicitada a retirada, ser\u00e1 de 2 meses.</p> <p>Cordialmente,</p> <p>Lister Ogusuku Ribeiro | Inside Insper</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"reference/","title":"Refer\u00eancias","text":"<p>Foram utilizadas dezenas de refer\u00eancias \u00e0 constru\u00e7\u00e3o do conhecimento aplicado aqui neste material. Todo o conte\u00fado utilizado para a constru\u00e7\u00e3o do aprendizado pode ser conferido abaixo:</p> <ol> <li>Publish/Subscribe on AWS with Terraform, .NET 6 and serverless</li> <li>CodePossibility thumbnail generation lambda</li> <li>Application Integration Patterns</li> <li>AWS: Serverless web application</li> <li>Build Lambda based REST API</li> <li>Terraform: Serverless (Node.js) REST API Tutorial - 1</li> <li>Terraform: Serverless (Node.js) REST API Tutorial - 2</li> <li>Build a serverless REST API with .NET 6 and Terraform</li> <li>AWS Serverless Application with Lambda, API gateway, GoLang and Terraform</li> <li>AWS Invoke</li> <li>facebook/create-react-app</li> <li>chgasparoto/curso-aws-com-terraform</li> <li>DevOps: AWS com Terraform Automatizando sua infraestrutura</li> <li>Serverless AWS Amplify Apps with Terraform and AWS</li> <li>Terraform Command: version</li> <li>Terraform Real World Use Case</li> <li>O que \u00e9 e para que serve o AWS S3 e Buckets ?</li> </ol>"},{"location":"reference/admonitions/","title":"Admonitions","text":"<p>Admonitions, also known as call-outs, are an excellent choice for including side content without significantly interrupting the document flow. Material for MkDocs provides several different types of admonitions and allows for the inclusion and nesting of arbitrary content.</p>"},{"location":"reference/admonitions/#configuration","title":"Configuration","text":"<p>This configuration enables admonitions, allows to make them collapsible and to nest arbitrary content inside admonitions. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- admonition\n- pymdownx.details\n- pymdownx.superfences\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Admonition</li> <li>Details</li> <li>SuperFences</li> </ul>"},{"location":"reference/admonitions/#admonition-icons","title":"Admonition icons","text":"<p> 8.3.0</p> <p>Each of the supported admonition types has a distinct icon, which can be changed to any icon bundled with the theme, or even a custom icon. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nicon:\nadmonition:\n&lt;type&gt;: &lt;icon&gt; # (1)!\n</code></pre> <ol> <li> <p>Enter a few keywords to find the perfect icon using our icon search and     click on the shortcode to copy it to your clipboard:</p> <p> <ol></ol> </p> </li> </ol> Expand to show alternate icon sets  Octicons FontAwesome <pre><code>theme:\nicon:\nadmonition:\nnote: octicons/tag-16\nabstract: octicons/checklist-16\ninfo: octicons/info-16\ntip: octicons/squirrel-16\nsuccess: octicons/check-16\nquestion: octicons/question-16\nwarning: octicons/alert-16\nfailure: octicons/x-circle-16\ndanger: octicons/zap-16\nbug: octicons/bug-16\nexample: octicons/beaker-16\nquote: octicons/quote-16\n</code></pre> <pre><code>theme:\nicon:\nadmonition:\nnote: fontawesome/solid/note-sticky\nabstract: fontawesome/solid/book\ninfo: fontawesome/solid/circle-info\ntip: fontawesome/solid/bullhorn\nsuccess: fontawesome/solid/check\nquestion: fontawesome/solid/circle-question\nwarning: fontawesome/solid/triangle-exclamation\nfailure: fontawesome/solid/bomb\ndanger: fontawesome/solid/skull\nbug: fontawesome/solid/robot\nexample: fontawesome/solid/flask\nquote: fontawesome/solid/quote-left\n</code></pre>"},{"location":"reference/admonitions/#usage","title":"Usage","text":"<p>Admonitions follow a simple syntax: a block starts with <code>!!!</code>, followed by a single keyword used as a type qualifier. The content of the block follows on the next line, indented by four spaces:</p> Admonition<pre><code>!!! note\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"reference/admonitions/#changing-the-title","title":"Changing the title","text":"<p>By default, the title will equal the type qualifier in titlecase. However, it can be changed by adding a quoted string containing valid Markdown (including links, formatting, ...) after the type qualifier:</p> Admonition with custom title<pre><code>!!! note \"Phasellus posuere in sem ut cursus\"\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Phasellus posuere in sem ut cursus</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"reference/admonitions/#removing-the-title","title":"Removing the title","text":"<p>Similar to changing the title, the icon and title can be omitted entirely by adding an empty string directly after the type qualifier. Note that this will not work for collapsible blocks:</p> Admonition without title<pre><code>!!! note \"\"\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"reference/admonitions/#collapsible-blocks","title":"Collapsible blocks","text":"<p>When Details is enabled and an admonition block is started with <code>???</code> instead of <code>!!!</code>, the admonition is rendered as a collapsible block with a small toggle on the right side:</p> Admonition, collapsible<pre><code>??? note\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Adding a <code>+</code> after the <code>???</code> token renders the block expanded:</p> Admonition, collapsible and initially expanded<pre><code>???+ note\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"reference/admonitions/#inline-blocks","title":"Inline blocks","text":"<p>Admonitions can also be rendered as inline blocks (e.g., for sidebars), placing them to the right using the <code>inline</code> + <code>end</code> modifiers, or to the left using only the <code>inline</code> modifier:</p>  inline end inline <p>Lorem ipsum</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>!!! info inline end \"Lorem ipsum\"\n\n    Lorem ipsum dolor sit amet, consectetur\n    adipiscing elit. Nulla et euismod nulla.\n    Curabitur feugiat, tortor non consequat\n    finibus, justo purus auctor massa, nec\n    semper lorem quam in massa.\n</code></pre> <p>Use <code>inline end</code> to align to the right (left for rtl languages).</p> <p>Lorem ipsum</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>!!! info inline \"Lorem ipsum\"\n\n    Lorem ipsum dolor sit amet, consectetur\n    adipiscing elit. Nulla et euismod nulla.\n    Curabitur feugiat, tortor non consequat\n    finibus, justo purus auctor massa, nec\n    semper lorem quam in massa.\n</code></pre> <p>Use <code>inline</code> to align to the left (right for rtl languages).</p> <p>Important: admonitions that use the <code>inline</code> modifiers must be declared prior to the content block you want to place them beside. If there's insufficient space to render the admonition next to the block, the admonition will stretch to the full width of the viewport, e.g., on mobile viewports.</p>"},{"location":"reference/admonitions/#supported-types","title":"Supported types","text":"<p>Following is a list of type qualifiers provided by Material for MkDocs, whereas the default type, and thus fallback for unknown type qualifiers, is <code>note</code>1:</p> <code>note</code> <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <code>abstract</code> <p>Abstract</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <code>info</code> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <code>tip</code> <p>Tip</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <code>success</code> <p>Success</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <code>question</code> <p>Question</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <code>warning</code> <p>Warning</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <code>failure</code> <p>Failure</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <code>danger</code> <p>Danger</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <code>bug</code> <p>Bug</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <code>example</code> <p>Example</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <code>quote</code> <p>Quote</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"reference/admonitions/#customization","title":"Customization","text":""},{"location":"reference/admonitions/#classic-admonitions","title":"Classic admonitions","text":"<p>Prior to version  8.5.6, admonitions had a slightly different appearance:</p> <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>If you want to restore this appearance, add the following CSS to an additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>.md-typeset .admonition,\n.md-typeset details {\nborder-width: 0;\nborder-left-width: 4px;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre>"},{"location":"reference/admonitions/#custom-admonitions","title":"Custom admonitions","text":"<p>If you want to add a custom admonition type, all you need is a color and an <code>*.svg</code> icon. Copy the icon's code from the <code>.icons</code> folder and add the following CSS to an additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>:root {\n--md-admonition-icon--pied-piper: url('data:image/svg+xml;charset=utf-8,&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"&gt;&lt;path d=\"M244 246c-3.2-2-6.3-2.9-10.1-2.9-6.6 0-12.6 3.2-19.3 3.7l1.7 4.9zm135.9 197.9c-19 0-64.1 9.5-79.9 19.8l6.9 45.1c35.7 6.1 70.1 3.6 106-9.8-4.8-10-23.5-55.1-33-55.1zM340.8 177c6.6 2.8 11.5 9.2 22.7 22.1 2-1.4 7.5-5.2 7.5-8.6 0-4.9-11.8-13.2-13.2-23 11.2-5.7 25.2-6 37.6-8.9 68.1-16.4 116.3-52.9 146.8-116.7C548.3 29.3 554 16.1 554.6 2l-2 2.6c-28.4 50-33 63.2-81.3 100-31.9 24.4-69.2 40.2-106.6 54.6l-6.3-.3v-21.8c-19.6 1.6-19.7-14.6-31.6-23-18.7 20.6-31.6 40.8-58.9 51.1-12.7 4.8-19.6 10-25.9 21.8 34.9-16.4 91.2-13.5 98.8-10zM555.5 0l-.6 1.1-.3.9.6-.6zm-59.2 382.1c-33.9-56.9-75.3-118.4-150-115.5l-.3-6c-1.1-13.5 32.8 3.2 35.1-31l-14.4 7.2c-19.8-45.7-8.6-54.3-65.5-54.3-14.7 0-26.7 1.7-41.4 4.6 2.9 18.6 2.2 36.7-10.9 50.3l19.5 5.5c-1.7 3.2-2.9 6.3-2.9 9.8 0 21 42.8 2.9 42.8 33.6 0 18.4-36.8 60.1-54.9 60.1-8 0-53.7-50-53.4-60.1l.3-4.6 52.3-11.5c13-2.6 12.3-22.7-2.9-22.7-3.7 0-43.1 9.2-49.4 10.6-2-5.2-7.5-14.1-13.8-14.1-3.2 0-6.3 3.2-9.5 4-9.2 2.6-31 2.9-21.5 20.1L15.9 298.5c-5.5 1.1-8.9 6.3-8.9 11.8 0 6 5.5 10.9 11.5 10.9 8 0 131.3-28.4 147.4-32.2 2.6 3.2 4.6 6.3 7.8 8.6 20.1 14.4 59.8 85.9 76.4 85.9 24.1 0 58-22.4 71.3-41.9 3.2-4.3 6.9-7.5 12.4-6.9.6 13.8-31.6 34.2-33 43.7-1.4 10.2-1 35.2-.3 41.1 26.7 8.1 52-3.6 77.9-2.9 4.3-21 10.6-41.9 9.8-63.5l-.3-9.5c-1.4-34.2-10.9-38.5-34.8-58.6-1.1-1.1-2.6-2.6-3.7-4 2.2-1.4 1.1-1 4.6-1.7 88.5 0 56.3 183.6 111.5 229.9 33.1-15 72.5-27.9 103.5-47.2-29-25.6-52.6-45.7-72.7-79.9zm-196.2 46.1v27.2l11.8-3.4-2.9-23.8zm-68.7-150.4l24.1 61.2 21-13.8-31.3-50.9zm84.4 154.9l2 12.4c9-1.5 58.4-6.6 58.4-14.1 0-1.4-.6-3.2-.9-4.6-26.8 0-36.9 3.8-59.5 6.3z\"/&gt;&lt;/svg&gt;')\n}\n.md-typeset .admonition.pied-piper,\n.md-typeset details.pied-piper {\nborder-color: rgb(43, 155, 70);\n}\n.md-typeset .pied-piper &gt; .admonition-title,\n.md-typeset .pied-piper &gt; summary {\nbackground-color: rgba(43, 155, 70, 0.1);\n}\n.md-typeset .pied-piper &gt; .admonition-title::before,\n.md-typeset .pied-piper &gt; summary::before {\nbackground-color: rgb(43, 155, 70);\n-webkit-mask-image: var(--md-admonition-icon--pied-piper);\nmask-image: var(--md-admonition-icon--pied-piper);\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre> <p>After applying the customization, you can use the custom admonition type:</p> Admonition with custom type<pre><code>!!! pied-piper \"Pied Piper\"\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et\n    euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo\n    purus auctor massa, nec semper lorem quam in massa.\n</code></pre> <p>Pied Piper</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <ol> <li> <p>Previously, some of the supported types defined more than one qualifier. For example, authors could use <code>summary</code> or <code>tldr</code> as alternative qualifiers to render an <code>abstract</code> admonition. As this increased the size of the CSS that is shipped with Material for MkDocs, the additional type qualifiers are now all deprecated and will be removed in the next major version. This will also be mentioned in the upgrade guide.\u00a0\u21a9</p> </li> </ol>"},{"location":"reference/annotations/","title":"Annotations","text":"<p>One of the flagship features of Material for MkDocs is the ability to inject annotations \u2013 little markers that can be added almost anywhere in a document and expand a tooltip containing arbitrary Markdown on click or keyboard focus.</p>"},{"location":"reference/annotations/#configuration","title":"Configuration","text":"<p>This configuration allows to add annotations to all inline- and block-level elements, as well as code blocks, and nest annotations inside each other. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- attr_list\n- md_in_html\n- pymdownx.superfences\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Attribute Lists</li> <li>Markdown in HTML</li> <li>SuperFences</li> </ul>"},{"location":"reference/annotations/#usage","title":"Usage","text":""},{"location":"reference/annotations/#using-annotations","title":"Using annotations","text":"<p> Sponsors only \u00b7  insiders-4.6.0 \u00b7  Experimental</p> <p>Annotations consist of two parts: a marker, which can be placed anywhere in a block marked with the <code>annotate</code> class, and content located in a list below the block containing the marker:</p> Text with annotations<pre><code>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.\n{ .annotate }\n\n1.  :man_raising_hand: I'm an annotation! I can contain `code`, __formatted\n    text__, images, ... basically anything that can be expressed in Markdown.\n</code></pre> <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> I'm an annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol> <p>Note that the <code>annotate</code> class must only be added to the outermost block. All nested elements can use the same list to define annotations, except when annotations are nested themselves.</p>"},{"location":"reference/annotations/#in-annotations","title":"in annotations","text":"<p>When SuperFences is enabled, annotations can be nested inside annotations by adding the <code>annotate</code> class to the list item hosting the annotation content, repeating the process:</p> Text with nested annotations<pre><code>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.\n{ .annotate }\n\n1.  :man_raising_hand: I'm an annotation! (1)\n    { .annotate }\n\n1.  :woman_raising_hand: I'm an annotation as well!\n</code></pre> <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> <p> I'm an annotation! (1)</p> <ol> <li> I'm an annotation as well!</li> </ol> </li> </ol>"},{"location":"reference/annotations/#in-admonitions","title":"in admonitions","text":"<p>The titles and bodies of admonitions can also host annotations by adding the <code>annotate</code> modifier after the type qualifier, which is similar to how inline blocks work:</p> Admonition with annotations<pre><code>!!! note annotate \"Phasellus posuere in sem ut cursus (1)\"\n\n    Lorem ipsum dolor sit amet, (2) consectetur adipiscing elit. Nulla et\n    euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo\n    purus auctor massa, nec semper lorem quam in massa.\n\n1.  :man_raising_hand: I'm an annotation!\n2.  :woman_raising_hand: I'm an annotation as well!\n</code></pre> <p>Phasellus posuere in sem ut cursus (1)</p> <p>Lorem ipsum dolor sit amet, (2) consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <ol> <li> I'm an annotation!</li> <li> I'm an annotation as well!</li> </ol>"},{"location":"reference/annotations/#in-content-tabs","title":"in content tabs","text":"<p>Content tabs can host annotations by adding the <code>annotate</code> class to the block of a dedicated content tab (and not to the container, which is not supported):</p> Content tabs with annotations<pre><code>=== \"Tab 1\"\n\n    Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.\n    { .annotate }\n\n1.  :man_raising_hand: I'm an annotation!\n\n=== \"Tab 2\"\n\n    Phasellus posuere in sem ut cursus (1)\n    { .annotate }\n\n1.  :woman_raising_hand: I'm an annotation as well!\n</code></pre> Tab 1Tab 2 <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> I'm an annotation!</li> </ol> <p>Phasellus posuere in sem ut cursus (1)</p> <ol> <li> I'm an annotation as well!</li> </ol>"},{"location":"reference/annotations/#in-everything-else","title":"in everything else","text":"<p>The Attribute Lists extension is the key ingredient for adding annotations to  most elements, but it has some limitations. However, it's always possible to leverage the Markdown in HTML extension to wrap arbitrary elements with a <code>div</code> with the <code>annotate</code> class:</p> HTML with annotations<pre><code>&lt;div class=\"annotate\" markdown&gt;\n&gt; Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.\n\n&lt;/div&gt;\n1.  :man_raising_hand: I'm an annotation!\n</code></pre> <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> I'm an annotation!</li> </ol> <p>With this trick, annotations can also be added to blockquotes, lists, and many other elements that are not supported by the Attribute Lists extension. Furthermore, note that code blocks follow different semantics.</p> <p>Known limitations</p> <p>Please note that annotations currently don't work in data tables as reported in #3453, as data tables are scrollable elements and positioning is very tricky to get right. This might be fixed in the future.</p>"},{"location":"reference/buttons/","title":"Buttons","text":"<p>Material for MkDocs provides dedicated styles for primary and secondary buttons that can be added to any link, <code>label</code> or <code>button</code> element. This is especially useful for documents or landing pages with dedicated call-to-actions.</p>"},{"location":"reference/buttons/#configuration","title":"Configuration","text":"<p>This configuration allows to add attributes to all inline- and block-level elements with a simple syntax, turning any link into a button. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- attr_list\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Attribute Lists</li> </ul>"},{"location":"reference/buttons/#usage","title":"Usage","text":""},{"location":"reference/buttons/#adding-buttons","title":"Adding buttons","text":"<p>In order to render a link as a button, suffix it with curly braces and add the <code>.md-button</code> class selector to it. The button will receive the selected primary color and accent color if active.</p> Button<pre><code>[Subscribe to our newsletter](#){ .md-button }\n</code></pre> <p>Subscribe to our newsletter</p>"},{"location":"reference/buttons/#adding-primary-buttons","title":"Adding primary buttons","text":"<p>If you want to display a filled, primary button (like on the landing page of Material for MkDocs), add both, the <code>.md-button</code> and <code>.md-button--primary</code> CSS class selectors.</p> Button, primary<pre><code>[Subscribe to our newsletter](#){ .md-button .md-button--primary }\n</code></pre> <p>Subscribe to our newsletter</p>"},{"location":"reference/buttons/#adding-icon-buttons","title":"Adding icon buttons","text":"<p>Of course, icons can be added to all types of buttons by using the icon syntax together with any valid icon shortcode, which can be easily found with a few keystrokes through our icon search.</p> Button with icon<pre><code>[Send :fontawesome-solid-paper-plane:](#){ .md-button }\n</code></pre> <p>Send </p>"},{"location":"reference/code-blocks/","title":"Code blocks","text":"<p>Code blocks and examples are an essential part of technical project documentation. Material for MkDocs provides different ways to set up syntax highlighting for code blocks, either during build time using Pygments or during runtime using a JavaScript syntax highlighter.</p>"},{"location":"reference/code-blocks/#configuration","title":"Configuration","text":"<p>This configuration enables syntax highlighting on code blocks and inline code  blocks, and allows to include source code directly from other files. Add the  following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- pymdownx.highlight:\nanchor_linenums: true\nline_spans: __span\npygments_lang_class: true\n- pymdownx.inlinehilite\n- pymdownx.snippets\n- pymdownx.superfences\n</code></pre> <p>The following sections discuss how to use different syntax highlighting features with Pygments, the recommended highlighter, so they don't apply when using a JavaScript syntax highlighter.</p> <p>See additional configuration options:</p> <ul> <li>Highlight</li> <li>InlineHilite</li> <li>SuperFences</li> <li>Snippets</li> </ul>"},{"location":"reference/code-blocks/#code-copy-button","title":"Code copy button","text":"<p> 9.0.0 \u00b7  Feature flag</p> <p>Code blocks can automatically render a button on the right side to allow the user to copy a code block's contents to the clipboard. Add the following to <code>mkdocs.yml</code> to enable them globally:</p> <pre><code>theme:\nfeatures:\n- content.code.copy\n</code></pre> Enabling or disabling code copy buttons for a specific code block <p>If you don't want to enable code copy buttons globally, you can enable them for a specific code block by using a slightly different syntax based on the Attribute Lists extension:</p> <pre><code>``` { .yaml .copy }\n# Code block content\n```\n</code></pre> <p>Note that the language shortcode which has to come first must now also be  prefixed by a <code>.</code>. Similarly, the copy button can also be disabled for a specific code block:</p> <pre><code>``` { .yaml .no-copy }\n# Code block content\n```\n</code></pre>"},{"location":"reference/code-blocks/#code-selection-button","title":"Code selection button","text":"<p> Sponsors only \u00b7  insiders-4.32.0 \u00b7  Experimental</p> <p>Code blocks can include a button to allow for the selection of line ranges by the user, which is perfect for linking to a specific subsection of a code block. This allows the user to apply line highlighting dynamically. Add the following to <code>mkdocs.yml</code> to enable it globally:</p> <pre><code>theme:\nfeatures:\n- content.code.select\n</code></pre> Enabling or disabling code selection buttons for a specific code block <p>If you don't want to enable code selection buttons globally, you can enable  them for a specific code block by using a slightly different syntax based on  the Attribute Lists extension:</p> <pre><code>``` { .yaml .select }\n# Code block content\n```\n</code></pre> <p>Note that the language shortcode which has to come first must now also be  prefixed by a <code>.</code>. Similarly, the selection button can also be disabled for a specific code block:</p> <pre><code>``` { .yaml .no-select }\n# Code block content\n```\n</code></pre>"},{"location":"reference/code-blocks/#code-annotations","title":"Code annotations","text":"<p> 8.0.0 \u00b7  Feature flag</p> <p>Code annotations offer a comfortable and friendly way to attach arbitrary content to specific sections of code blocks by adding numeric markers in block and inline comments in the language of the code block. Add the following to <code>mkdocs.yml</code> to enable them globally:</p> <pre><code>theme:\nfeatures:\n- content.code.annotate # (1)!\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol> Enabling code annotations for a specific code block <p>If you don't want to enable code annotations globally, because you don't like the automatic inlining behavior, you can enable them for a specific code block by using a slightly different syntax based on the Attribute Lists extension:</p> <pre><code>``` { .yaml .annotate }\n# Code block content\n```\n</code></pre> <p>Note that the language shortcode which has to come first must now also be  prefixed by a <code>.</code>.</p>"},{"location":"reference/code-blocks/#custom-selectors","title":"Custom selectors","text":"<p> Sponsors only \u00b7  insiders-4.32.0 \u00b7  Experimental</p> <p>Normally, code annotations can only be placed in comments, as comments can be considered safe for placement. However, sometimes it might be necessary to place annotations in parts of the code block where comments are not allowed, e.g. in  strings.</p> <p>Additional selectors can be set per-language:</p> <pre><code>extra:\nannotate:\njson: [.s2] # (1)!\n</code></pre> <ol> <li> <p><code>.s2</code> is the name of the lexeme that Pygments generates for double-quoted     strings. If you want to use a code annotation in another lexeme than a     comment, inspect the code block and determine which lexeme needs to be added     to the list of additional selectors.</p> <p>Important: Code annotations cannot be split between lexemes.</p> </li> </ol> <p>Now, code annotations can be used from within strings in JSON:</p> <pre><code>{\n\"key\": \"value (1)\"\n}\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol>"},{"location":"reference/code-blocks/#usage","title":"Usage","text":"<p>Code blocks must be enclosed with two separate lines containing three backticks. To add syntax highlighting to those blocks, add the language shortcode directly after the opening block. See the list of available lexers to find the shortcode for a given language:</p> Code block<pre><code>``` py\nimport tensorflow as tf\n```\n</code></pre> <pre><code>import tensorflow as tf\n</code></pre>"},{"location":"reference/code-blocks/#adding-a-title","title":"Adding a title","text":"<p>In order to provide additional context, a custom title can be added to a code block by using the <code>title=\"&lt;custom title&gt;\"</code> option directly after the shortcode, e.g. to display the name of a file:</p> Code block with title<pre><code>``` py title=\"bubble_sort.py\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> bubble_sort.py<pre><code>def bubble_sort(items):\nfor i in range(len(items)):\nfor j in range(len(items) - 1 - i):\nif items[j] &gt; items[j + 1]:\nitems[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"reference/code-blocks/#adding-annotations","title":"Adding annotations","text":"<p>Code annotations can be placed anywhere in a code block where a comment for the language of the block can be placed, e.g. for JavaScript in <code>// ...</code> and <code>/* ... */</code>, for YAML in <code># ...</code>, etc.1:</p> Code block with annotation<pre><code>``` yaml\ntheme:\n  features:\n    - content.code.annotate # (1)\n```\n\n1.  :man_raising_hand: I'm a code annotation! I can contain `code`, __formatted\n    text__, images, ... basically anything that can be written in Markdown.\n</code></pre> <pre><code>theme:\nfeatures:\n- content.code.annotate # (1)\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol>"},{"location":"reference/code-blocks/#stripping-comments","title":"Stripping comments","text":"<p> 8.5.0 \u00b7  Experimental</p> <p>If you wish to strip the comment characters surrounding a code annotation, simply add an <code>!</code> after the closing parenthesis of the code annotation:</p> Code block with annotation, stripped<pre><code>``` yaml\n# (1)!\n```\n\n1.  Look ma, less line noise!\n</code></pre> <pre><code># (1)!\n</code></pre> <ol> <li>Look ma, less line noise!</li> </ol> <p>Note that this only allows for a single code annotation to be rendered per comment. If you want to add multiple code annotations, comments cannot be stripped for technical reasons.</p>"},{"location":"reference/code-blocks/#adding-line-numbers","title":"Adding line numbers","text":"<p>Line numbers can be added to a code block by using the <code>linenums=\"&lt;start&gt;\"</code> option directly after the shortcode, whereas <code>&lt;start&gt;</code> represents the starting line number. A code block can start from a line number other than <code>1</code>, which allows to split large code blocks for readability:</p> Code block with line numbers<pre><code>``` py linenums=\"1\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> <pre><code>def bubble_sort(items):\nfor i in range(len(items)):\nfor j in range(len(items) - 1 - i):\nif items[j] &gt; items[j + 1]:\nitems[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"reference/code-blocks/#highlighting-specific-lines","title":"Highlighting specific lines","text":"<p>Specific lines can be highlighted by passing the line numbers to the <code>hl_lines</code> argument placed right after the language shortcode. Note that line counts start at <code>1</code>, regardless of the starting line number specified as part of <code>linenums</code>:</p> Code block with highlighted lines<pre><code>``` py hl_lines=\"2 3\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> <pre><code>def bubble_sort(items):\nfor i in range(len(items)):\nfor j in range(len(items) - 1 - i):\nif items[j] &gt; items[j + 1]:\nitems[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"reference/code-blocks/#highlighting-inline-code-blocks","title":"Highlighting inline code blocks","text":"<p>When InlineHilite is enabled, syntax highlighting can be applied to inline code blocks by prefixing them with a shebang, i.e. <code>#!</code>, directly followed by the corresponding language shortcode.</p> Inline code block<pre><code>The `#!python range()` function is used to generate a sequence of numbers.\n</code></pre> <p>The <code>range()</code> function is used to generate a sequence of numbers.</p>"},{"location":"reference/code-blocks/#embedding-external-files","title":"Embedding external files","text":"<p>When Snippets is enabled, content from other files (including source files) can be embedded by using the <code>--8&lt;--</code> notation directly from within a code block:</p> Code block with external content<pre><code>``` title=\".browserslistrc\"\n--8&lt;-- \".browserslistrc\"\n```\n</code></pre> .browserslistrc<pre><code>last 4 years\n</code></pre>"},{"location":"reference/code-blocks/#customization","title":"Customization","text":""},{"location":"reference/code-blocks/#custom-syntax-theme","title":"Custom syntax theme","text":"<p>If Pygments is used, Material for MkDocs provides the styles for code blocks, which are built with a custom and well-balanced palette that works equally well for both color schemes:</p> <ul> <li> <code>--md-code-hl-number-color</code></li> <li> <code>--md-code-hl-special-color</code></li> <li> <code>--md-code-hl-function-color</code></li> <li> <code>--md-code-hl-constant-color</code></li> <li> <code>--md-code-hl-keyword-color</code></li> <li> <code>--md-code-hl-string-color</code></li> <li> <code>--md-code-hl-name-color</code></li> <li> <code>--md-code-hl-operator-color</code></li> <li> <code>--md-code-hl-punctuation-color</code></li> <li> <code>--md-code-hl-comment-color</code></li> <li> <code>--md-code-hl-generic-color</code></li> <li> <code>--md-code-hl-variable-color</code></li> </ul> <p>Code block foreground, background and line highlight colors are defined via:</p> <ul> <li> <code>--md-code-fg-color</code></li> <li> <code>--md-code-bg-color</code></li> <li> <code>--md-code-hl-color</code></li> </ul> <p>Let's say you want to change the color of <code>\"strings\"</code>. While there are several types of string tokens, they use the same color. You can assign a new color by using an additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>:root &gt; * {\n--md-code-hl-string-color: #0FF1CE;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre> <p>If you want to tweak a specific type of string, e.g. <code>`backticks`</code>, you can lookup the specific CSS class name in the syntax theme definition, and override it as part of your additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>.highlight .sb {\ncolor: #0FF1CE;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre>"},{"location":"reference/code-blocks/#annotation-tooltip-width","title":"Annotation tooltip width","text":"<p>If you have a lot of content hosted inside your code annotations, it can be a good idea to increase the width of the tooltip by adding the following as part of an additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>:root {\n--md-tooltip-width: 600px;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre> <p>This will render annotations with a larger width:</p> <pre><code># (1)!\n</code></pre> <ol> <li>Muuuuuuuuuuuuuuuch more space for content</li> </ol>"},{"location":"reference/code-blocks/#annotations-with-numbers","title":"Annotations with numbers","text":"<p>Prior to  8.1.0, code annotations were rendered with markers showing the original number as used by the author. However, for technical reasons code annotation numbers restart each code block, which might lead to confusion. For this reason, code annotations now render as <code>+</code> signs which are rotated if they're open to denote that clicking them again will close them.</p> <p>If you wish to revert to the prior behavior and display code annotation numbers, you can add an additional style sheet and copy and paste the following CSS:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>.md-typeset .md-annotation__index &gt; ::before {\ncontent: attr(data-md-annotation-id);\n}\n.md-typeset :focus-within &gt; .md-annotation__index &gt; ::before {\ntransform: none;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre> <ol> <li> <p>Code annotations require syntax highlighting with Pygments \u2013 they're currently not compatible with JavaScript syntax highlighters, or languages that do not have comments in their grammar. However, we're actively working on supporting alternate ways of defining code annotations, allowing to always place code annotations at the end of lines.\u00a0\u21a9</p> </li> </ol>"},{"location":"reference/content-tabs/","title":"Content tabs","text":"<p>Sometimes, it's desirable to group alternative content under different tabs, e.g. when describing how to access an API from different languages or environments. Material for MkDocs allows for beautiful and functional tabs, grouping code blocks and other content.</p>"},{"location":"reference/content-tabs/#configuration","title":"Configuration","text":"<p>This configuration enables content tabs, and allows to nest arbitrary content inside content tabs, including code blocks and ... more content tabs! Add the  following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- pymdownx.superfences\n- pymdownx.tabbed:\nalternate_style: true </code></pre> <p>See additional configuration options:</p> <ul> <li>SuperFences</li> <li>Tabbed</li> </ul>"},{"location":"reference/content-tabs/#anchor-links","title":"Anchor links","text":"<p> Sponsors only \u00b7  insiders-4.17.0 \u00b7  Experimental</p> <p>In order to link to content tabs and share them more easily, Insiders adds an anchor link to each content tab automatically, which you can copy via right click or open in a new tab:</p> Open me in a new tab ...... or me ...... or even me <p>You can copy the link of the tab and create a link on the same or any other page. For example, you can jump to the third tab above this paragraph or to the publishing guide for Insiders.</p> <p>Readable anchor links</p> <p>Python Markdown Extensions 9.6 adds support for slugification of content tabs, which produces nicer looking and more readable anchor links. Enable the slugify function with the following lines:</p> <pre><code>markdown_extensions:\n- pymdownx.tabbed:\nslugify: !!python/object/apply:pymdownx.slugs.slugify\nkwds:\ncase: lower\n</code></pre> <p>Fore more information, please see the extension guide.</p>"},{"location":"reference/content-tabs/#linked-content-tabs","title":"Linked content tabs","text":"<p> 8.3.0 \u00b7  Feature flag</p> <p>When enabled, all content tabs across the whole documentation site will be linked and switch to the same label when the user clicks on a tab. Add the  following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- content.tabs.link\n</code></pre> <p>Content tabs are linked based on their label, not offset. This means that all tabs with the same label will be activated when a user clicks a content tab regardless of order inside a container. Furthermore, this feature is fully integrated with instant loading and persisted across page loads.</p> Feature enabledFeature disabled <p></p> <p></p>"},{"location":"reference/content-tabs/#usage","title":"Usage","text":""},{"location":"reference/content-tabs/#grouping-code-blocks","title":"Grouping code blocks","text":"<p>Code blocks are one of the primary targets to be grouped, and can be considered a special case of content tabs, as tabs with a single code block are always rendered without horizontal spacing:</p> Content tabs with code blocks<pre><code>=== \"C\"\n\n    ``` c\n    #include &lt;stdio.h&gt;\n\n    int main(void) {\n      printf(\"Hello world!\\n\");\n      return 0;\n    }\n    ```\n\n=== \"C++\"\n\n    ``` c++\n    #include &lt;iostream&gt;\n\n    int main(void) {\n      std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n      return 0;\n    }\n    ```\n</code></pre> CC++ <pre><code>#include &lt;stdio.h&gt;\nint main(void) {\nprintf(\"Hello world!\\n\");\nreturn 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\nint main(void) {\nstd::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\nreturn 0;\n}\n</code></pre>"},{"location":"reference/content-tabs/#grouping-other-content","title":"Grouping other content","text":"<p>When a content tab contains more than one code block, it is rendered with horizontal spacing. Vertical spacing is never added, but can be achieved by nesting tabs in other blocks:</p> Content tabs<pre><code>=== \"Unordered list\"\n\n    * Sed sagittis eleifend rutrum\n    * Donec vitae suscipit est\n    * Nulla tempor lobortis orci\n\n=== \"Ordered list\"\n\n    1. Sed sagittis eleifend rutrum\n    2. Donec vitae suscipit est\n    3. Nulla tempor lobortis orci\n</code></pre> Unordered listOrdered list <ul> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ul> <ol> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ol>"},{"location":"reference/content-tabs/#embedded-content","title":"Embedded content","text":"<p>When SuperFences is enabled, content tabs can contain arbitrary nested content, including further content tabs, and can be nested in other blocks like admonitions or blockquotes:</p> Content tabs in admonition<pre><code>!!! example\n\n    === \"Unordered List\"\n\n        ``` markdown\n        * Sed sagittis eleifend rutrum\n        * Donec vitae suscipit est\n        * Nulla tempor lobortis orci\n        ```\n\n    === \"Ordered List\"\n\n        ``` markdown\n        1. Sed sagittis eleifend rutrum\n        2. Donec vitae suscipit est\n        3. Nulla tempor lobortis orci\n        ```\n</code></pre> <p>Example</p> Unordered ListOrdered List <pre><code>* Sed sagittis eleifend rutrum\n* Donec vitae suscipit est\n* Nulla tempor lobortis orci\n</code></pre> <pre><code>1. Sed sagittis eleifend rutrum\n2. Donec vitae suscipit est\n3. Nulla tempor lobortis orci\n</code></pre>"},{"location":"reference/data-tables/","title":"Data tables","text":"<p>Material for MkDocs defines default styles for data tables \u2013 an excellent way of rendering tabular data in project documentation. Furthermore, customizations like sortable tables can be achieved with a third-party library and some additional JavaScript.</p>"},{"location":"reference/data-tables/#configuration","title":"Configuration","text":"<p>This configuration enables Markdown table support, which should normally be enabled by default, but to be sure, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- tables\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Tables</li> </ul>"},{"location":"reference/data-tables/#usage","title":"Usage","text":"<p>Data tables can be used at any position in your project documentation and can contain arbitrary Markdown, including inline code blocks, as well as icons and emojis:</p> Data table<pre><code>| Method      | Description                          |\n| ----------- | ------------------------------------ |\n| `GET`       | :material-check:     Fetch resource  |\n| `PUT`       | :material-check-all: Update resource |\n| `DELETE`    | :material-close:     Delete resource |\n</code></pre> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource"},{"location":"reference/data-tables/#column-alignment","title":"Column alignment","text":"<p>If you want to align a specific column to the <code>left</code>, <code>center</code> or <code>right</code>, you can use the regular Markdown syntax placing <code>:</code> characters at the beginning and/or end of the divider.</p> LeftCenterRight Data table, columns aligned to left<pre><code>| Method      | Description                          |\n| :---------- | :----------------------------------- |\n| `GET`       | :material-check:     Fetch resource  |\n| `PUT`       | :material-check-all: Update resource |\n| `DELETE`    | :material-close:     Delete resource |\n</code></pre> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource Data table, columns centered<pre><code>| Method      | Description                          |\n| :---------: | :----------------------------------: |\n| `GET`       | :material-check:     Fetch resource  |\n| `PUT`       | :material-check-all: Update resource |\n| `DELETE`    | :material-close:     Delete resource |\n</code></pre> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource Data table, columns aligned to right<pre><code>| Method      | Description                          |\n| ----------: | -----------------------------------: |\n| `GET`       | :material-check:     Fetch resource  |\n| `PUT`       | :material-check-all: Update resource |\n| `DELETE`    | :material-close:     Delete resource |\n</code></pre> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource"},{"location":"reference/data-tables/#customization","title":"Customization","text":""},{"location":"reference/data-tables/#sortable-tables","title":"Sortable tables","text":"<p>If you want to make data tables sortable, you can add tablesort, which is natively integrated with Material for MkDocs and will also work with instant loading via additional JavaScript:</p> <code>docs/javascripts/tablesort.js</code> <code>mkdocs.yml</code> <pre><code>document$.subscribe(function() {\nvar tables = document.querySelectorAll(\"article table:not([class])\")\ntables.forEach(function(table) {\nnew Tablesort(table)\n})\n})\n</code></pre> <pre><code>extra_javascript:\n- https://unpkg.com/tablesort@5.3.0/dist/tablesort.min.js\n- javascripts/tablesort.js\n</code></pre> <p>After applying the customization, data tables can be sorted by clicking on a column:</p> Data table, columns sortable<pre><code>| Method      | Description                          |\n| ----------- | ------------------------------------ |\n| `GET`       | :material-check:     Fetch resource  |\n| `PUT`       | :material-check-all: Update resource |\n| `DELETE`    | :material-close:     Delete resource |\n</code></pre> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource <p>Note that tablesort provides alternative comparison implementations like numbers, filesizes, dates and month names. See the tablesort documentation for more information.</p>"},{"location":"reference/data-tables/#import-table-from-file","title":"Import table from file","text":"<p> Plugin</p> <p>You can also import data from a CSV or Excel file using the plugin <code>mkdocs-table-reader-plugin</code>.</p> <p>First, you will need to install it with <code>pip</code>:</p> <pre><code>pip install mkdocs-table-reader-plugin\n</code></pre> <p>Then extend the <code>mkdocs.yml</code> file like this:</p> <pre><code>plugins:\n- table-reader\n</code></pre> <p>Then, it is a simple process to import the data in to the Markdown files.</p> Import data from  CSV fileImport data from  Excel fileImport data from other file types <p>Let's use a  CSV in the local directory. The file may look like this:</p> ./data.csv<pre><code>col1,col2,col3\nr1c1,r1c2,r1c3\nr2c1,r2c2,r2c3\nr3c1,r3c2,r3c3\n</code></pre> <p>You can then add it to your  Markdown page like this:</p> ./markdown.md<pre><code>...\n\n{{ read_csv('./data.csv') }}\n\n...\n</code></pre> <p>...</p> col1 col2 col3 r1c1 r1c2 r1c3 r2c1 r2c2 r2c3 r3c1 r3c2 r3c3 <p>...</p> <p>Let's use an  Excel file in the local directory. The file may look like this:</p> <p></p> <p>And you can add it to your  Markdown page like this:</p> ./markdown.md<pre><code>...\n\n{{ read_excel('./Book1.xlsx', engine='openpyxl') }}\n\n...\n</code></pre> <p>It will then return a result like this:</p> col1 col2 col3 r1c1 r1c2 r1c3 r2c1 r2c2 r2c3 r3c1 r3c2 r3c3 <p>Warning</p> <p>You may receive an error if you use <code>engine='openpyxl'</code>.</p> <p>If this happens, you can resolve it by installing it using <code>pip</code>:</p> <pre><code>pip install openpyxl\n</code></pre> <p>Read more here: pandas.read_excel</p> <p>Pro Tip: Multiple Sheets</p> <p>If your Excel file contains multiple sheets, you may want to extend the function by adding the <code>sheet_name</code> parameter.</p> <p>It would look like this:</p> ./markdown.md<pre><code>...\n\n{{ read_excel('./Book1.xlsx', engine='openpyxl', sheet_name=\"Sheet1\") }}\n\n...\n</code></pre> <p>By default, Pandas will grab the first sheet in the workbook.</p> <p>Read more here: pandas.read_excel</p> <p>The plugin <code>mkdocs-table-reader-plugin</code> also provides readers for other formats:</p> <ul> <li><code>read_csv</code></li> <li><code>read_fwf</code></li> <li><code>read_yaml</code></li> <li><code>read_table</code></li> <li><code>read_json</code></li> <li><code>read_excel</code></li> <li><code>read_raw</code></li> </ul> <p>You can read more on their Docs website: mkdocs-table-reader-plugin</p>"},{"location":"reference/diagrams/","title":"Diagrams","text":"<p>Diagrams help to communicate complex relationships and interconnections between different technical components, and are a great addition to project documentation. Material for MkDocs integrates with Mermaid.js, a very popular and flexible solution for drawing diagrams.</p>"},{"location":"reference/diagrams/#configuration","title":"Configuration","text":"<p> 8.2.0</p> <p>This configuration enables native support for Mermaid.js diagrams. Material for MkDocs will automatically initialize the JavaScript runtime when a page  includes a <code>mermaid</code> code block:</p> <pre><code>markdown_extensions:\n- pymdownx.superfences:\ncustom_fences:\n- name: mermaid\nclass: mermaid\nformat: !!python/name:pymdownx.superfences.fence_code_format\n</code></pre> <p>No further configuration is necessary. Advantages over a custom integration:</p> <ul> <li> Works with instant loading without any additional effort</li> <li> Diagrams automatically use fonts and colors defined in <code>mkdocs.yml</code>1</li> <li> Fonts and colors can be customized with additional style sheets</li> <li> Support for both, light and dark color schemes \u2013 try it on this page!</li> </ul>"},{"location":"reference/diagrams/#usage","title":"Usage","text":""},{"location":"reference/diagrams/#using-flowcharts","title":"Using flowcharts","text":"<p>Flowcharts are diagrams that represent workflows or processes. The steps are rendered as nodes of various kinds and are connected by edges, describing the necessary order of steps:</p> Flow chart<pre><code>``` mermaid\ngraph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];\n```\n</code></pre> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre>"},{"location":"reference/diagrams/#using-sequence-diagrams","title":"Using sequence diagrams","text":"<p>Sequence diagrams describe a specific scenario as sequential interactions  between multiple objects or actors, including the messages that are exchanged between those actors:</p> Sequence diagram<pre><code>``` mermaid\nsequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!\n```\n</code></pre> <pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre>"},{"location":"reference/diagrams/#using-state-diagrams","title":"Using state diagrams","text":"<p>State diagrams are a great tool to describe the behavior of a system, decomposing it into a finite number of states, and transitions between those states:</p> State diagram<pre><code>``` mermaid\nstateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]\n```\n</code></pre> <pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre>"},{"location":"reference/diagrams/#using-class-diagrams","title":"Using class diagrams","text":"<p>Class diagrams are central to object oriented programing, describing the structure of a system by modelling entities as classes and relationships between them:</p> Class diagram<pre><code>``` mermaid\nclassDiagram\n  Person &lt;|-- Student\n  Person &lt;|-- Professor\n  Person : +String name\n  Person : +String phoneNumber\n  Person : +String emailAddress\n  Person: +purchaseParkingPass()\n  Address \"1\" &lt;-- \"0..1\" Person:lives at\n  class Student{\n    +int studentNumber\n    +int averageMark\n    +isEligibleToEnrol()\n    +getSeminarsTaken()\n  }\n  class Professor{\n    +int salary\n  }\n  class Address{\n    +String street\n    +String city\n    +String state\n    +int postalCode\n    +String country\n    -validate()\n    +outputAsLabel()  \n  }\n```\n</code></pre> <pre><code>classDiagram\n  Person &lt;|-- Student\n  Person &lt;|-- Professor\n  Person : +String name\n  Person : +String phoneNumber\n  Person : +String emailAddress\n  Person: +purchaseParkingPass()\n  Address \"1\" &lt;-- \"0..1\" Person:lives at\n  class Student{\n    +int studentNumber\n    +int averageMark\n    +isEligibleToEnrol()\n    +getSeminarsTaken()\n  }\n  class Professor{\n    +int salary\n  }\n  class Address{\n    +String street\n    +String city\n    +String state\n    +int postalCode\n    +String country\n    -validate()\n    +outputAsLabel()  \n  }</code></pre>"},{"location":"reference/diagrams/#using-entity-relationship-diagrams","title":"Using entity-relationship diagrams","text":"<p>An entity-relationship diagram is composed of entity types and specifies relationships that exist between entities. It describes inter-related things in a specific domain of knowledge:</p> Entity-relationship diagram<pre><code>``` mermaid\nerDiagram\n  CUSTOMER ||--o{ ORDER : places\n  ORDER ||--|{ LINE-ITEM : contains\n  LINE-ITEM {\n    string name\n    int pricePerUnit\n  }\n  CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\n```\n</code></pre> <pre><code>erDiagram\n  CUSTOMER ||--o{ ORDER : places\n  ORDER ||--|{ LINE-ITEM : contains\n  LINE-ITEM {\n    string name\n    int pricePerUnit\n  }\n  CUSTOMER }|..|{ DELIVERY-ADDRESS : uses</code></pre>"},{"location":"reference/diagrams/#other-diagram-types","title":"Other diagram types","text":"<p>Besides the diagram types listed above, Mermaid.js provides support for pie charts, gantt charts, user journeys, git graphs and requirement diagrams, all of which are not officially supported by Material for MkDocs. Those diagrams should still work as advertised by Mermaid.js, but we don't consider them a good choice, mostly as they don't work well on mobile.</p> <ol> <li> <p>While all Mermaid.js features should work out-of-the-box, Material for MkDocs will currently only adjust the fonts and colors for flowcharts, sequence diagrams, class diagrams, state diagrams and entity relationship  diagrams. See the section on other diagrams for more information why this is currently not implemented for all diagrams.\u00a0\u21a9</p> </li> </ol>"},{"location":"reference/footnotes/","title":"Footnotes","text":"<p>Footnotes are a great way to add supplemental or additional information to a specific word, phrase or sentence without interrupting the flow of a document. Material for MkDocs provides the ability to define, reference and render footnotes.</p>"},{"location":"reference/footnotes/#configuration","title":"Configuration","text":"<p>This configuration adds the ability to define inline footnotes, which are then rendered below all Markdown content of a document. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- footnotes\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Footnotes</li> </ul>"},{"location":"reference/footnotes/#usage","title":"Usage","text":""},{"location":"reference/footnotes/#adding-footnote-references","title":"Adding footnote references","text":"<p>A footnote reference must be enclosed in square brackets and must start with a caret <code>^</code>, directly followed by an arbitrary identifier, which is similar to the standard Markdown link syntax.</p> Text with footnote references<pre><code>Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2]\n</code></pre> <p>Lorem ipsum1 dolor sit amet, consectetur adipiscing elit.2</p>"},{"location":"reference/footnotes/#adding-footnote-content","title":"Adding footnote content","text":"<p>The footnote content must be declared with the same identifier as the reference. It can be inserted at an arbitrary position in the document and is always rendered at the bottom of the page. Furthermore, a backlink to the footnote reference is automatically added.</p>"},{"location":"reference/footnotes/#on-a-single-line","title":"on a single line","text":"<p>Short footnotes can be written on the same line:</p> Footnote<pre><code>[^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n</code></pre> <p> Jump to footnote</p>"},{"location":"reference/footnotes/#on-multiple-lines","title":"on multiple lines","text":"<p>Paragraphs can be written on the next line and must be indented by four spaces:</p> Footnote<pre><code>[^2]:\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p> Jump to footnote</p> <ol> <li> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\u00a0\u21a9</p> </li> <li> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.\u00a0\u21a9</p> </li> </ol>"},{"location":"reference/formatting/","title":"Formatting","text":"<p>Material for MkDocs provides support for several HTML elements that can be used  to highlight sections of a document or apply specific formatting. Additionally,  Critic Markup is supported, adding the ability to display suggested changes for a document.</p>"},{"location":"reference/formatting/#configuration","title":"Configuration","text":"<p>This configuration enables support for keyboard keys, tracking changes in documents, defining sub- and superscript and highlighting text. Add the  following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- pymdownx.critic\n- pymdownx.caret\n- pymdownx.keys\n- pymdownx.mark\n- pymdownx.tilde\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Critic</li> <li>Caret, Mark &amp; Tilde</li> <li>Keys</li> </ul>"},{"location":"reference/formatting/#usage","title":"Usage","text":""},{"location":"reference/formatting/#highlighting-changes","title":"Highlighting changes","text":"<p>When Critic is enabled, Critic Markup can be used, which adds the ability to  highlight suggested changes, as well as add inline comments to a document:</p> Text with suggested changes<pre><code>Text can be {--deleted--} and replacement text {++added++}. This can also be\ncombined into {~~one~&gt;a single~~} operation. {==Highlighting==} is also\npossible {&gt;&gt;and comments can be added inline&lt;&lt;}.\n\n{==\n\nFormatting can also be applied to blocks by putting the opening and closing\ntags on separate lines and adding new lines between the tags and the content.\n\n==}\n</code></pre> <p>Text can be deleted and replacement text added. This can also be combined into onea single operation. Highlighting is also possible and comments can be added inline.</p> <p>       Formatting can also be applied to blocks by putting the opening and       closing tags on separate lines and adding new lines between the tags and       the content.     </p>"},{"location":"reference/formatting/#highlighting-text","title":"Highlighting text","text":"<p>When Caret, Mark &amp; Tilde are enabled, text can be highlighted with a simple  syntax, which is more convenient that directly using the corresponding <code>mark</code>, <code>ins</code> and <code>del</code> HTML tags:</p> Text with highlighting<pre><code>- ==This was marked==\n- ^^This was inserted^^\n- ~~This was deleted~~\n</code></pre> <ul> <li>This was marked</li> <li>This was inserted</li> <li>This was deleted</li> </ul>"},{"location":"reference/formatting/#sub-and-superscripts","title":"Sub- and superscripts","text":"<p>When Caret &amp; Tilde are enabled, text can be sub- and  superscripted with a simple syntax, which is more convenient than directly using the corresponding <code>sub</code> and <code>sup</code> HTML tags:</p> Text with sub- and superscripts<pre><code>- H~2~O\n- A^T^A\n</code></pre> <ul> <li>H2O</li> <li>ATA</li> </ul>"},{"location":"reference/formatting/#adding-keyboard-keys","title":"Adding keyboard keys","text":"<p>When Keys is enabled, keyboard keys can be rendered with a simple syntax. Consult the Python Markdown Extensions documentation to learn about all available shortcodes:</p> Keyboard keys<pre><code>++ctrl+alt+del++\n</code></pre> <p>Ctrl+Alt+Del</p>"},{"location":"reference/grids/","title":"Grids","text":"<p>Material for MkDocs makes it easy to arrange sections into grids, grouping blocks that convey similar meaning or are of equal importance. Grids are just perfect for building index pages that show a brief overview of a large section of your documentation.</p>"},{"location":"reference/grids/#configuration","title":"Configuration","text":"<p>This configuration enables the use of grids, allowing to bring blocks of identical or different types into a rectangular shape. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions: # (1)!\n- attr_list\n- md_in_html\n</code></pre> <ol> <li>Note that some of the examples listed below use icons and emojis, which     have to be configured separately.</li> </ol> <p>See additional configuration options:</p> <ul> <li>Attribute Lists</li> <li>Markdown in HTML</li> </ul>"},{"location":"reference/grids/#usage","title":"Usage","text":"<p>Grids come in two flavors: card grids, which wrap each element in a card that levitates on hover, and generic grids, which allow to arrange arbitrary block elements in a rectangular shape.</p>"},{"location":"reference/grids/#using-card-grids","title":"Using card grids","text":"<p> Sponsors only \u00b7  insiders-4.12.0 \u00b7  Experimental</p> <p>Card grids wrap each grid item with a beautiful hover card that levitates on hover. They come in two slightly different syntaxes: list and block syntax, adding support for distinct use cases.</p>"},{"location":"reference/grids/#list-syntax","title":"List syntax","text":"<p>The list syntax is essentially a shortcut for card grids, and consists of an unordered (or ordered) list wrapped by a <code>div</code> with both, the <code>grid</code> and <code>cards</code> classes:</p> Card grid<pre><code>&lt;div class=\"grid cards\" markdown&gt;\n- :fontawesome-brands-html5: __HTML__ for content and structure\n- :fontawesome-brands-js: __JavaScript__ for interactivity\n- :fontawesome-brands-css3: __CSS__ for text running out of boxes\n- :fontawesome-brands-internet-explorer: __Internet Explorer__ ... huh?\n\n&lt;/div&gt;\n</code></pre> <ul> <li> HTML for content and structure</li> <li> JavaScript for interactivity</li> <li> CSS for text running out of boxes</li> <li> Internet Explorer ... huh?</li> </ul> <p>List elements can contain arbitrary Markdown, as long as the surrounding <code>div</code> defines the <code>markdown</code> attribute. Following is a more complex example, which includes icons and links:</p> Card grid, complex example<pre><code>&lt;div class=\"grid cards\" markdown&gt;\n-   :material-clock-fast:{ .lg .middle } __Set up in 5 minutes__\n\n    ---\n\n    Install [`mkdocs-material`](#) with [`pip`](#) and get up\n    and running in minutes\n\n    [:octicons-arrow-right-24: Getting started](#)\n\n-   :fontawesome-brands-markdown:{ .lg .middle } __It's just Markdown__\n\n    ---\n\n    Focus on your content and generate a responsive and searchable static site\n\n    [:octicons-arrow-right-24: Reference](#)\n\n-   :material-format-font:{ .lg .middle } __Made to measure__\n\n    ---\n\n    Change the colors, fonts, language, icons, logo and more with a few lines\n\n    [:octicons-arrow-right-24: Customization](#)\n\n-   :material-scale-balance:{ .lg .middle } __Open Source, MIT__\n\n    ---\n\n    Material for MkDocs is licensed under MIT and available on [GitHub]\n\n    [:octicons-arrow-right-24: License](#)\n\n&lt;/div&gt;\n</code></pre> <ul> <li> <p> Set up in 5 minutes</p> <p>Install <code>mkdocs-material</code> with <code>pip</code> and get up and running in minutes</p> <p> Getting started</p> </li> <li> <p> It's just Markdown</p> <p>Focus on your content and generate a responsive and searchable static site</p> <p> Reference</p> </li> <li> <p> Made to measure</p> <p>Change the colors, fonts, language, icons, logo and more with a few lines</p> <p> Customization</p> </li> <li> <p> Open Source, MIT</p> <p>Material for MkDocs is licensed under MIT and available on GitHub</p> <p> License</p> </li> </ul> <p>If there's insufficient space to render grid items next to each other, the items will stretch to the full width of the viewport, e.g. on mobile viewports. If there's more space available, grids will render in items of 3 and more, e.g. when hiding both sidebars.</p>"},{"location":"reference/grids/#block-syntax","title":"Block syntax","text":"<p>The block syntax allows for arranging cards in grids together with other elements, as explained in the section on generic grids. Just add the <code>card</code> class to any block element inside a <code>grid</code>:</p> Card grid, blocks<pre><code>&lt;div class=\"grid\" markdown&gt;\n:fontawesome-brands-html5: __HTML__ for content and structure\n{ .card }\n\n:fontawesome-brands-js: __JavaScript__ for interactivity\n{ .card }\n\n:fontawesome-brands-css3: __CSS__ for text running out of boxes\n{ .card }\n\n&gt; :fontawesome-brands-internet-explorer: __Internet Explorer__ ... huh?\n\n&lt;/div&gt;\n</code></pre> <p> HTML for content and structure</p> <p> JavaScript for interactivity</p> <p> CSS for text running out of boxes</p> <p> Internet Explorer ... huh?</p> <p>While this syntax may seem unnecessarily verbose at first, the previous example shows how card grids can now be mixed with other elements that will also stretch to the grid.</p>"},{"location":"reference/grids/#using-generic-grids","title":"Using generic grids","text":"<p> Sponsors only \u00b7  insiders-4.12.0 \u00b7  Experimental</p> <p>Generic grids allow for arranging arbitrary block elements in a grid, including admonitions, code blocks, content tabs and more. Just wrap a set of blocks by using a <code>div</code> with the <code>grid</code> class:</p> Generic grid<pre><code>&lt;div class=\"grid\" markdown&gt;\n=== \"Unordered list\"\n\n    * Sed sagittis eleifend rutrum\n    * Donec vitae suscipit est\n    * Nulla tempor lobortis orci\n\n=== \"Ordered list\"\n\n    1. Sed sagittis eleifend rutrum\n    2. Donec vitae suscipit est\n    3. Nulla tempor lobortis orci\n\n``` title=\"Content tabs\"\n=== \"Unordered list\"\n\n    * Sed sagittis eleifend rutrum\n    * Donec vitae suscipit est\n    * Nulla tempor lobortis orci\n\n=== \"Ordered list\"\n\n    1. Sed sagittis eleifend rutrum\n    2. Donec vitae suscipit est\n    3. Nulla tempor lobortis orci\n```\n\n&lt;/div&gt;\n</code></pre> Unordered listOrdered list <ul> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ul> <ol> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ol> Content tabs<pre><code>=== \"Unordered list\"\n\n    * Sed sagittis eleifend rutrum\n    * Donec vitae suscipit est\n    * Nulla tempor lobortis orci\n\n=== \"Ordered list\"\n\n    1. Sed sagittis eleifend rutrum\n    2. Donec vitae suscipit est\n    3. Nulla tempor lobortis orci\n</code></pre>"},{"location":"reference/icons-emojis/","title":"Icons, Emojis","text":"<p>One of the best features of Material for MkDocs is the possibility to use more than 10,000 icons and thousands of emojis in your project  documentation with practically zero additional effort. Moreover, custom icons  can be added and used in <code>mkdocs.yml</code>, documents and templates.</p>"},{"location":"reference/icons-emojis/#search","title":"Search","text":"<p> Tip: Enter some keywords to find icons and emojis and click on the   shortcode to copy it to your clipboard. </p>"},{"location":"reference/icons-emojis/#configuration","title":"Configuration","text":"<p>This configuration enables the use of icons and emojis by using simple shortcodes which can be discovered through the icon search. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- attr_list\n- pymdownx.emoji:\nemoji_index: !!python/name:materialx.emoji.twemoji\nemoji_generator: !!python/name:materialx.emoji.to_svg\n</code></pre> <p>The following icon sets are bundled with Material for MkDocs:</p> <ul> <li> \u2013 Material Design</li> <li> \u2013 FontAwesome</li> <li> \u2013 Octicons</li> <li> \u2013 Simple Icons</li> </ul> <p>See additional configuration options:</p> <ul> <li>Attribute Lists</li> <li>Emoji</li> <li>Emoji with custom icons</li> </ul>"},{"location":"reference/icons-emojis/#usage","title":"Usage","text":""},{"location":"reference/icons-emojis/#using-emojis","title":"Using emojis","text":"<p>Emojis can be integrated in Markdown by putting the shortcode of the emoji between two colons. If you're using Twemoji (recommended), you can look up the shortcodes at Emojipedia:</p> Emoji<pre><code>:smile: \n</code></pre> <p></p>"},{"location":"reference/icons-emojis/#using-icons","title":"Using icons","text":"<p>When Emoji is enabled, icons can be used similar to emojis, by referencing a valid path to any icon bundled with the theme, which are located in the <code>.icons</code> directory, and replacing <code>/</code> with <code>-</code>:</p> Icon<pre><code>:fontawesome-regular-face-laugh-wink:\n</code></pre> <p></p>"},{"location":"reference/icons-emojis/#with-colors","title":"with colors","text":"<p>When Attribute Lists is enabled, custom CSS classes can be added to icons by suffixing the icon with a special syntax. While HTML allows to use inline styles, it's always recommended to add an additional style sheet and move declarations into dedicated CSS classes:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>.twitter {\ncolor: #1DA1F2;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre> <p>After applying the customization, add the CSS class to the icon shortcode:</p> Icon with color<pre><code>:fontawesome-brands-twitter:{ .twitter }\n</code></pre> <p></p>"},{"location":"reference/icons-emojis/#with-animations","title":"with animations","text":"<p>Similar to adding colors, it's just as easy to add animations to icons by using an additional style sheet, defining a <code>@keyframes</code> rule and adding a dedicated CSS class to the icon:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>@keyframes heart {\n0%, 40%, 80%, 100% {\ntransform: scale(1);\n}\n20%, 60% {\ntransform: scale(1.15);\n}\n}\n.heart {\nanimation: heart 1000ms infinite;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre> <p>After applying the customization, add the CSS class to the icon shortcode:</p> Icon with animation<pre><code>:octicons-heart-fill-24:{ .heart }\n</code></pre> <p></p>"},{"location":"reference/icons-emojis/#icons-emojis-in-sidebars","title":"Icons, emojis in sidebars","text":"<p>With the help of the built-in typeset plugin, you can use icons and emojis in headings, which will then be rendered in the sidebars. The plugin preserves Markdown and HTML formatting.</p>"},{"location":"reference/icons-emojis/#customization","title":"Customization","text":""},{"location":"reference/icons-emojis/#using-icons-in-templates","title":"Using icons in templates","text":"<p>When you're extending the theme with partials or blocks, you can simply reference any icon that's bundled with the theme with Jinja's <code>include</code> function and wrap it with the <code>.twemoji</code> CSS class:</p> <pre><code>&lt;span class=\"twemoji\"&gt;\n  {% include \".icons/fontawesome/brands/twitter.svg\" %} &lt;!-- (1)! --&gt;\n&lt;/span&gt;\n</code></pre> <ol> <li> <p>Enter a few keywords to find the perfect icon using our icon search and     click on the shortcode to copy it to your clipboard:</p> <p> <ol></ol> </p> </li> </ol> <p>This is exactly what Material for MkDocs does in its templates.</p>"},{"location":"reference/images/","title":"Images","text":"<p>While images are first-class citizens of Markdown and part of the core syntax,  it can be difficult to work with them. Material for MkDocs makes working with  images more comfortable, providing styles for image alignment and image captions.</p>"},{"location":"reference/images/#configuration","title":"Configuration","text":"<p>This configuration adds the ability to align images, add captions to images (rendering them as figures), and mark large images for lazy-loading. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- attr_list\n- md_in_html\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Attribute Lists</li> <li>Markdown in HTML</li> </ul>"},{"location":"reference/images/#lightbox","title":"Lightbox","text":"<p> 0.1.0 \u00b7  Plugin</p> <p>If you want to add image zoom functionality to your documentation, the  glightbox plugin is an excellent choice, as it integrates perfectly with Material for MkDocs. Install it with <code>pip</code>:</p> <pre><code>pip install mkdocs-glightbox\n</code></pre> <p>Then, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n- glightbox\n</code></pre> <p>We recommend checking out the available configuration options.</p>"},{"location":"reference/images/#usage","title":"Usage","text":""},{"location":"reference/images/#image-alignment","title":"Image alignment","text":"<p>When Attribute Lists is enabled, images can be aligned by adding the respective alignment directions via the <code>align</code> attribute, i.e. <code>align=left</code> or <code>align=right</code>:</p> LeftRight Image, aligned to left<pre><code>![Image title](https://dummyimage.com/600x400/eee/aaa){ align=left }\n</code></pre> <p></p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Image, aligned to right<pre><code>![Image title](https://dummyimage.com/600x400/eee/aaa){ align=right }\n</code></pre> <p></p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>If there's insufficient space to render the text next to the image, the image will stretch to the full width of the viewport, e.g. on mobile viewports.</p> Why is there no centered alignment? <p>The <code>align</code> attribute doesn't allow for centered alignment, which is why this option is not supported by Material for MkDocs.1 Instead, the image captions syntax can be used, as captions are optional.</p>"},{"location":"reference/images/#image-captions","title":"Image captions","text":"<p>Sadly, the Markdown syntax doesn't provide native support for image captions, but it's always possible to use the Markdown in HTML extension with literal <code>figure</code> and <code>figcaption</code> tags:</p> Image with caption<pre><code>&lt;figure markdown&gt;\n  ![Image title](https://dummyimage.com/600x400/){ width=\"300\" }\n  &lt;figcaption&gt;Image caption&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre> Image caption"},{"location":"reference/images/#image-lazy-loading","title":"Image lazy-loading","text":"<p>Modern browsers provide native support for lazy-loading images through the <code>loading=lazy</code> directive, which degrades to eager-loading in browsers without support:</p> Image, lazy-loaded<pre><code>![Image title](https://dummyimage.com/600x400/){ loading=lazy }\n</code></pre> <p></p>"},{"location":"reference/images/#light-and-dark-mode","title":"Light and dark mode","text":"<p> 8.1.1</p> <p>If you added a color palette toggle and want to show different images for light and dark color schemes, you can append a <code>#only-light</code> or <code>#only-dark</code> hash fragment to the image URL:</p> Image, different for light and dark mode<pre><code>![Image title](https://dummyimage.com/600x400/f5f5f5/aaaaaa#only-light)\n![Image title](https://dummyimage.com/600x400/21222c/d5d7e2#only-dark)\n</code></pre> <p> </p> <p>Requirements when using custom color schemes</p> <p>The built-in color schemes define the aforementioned hash fragments, but if you're using custom color schemes, you'll also have to add the following selectors to your scheme, depending on whether it's a light or dark scheme:</p> Custom light schemeCustom dark scheme <pre><code>[data-md-color-scheme=\"custom-light\"] img[src$=\"#only-dark\"]\n[data-md-color-scheme=\"custom-light\"] img[src$=\"#gh-dark-mode-only\"] {\ndisplay: none; /* Hide dark images in light mode */\n}\n</code></pre> <pre><code>[data-md-color-scheme=\"custom-dark\"] img[src$=\"#only-light\"],\n[data-md-color-scheme=\"custom-dark\"] img[src$=\"#gh-light-mode-only\"] {\ndisplay: none; /* Hide light images in dark mode */\n}\n</code></pre> <p>Remember to change <code>\"custom-light\"</code> and <code>\"custom-dark\"</code> to the name of your scheme.</p> <ol> <li> <p>You might also realize that the <code>align</code> attribute has been deprecated as of HTML5, so why use it anyways? The main reason is portability \u2013 it's still supported by all browsers and clients, and is very unlikely to be completely removed, as many older websites still use it. This ensures a consistent appearance when a Markdown file with these attributes is viewed outside of a website generated by Material for MkDocs.\u00a0\u21a9</p> </li> </ol>"},{"location":"reference/lists/","title":"Lists","text":"<p>Material for MkDocs supports several flavors of lists that cater to different use cases, including unordered lists and ordered lists, which are supported through standard Markdown, as well as definition lists and task lists, which are supported through extensions.</p>"},{"location":"reference/lists/#configuration","title":"Configuration","text":"<p>This configuration enables the use of definition lists and tasks lists, which are both not part of the standard Markdown syntax. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- def_list\n- pymdownx.tasklist:\ncustom_checkbox: true\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Definition Lists</li> <li>Tasklist</li> </ul>"},{"location":"reference/lists/#usage","title":"Usage","text":""},{"location":"reference/lists/#using-unordered-lists","title":"Using unordered lists","text":"<p>Unordered lists can be written by prefixing a line with a <code>-</code>, <code>*</code> or <code>+</code> list marker, all of which can be used interchangeably. Furthermore, all flavors of lists can be nested inside each other:</p> List, unordered<pre><code>- Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur\n  accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh\n  lacinia sed. Aenean in finibus diam.\n\n* Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis.\n    * Nam vulputate tincidunt fringilla.\n    * Nullam dignissim ultrices urna non auctor.\n</code></pre> <ul> <li> <p>Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur   accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh   lacinia sed. Aenean in finibus diam.</p> <ul> <li>Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis.</li> <li>Nam vulputate tincidunt fringilla.</li> <li>Nullam dignissim ultrices urna non auctor.</li> </ul> </li> </ul>"},{"location":"reference/lists/#using-ordered-lists","title":"Using ordered lists","text":"<p>Ordered lists must start with a number immediately followed by a dot. The  numbers do not need to be consecutive and can be all set to <code>1.</code>, as they will be re-numbered when rendered:</p> List, ordered<pre><code>1.  Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis\n    sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis\n    nulla. Vivamus a pharetra leo.\n\n1.  Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet\n        quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a\n        ultricies libero efficitur sed.\n\n2.  Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet\n        rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a.\n\n1.  Mauris dictum mi lacus\n        2.  Ut sit amet placerat ante\n        3.  Suspendisse ac eros arcu\n</code></pre> <ol> <li> <p>Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis     sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis     nulla. Vivamus a pharetra leo.</p> <ol> <li> <p>Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet     quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a     ultricies libero efficitur sed.</p> </li> <li> <p>Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet     rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a.</p> <ol> <li>Mauris dictum mi lacus</li> <li>Ut sit amet placerat ante</li> <li>Suspendisse ac eros arcu</li> </ol> </li> </ol> </li> </ol>"},{"location":"reference/lists/#using-definition-lists","title":"Using definition lists","text":"<p>When Definition Lists is enabled, lists of arbitrary key-value pairs, e.g. the parameters of functions or modules, can be enumerated with a simple syntax:</p> Definition list<pre><code>`Lorem ipsum dolor sit amet`\n:   Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus\n    tellus non sem sollicitudin, quis rutrum leo facilisis.\n\n`Cras arcu libero`\n:   Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin\n    ut eros sed sapien ullamcorper consequat. Nunc ligula ante.\n\n    Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis.\n    Nam vulputate tincidunt fringilla.\n    Nullam dignissim ultrices urna non auctor.\n</code></pre> <code>Lorem ipsum dolor sit amet</code> <p>Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis.</p> <code>Cras arcu libero</code> <p>Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante.</p> <p>Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor.</p>"},{"location":"reference/lists/#using-task-lists","title":"Using task lists","text":"<p>When Tasklist is enabled, unordered list items can be prefixed with <code>[ ]</code> to render an unchecked checkbox or <code>[x]</code> to render a checked checkbox, allowing for the definition of task lists:</p> Task list<pre><code>- [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit\n- [ ] Vestibulum convallis sit amet nisi a tincidunt\n    * [x] In hac habitasse platea dictumst\n    * [x] In scelerisque nibh non dolor mollis congue sed et metus\n    * [ ] Praesent sed risus massa\n- [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque\n</code></pre> <ul> <li> Lorem ipsum dolor sit amet, consectetur adipiscing elit</li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Praesent sed risus massa</li> </ul> </li> <li> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</li> </ul>"},{"location":"reference/math/","title":"Math","text":"<p>MathJax and KaTeX are two popular libraries for displaying  mathematical content in browsers. Although both libraries offer similar  functionality, they use different syntaxes and have different configuration  options. This documentation site provides information on how to integrate them  with Material for MkDocs easily.</p>"},{"location":"reference/math/#configuration","title":"Configuration","text":"<p>The following configuration enables support for rendering block and  inline block equations using MathJax and KaTeX.</p>"},{"location":"reference/math/#mathjax","title":"MathJax","text":"<p>MathJax is a powerful and flexible library that supports multiple input formats,  such as LaTeX, MathML, AsciiMath, as well as various output formats like  HTML, SVG, MathML. To use MathJax within your project, add the following lines  to your <code>mkdocs.yml</code>.</p> <code>docs/javascripts/mathjax.js</code> <code>mkdocs.yml</code> <pre><code>window.MathJax = {\ntex: {\ninlineMath: [[\"\\\\(\", \"\\\\)\"]],\ndisplayMath: [[\"\\\\[\", \"\\\\]\"]],\nprocessEscapes: true,\nprocessEnvironments: true\n},\noptions: {\nignoreHtmlClass: \".*|\",\nprocessHtmlClass: \"arithmatex\"\n}\n};\ndocument$.subscribe(() =&gt; { // (1)!\nMathJax.typesetPromise()\n})\n</code></pre> <ol> <li>This integrates MathJax with instant loading.</li> </ol> <pre><code>markdown_extensions:\n- pymdownx.arithmatex:\ngeneric: true\nextra_javascript:\n- javascripts/mathjax.js\n- https://polyfill.io/v3/polyfill.min.js?features=es6\n- https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Arithmatex</li> </ul>"},{"location":"reference/math/#katex","title":"KaTeX","text":"<p>KaTeX is a lightweight library that focuses on speed and simplicity. It  supports a subset of LaTeX syntax and can render math to HTML and SVG. To use  KaTeX within your project, add the following lines to your <code>mkdocs.yml</code>.</p> <code>docs/javascripts/katex.js</code> <code>mkdocs.yml</code> <pre><code>document$.subscribe(({ body }) =&gt; { // (1)!\nrenderMathInElement(body, {\ndelimiters: [\n{ left: \"$$\",  right: \"$$\",  display: true },\n{ left: \"$\",   right: \"$\",   display: false },\n{ left: \"\\\\(\", right: \"\\\\)\", display: false },\n{ left: \"\\\\[\", right: \"\\\\]\", display: true }\n],\n})\n})\n</code></pre> <ol> <li>This integrates KaTeX with instant loading.</li> </ol> <pre><code>extra_javascript:\n- javascripts/katex.js - https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.16.7/katex.min.js  # (1)!\n- https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.16.7/contrib/auto-render.min.js\nextra_css:\n- https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.16.7/katex.min.css\n</code></pre> <ol> <li>Alternatively, you can add these JavaScript and CSS files via <code>script</code> tags by overriding HTML files.</li> </ol>"},{"location":"reference/math/#usage","title":"Usage","text":""},{"location":"reference/math/#using-block-syntax","title":"Using block syntax","text":"<p>Blocks must be enclosed in <code>$$...$$</code> or <code>\\[...\\]</code> on separate lines:</p> block syntax<pre><code>$$\n\\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}}\n$$\n</code></pre> \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\]"},{"location":"reference/math/#using-inline-block-syntax","title":"Using inline block syntax","text":"<p>Inline blocks must be enclosed in <code>$...$</code> or <code>\\(...\\)</code>:</p> inline syntax<pre><code>The homomorphism $f$ is injective if and only if its kernel is only the \nsingleton set $e_G$, because otherwise $\\exists a,b\\in G$ with $a\\neq b$ such \nthat $f(a)=f(b)$.\n</code></pre> <p>The homomorphism \\(f\\) is injective if and only if its kernel is only the  singleton set \\(e_G\\), because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such  that \\(f(a)=f(b)\\).</p>"},{"location":"reference/math/#comparing-mathjax-and-katex","title":"Comparing MathJax and KaTeX","text":"<p>When deciding between MathJax and KaTeX, there are several key factors to  consider:</p> <ul> <li> <p>Speed: KaTeX is generally faster than MathJax. If your site requires rendering large  quantities of complex equations quickly, KaTeX may be the better choice.</p> </li> <li> <p>Syntax Support: MathJax supports a wider array of LaTeX commands and can  process a variety of mathematical markup languages (like AsciiMath and MathML).  If you need advanced LaTeX features, MathJax may be more suitable.</p> </li> <li> <p>Output Format: Both libraries support HTML and SVG outputs. However,  MathJax also offers MathML output, which can be essential for accessibility, as  it is readable by screen readers.</p> </li> <li> <p>Configurability: MathJax provides a range of configuration options,  allowing for more precise control over its behavior. If you have specific  rendering requirements, MathJax might be a more flexible choice.</p> </li> <li> <p>Browser Support: While both libraries work well in modern browsers,  MathJax has broader compatibility with older browsers. If your audience uses a  variety of browsers, including older ones, MathJax might be a safer option.</p> </li> </ul> <p>In summary, KaTeX shines with its speed and simplicity, whereas MathJax offers  more features and better compatibility at the expense of speed. The choice  between the two will largely depend on your specific needs and constraints.</p>"},{"location":"reference/tooltips/","title":"Tooltips","text":"<p>Technical documentation often incurs the usage of many acronyms, which may need additional explanation, especially for new user of your project. For these matters, Material for MkDocs uses a combination of Markdown extensions to enable site-wide glossaries.</p>"},{"location":"reference/tooltips/#configuration","title":"Configuration","text":"<p>This configuration enables abbreviations and allows to build a simple project-wide glossary, sourcing definitions from a central location. Add the following line to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- abbr\n- attr_list\n- pymdownx.snippets\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Abbreviations</li> <li>Attribute Lists</li> <li>Snippets</li> </ul>"},{"location":"reference/tooltips/#improved-tooltips","title":"Improved tooltips","text":"<p> Sponsors only \u00b7  insiders-4.15.0 \u00b7  Experimental</p> <p>When improved tooltips are enabled, Material for MkDocs replaces the browser's rendering logic for <code>title</code> attribute with beautiful little tooltips. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- content.tooltips\n</code></pre> <p>Now, tooltips will be rendered for the following elements:</p> <ul> <li>Content \u2013 elements with a <code>title</code>, permalinks and code copy button</li> <li>Header \u2013 home button, header title, color palette switch and repository link</li> <li>Navigation \u2013 links that are shortened with ellipsis, i.e. <code>...</code></li> </ul>"},{"location":"reference/tooltips/#usage","title":"Usage","text":""},{"location":"reference/tooltips/#adding-tooltips","title":"Adding tooltips","text":"<p>The Markdown syntax allows to specify a <code>title</code> for each link, which will render as a beautiful tooltip when improved tooltips are enabled. Add a  tooltip to a link with the following lines:</p> Link with tooltip, inline syntax<pre><code>[Hover me](https://example.com \"I'm a tooltip!\")\n</code></pre> <p>Hover me</p> <p>Tooltips can also be added to link references:</p> Link with tooltip, reference syntax<pre><code>[Hover me][example]\n\n  [example]: https://example.com \"I'm a tooltip!\"\n</code></pre> <p>Hover me</p> <p>For all other elements, a <code>title</code> can be added by using the Attribute Lists extension:</p> Icon with tooltip<pre><code>:material-information-outline:{ title=\"Important information\" }\n</code></pre> <p></p>"},{"location":"reference/tooltips/#adding-abbreviations","title":"Adding abbreviations","text":"<p>Abbreviations can be defined by using a special syntax similar to URLs and  footnotes, starting with a <code>*</code> and immediately followed by the term or acronym to be associated in square brackets:</p> Text with abbreviations<pre><code>The HTML specification is maintained by the W3C.\n\n*[HTML]: Hyper Text Markup Language\n*[W3C]: World Wide Web Consortium\n</code></pre> <p>The HTML specification is maintained by the W3C.</p>"},{"location":"reference/tooltips/#adding-a-glossary","title":"Adding a glossary","text":"<p>The Snippets extension can be used to implement a simple glossary by moving all abbreviations in a dedicated file1, and auto-append this file to all pages with the following configuration:</p> <code>includes/abbreviations.md</code> <code>mkdocs.yml</code> <pre><code>*[HTML]: Hyper Text Markup Language\n*[W3C]: World Wide Web Consortium\n</code></pre> <pre><code>markdown_extensions:\n- pymdownx.snippets:\nauto_append:\n- includes/abbreviations.md\n</code></pre> <ol> <li> <p>It's highly recommended to put the Markdown file containing the abbreviations outside of the <code>docs</code> folder (here, a folder with the name  <code>includes</code> is used), as MkDocs might otherwise complain about an unreferenced file.\u00a0\u21a9</p> </li> </ol>"},{"location":"setup/","title":"Setup","text":"<p>Material for MkDocs offers a wide range of options for customizing your documentation. In this section, we will explain how you can create a meaningful structure for your site, change the look and feel, add a blog and comment system, and build a highly optimized site.</p>"},{"location":"setup/#site-structure","title":"Site structure","text":"<p>Set up and customize the structure of your documentation by configuring the header and footer to your taste, choosing among many modes of navigation, setting up site search, and more.</p> <ul> <li> Language \u2013 Choose out of the 60+ supported languages or add a new one</li> <li> Navigation \u2013 Create a clear, concise, and comprehensive navigation structure</li> <li> Header \u2013 Customize the behavior of the header, add an announcement bar</li> <li> Footer \u2013 Add links to your social media profiles or websites in the footer </li> <li> Search \u2013 Set up and configure search, running entirely in the user's browser</li> <li> Tags \u2013 Categorize your pages with tags and group related pages</li> </ul>"},{"location":"setup/#appearance","title":"Appearance","text":"<p>Match your brand's colors, fonts, icons, logo, and more with a few lines of configuration \u2013 Material for MkDocs makes it easy to extend the basic configuration or alter the appearance.</p> <ul> <li> Colors Change colors with an existing color palette or customize with CSS</li> <li> Fonts \u2013 Choose among 1,000 Google Fonts or load self-hosted fonts</li> <li> Logo &amp; Icons \u2013 Change the logo, use any of the 8,000+ icons, or add new ones</li> <li> Social Cards \u2013 Automatically create social media previews when sharing links</li> </ul>"},{"location":"setup/#content","title":"Content","text":"<p>Create a blog, integrate a comment system, connect a git repository, and set up versioned documentation that matches your project's versioning methodology.</p> <ul> <li> Blog \u2013 Set up a standalone blog or host it alongside your documentation</li> <li> Comment System \u2013 Add a third-party comment system on any page or footer</li> <li> Versioning \u2013 Deploy multiple versions by integrating with external utilities</li> <li> Repository \u2013 Connect your documentation to your git repository</li> </ul>"},{"location":"setup/#optimization","title":"Optimization","text":"<p>Add site analytics and build an optimized site by adding automatic image compression, complying with GDPR data privacy regulations, and making it offline-capable.</p> <ul> <li> Site analytics \u2013 Learn how your users experience your documentation</li> <li> Optimized site \u2013 Create optimized sites that rank great on search engines</li> <li> Data Privacy \u2013 Ensure compliance with data privacy regulations</li> <li> Offline usage \u2013 Build an online and offline-capable documentation</li> </ul>"},{"location":"setup/adding-a-comment-system/","title":"Adding a comment system","text":"<p>Material for MkDocs allows to easily add the third-party comment system of your choice to the footer of any page by using theme extension. As an example, we'll be integrating Giscus, which is Open Source, free, and uses GitHub discussions as a backend.</p>"},{"location":"setup/adding-a-comment-system/#customization","title":"Customization","text":""},{"location":"setup/adding-a-comment-system/#giscus-integration","title":"Giscus integration","text":"<p>Before you can use Giscus, you need to complete the following steps:</p> <ol> <li>Install the Giscus GitHub App and grant access to the repository     that should host comments as GitHub discussions. Note that this can be a     repository different from your documentation.</li> <li> <p>Visit Giscus and generate the snippet through their configuration tool     to load the comment system. Copy the snippet for the next step. The     resulting snippet should look similar to this:</p> <pre><code>&lt;script\nsrc=\"https://giscus.app/client.js\"\ndata-repo=\"&lt;username&gt;/&lt;repository&gt;\"\ndata-repo-id=\"...\"\ndata-category=\"...\"\ndata-category-id=\"...\"\ndata-mapping=\"pathname\"\ndata-reactions-enabled=\"1\"\ndata-emit-metadata=\"1\"\ndata-theme=\"light\"\ndata-lang=\"en\"\ncrossorigin=\"anonymous\"\nasync\n&gt;\n&lt;/script&gt;\n</code></pre> </li> </ol> <p>The <code>comments.html</code> partial (empty by default) is the best place to add the snippet generated by Giscus. Follow the guide on theme extension and override the <code>comments.html</code> partial with:</p> <pre><code>{% if page.meta.comments %}\n  &lt;h2 id=\"__comments\"&gt;{{ lang.t(\"meta.comments\") }}&lt;/h2&gt;\n&lt;!-- Insert generated snippet here --&gt;\n&lt;!-- Synchronize Giscus theme with palette --&gt;\n&lt;script&gt;\nvar giscus = document.querySelector(\"script[src*=giscus]\")\n/* Set palette on initial load */\nvar palette = __md_get(\"__palette\")\nif (palette &amp;&amp; typeof palette.color === \"object\") {\nvar theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\"\ngiscus.setAttribute(\"data-theme\", theme) // (1)!\n}\n/* Register event handlers after documented loaded */\ndocument.addEventListener(\"DOMContentLoaded\", function() {\nvar ref = document.querySelector(\"[data-md-component=palette]\")\nref.addEventListener(\"change\", function() {\nvar palette = __md_get(\"__palette\")\nif (palette &amp;&amp; typeof palette.color === \"object\") {\nvar theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\"\n/* Instruct Giscus to change theme */\nvar frame = document.querySelector(\".giscus-frame\")\nframe.contentWindow.postMessage(\n{ giscus: { setConfig: { theme } } },\n\"https://giscus.app\"\n)\n}\n})\n})\n&lt;/script&gt;\n{% endif %}\n</code></pre> <ol> <li>This code block ensures that Giscus renders with a dark theme when the     palette is set to <code>slate</code>. Note that multiple dark themes are available,     so you can change it to your liking.</li> </ol> <p>Replace the highlighted line with the snippet you generated with the Giscus configuration tool in the previous step. If you copied the snippet from above, you can enable comments on a page by setting the <code>comments</code> front matter property to <code>true</code>:</p> <pre><code>---\ncomments: true\n---\n# Document title\n...\n</code></pre> <p>If you wish to enable comments for an entire folder, you can use the built-in meta plugin.</p>"},{"location":"setup/adding-a-git-repository/","title":"Adding a git repository","text":"<p>If your documentation is related to source code, Material for MkDocs provides the ability to display information to the project's repository as part of the static site, including stars and forks. Furthermore, the date of last update and creation, as well as contributors can be shown.</p>"},{"location":"setup/adding-a-git-repository/#configuration","title":"Configuration","text":""},{"location":"setup/adding-a-git-repository/#repository","title":"Repository","text":"<p> 0.1.0 \u00b7  Default: none</p> <p>In order to display a link to the repository of your project as part of your documentation, set <code>repo_url</code> in <code>mkdocs.yml</code> to the public URL of your repository, e.g.:</p> <pre><code>repo_url: https://github.com/squidfunk/mkdocs-material\n</code></pre> <p>The link to the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for public repositories hosted on GitHub or GitLab, the number of stars and forks is automatically requested and rendered.</p> <p>GitHub repositories also include the tag of the latest release.1</p>"},{"location":"setup/adding-a-git-repository/#repository-name","title":"Repository name","text":"<p> 0.1.0 \u00b7  Default: automatically set to <code>GitHub</code>, <code>GitLab</code> or <code>Bitbucket</code></p> <p>MkDocs will infer the source provider by examining the URL and try to set the repository name automatically. If you wish to customize the name, set <code>repo_name</code> in <code>mkdocs.yml</code>:</p> <pre><code>repo_name: squidfunk/mkdocs-material\n</code></pre>"},{"location":"setup/adding-a-git-repository/#repository-icon","title":"Repository icon","text":"<p> 5.0.0 \u00b7  Default:  \u2013 <code>fontawesome/brands/git-alt</code></p> <p>While the default repository icon is a generic git icon, it can be set to any icon bundled with the theme by referencing a valid icon path in <code>mkdocs.yml</code>:</p> <pre><code>theme:\nicon:\nrepo: fontawesome/brands/git-alt # (1)!\n</code></pre> <ol> <li> <p>Enter a few keywords to find the perfect icon using our icon search and     click on the shortcode to copy it to your clipboard:</p> <p> <ol></ol> </p> </li> </ol> <p>Some popular choices:</p> <ul> <li> \u2013 <code>fontawesome/brands/git</code></li> <li> \u2013 <code>fontawesome/brands/git-alt</code></li> <li> \u2013 <code>fontawesome/brands/github</code></li> <li> \u2013 <code>fontawesome/brands/github-alt</code></li> <li> \u2013 <code>fontawesome/brands/gitlab</code></li> <li> \u2013 <code>fontawesome/brands/gitkraken</code></li> <li> \u2013 <code>fontawesome/brands/bitbucket</code></li> <li> \u2013 <code>fontawesome/solid/trash</code></li> </ul>"},{"location":"setup/adding-a-git-repository/#code-actions","title":"Code actions","text":"<p> 9.0.0 \u00b7  Feature flag</p> <p>If the repository URL points to a valid GitHub, GitLab or Bitbucket repository, MkDocs provides a setting called <code>edit_uri</code>, which resolves to the subfolder where your documentation is hosted.</p> <p>If your default branch is called <code>main</code>, change the setting to:</p> <pre><code>edit_uri: edit/main/docs/\n</code></pre> <p>After making sure that <code>edit_uri</code> is correctly configured, buttons for code actions can be added. Two types of code actions are supported: <code>edit</code> and <code>view</code> (GitHub only):</p>  Edit this page View source of this page <pre><code>theme:\nfeatures:\n- content.action.edit\n</code></pre> <pre><code>theme:\nfeatures:\n- content.action.view\n</code></pre> <p>The icon of the edit and view buttons can be changed with the following lines:</p> <pre><code>theme:\nicon:\nedit: material/pencil # (1)!\nview: material/eye\n</code></pre> <ol> <li> <p>Enter a few keywords to find the perfect icon using our icon search and     click on the shortcode to copy it to your clipboard:</p> <p> <ol></ol> </p> </li> </ol>"},{"location":"setup/adding-a-git-repository/#revisioning","title":"Revisioning","text":"<p>The following plugins are fully integrated with Material for MkDocs, allowing for showing the date of last update and creation of a document, as well as links to all contributors or authors involved.</p>"},{"location":"setup/adding-a-git-repository/#document-dates","title":"Document dates","text":"<p> 4.6.0 \u00b7  Plugin</p> <p>The git-revision-date-localized plugin adds support for adding the date of last update and creation of a document at the bottom of each page. Install it with <code>pip</code>:</p> <pre><code>pip install mkdocs-git-revision-date-localized-plugin\n</code></pre> <p>Then, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n- git-revision-date-localized:\nenable_creation_date: true\n</code></pre> <p>The following configuration options are supported:</p> <code>enabled</code> <p> Default: <code>true</code> \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable:</p> <pre><code>plugins:\n- git-revision-date-localized:\nenabled: !ENV [CI, false]\n</code></pre> <code>type</code> <p> Default: <code>date</code> \u2013 The format of the date to be displayed. Valid values are <code>date</code>, <code>datetime</code>, <code>iso_date</code>, <code>iso_datetime</code> and <code>timeago</code>:</p> <pre><code>plugins:\n- git-revision-date-localized:\ntype: date\n</code></pre> <code>enable_creation_date</code> <p> Default: <code>false</code> \u2013 Enables the display of the creation date of the file associated with the page next to the last updated date at the bottom of the page:</p> <pre><code>plugins:\n- git-revision-date-localized:\nenable_creation_date: true\n</code></pre> <code>fallback_to_build_date</code> <p> Default: <code>false</code> \u2013 Enables falling back to the time when <code>mkdocs build</code> was executed. Can be used as a fallback when the build is performed outside of a git repository:</p> <pre><code>plugins:\n- git-revision-date-localized:\nfallback_to_build_date: true\n</code></pre> <p>The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.</p>"},{"location":"setup/adding-a-git-repository/#document-contributors","title":"Document contributors","text":"<p> Sponsors only \u00b7  insiders-4.19.0 \u00b7  Plugin \u00b7  Experimental</p> <p>The git-committers2 plugin renders the GitHub avatars of all contributors, linking to their GitHub profiles at the bottom of each page. As always, it can be installed with <code>pip</code>:</p> <pre><code>pip install mkdocs-git-committers-plugin-2\n</code></pre> <p>Then, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n- git-committers:\nrepository: squidfunk/mkdocs-material\nbranch: main\n</code></pre> <p>The following configuration options are supported:</p> <code>enabled</code> <p> Default: <code>true</code> \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable:</p> <pre><code>plugins:\n- git-committers:\nenabled: !ENV [CI, false]\n</code></pre> <code>repository</code> <p> Default: none \u00b7  Required \u2013 This property must be set to the slug of the repository that contains your documentation. The slug must follow the pattern <code>&lt;username&gt;/&lt;repository&gt;</code>:</p> <pre><code>plugins:\n- git-committers:\nrepository: squidfunk/mkdocs-material\n</code></pre> <code>branch</code> <p> Default: <code>master</code> \u2013 This property should be set to the branch of the repository from which to retrieve the contributors. To use the <code>main</code> branch:</p> <pre><code>plugins:\n- git-committers:\nbranch: main\n</code></pre> <p>The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.</p>"},{"location":"setup/adding-a-git-repository/#document-authors","title":"Document authors","text":"<p> Sponsors only \u00b7  insiders-4.19.0 \u00b7  Plugin \u00b7  Experimental</p> <p>The git-authors plugin extracts the authors of a document from git to display them at the bottom of each page. It's a lightweight alternative to the git-committers plugin. Install it with <code>pip</code>:</p> <pre><code>pip install mkdocs-git-authors-plugin\n</code></pre> <p>Then, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n- git-authors\n</code></pre> <ol> <li> <p>Unfortunately, GitHub only provides an API endpoint to obtain the latest release - not the latest tag. Thus, make sure to create a release (not  pre-release) for the latest tag you want to display next to the number of stars and forks.\u00a0\u21a9</p> </li> <li> <p>We currently recommend using a fork of the git-committers plugin, as it contains many improvements that have not yet been merged back into the original plugin. See byrnereese/mkdocs-git-committers-plugin#12 for more information.\u00a0\u21a9</p> </li> </ol>"},{"location":"setup/building-an-optimized-site/","title":"Building an optimized site","text":"<p>Material for MkDocs, by default, allows to build optimized sites that rank great on search engines, load fast (even on slow networks), and work perfectly without JavaScript. Additionally, the built-in optimize plugin adds support for further useful automatic optimization techniques.</p>"},{"location":"setup/building-an-optimized-site/#configuration","title":"Configuration","text":""},{"location":"setup/building-an-optimized-site/#built-in-optimize-plugin","title":"Built-in optimize plugin","text":"<p> Sponsors only \u00b7  insiders-4.29.0 \u00b7  Plugin \u00b7  Experimental</p> <p>The built-in optimize plugin automatically identifies and optimizes all media files as part of the build using compression and conversion techniques. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n- optimize # (1)!\n</code></pre> <ol> <li>Please ensure that all dependencies for image processing are installed,     or the plugin will not work properly.</li> </ol> <p>If you need to be able to build your documentation with and without Insiders, please refer to the built-in plugins section to learn how shared configurations help to achieve this.</p> <p>The following configuration options are available:</p> <code>enabled</code> <p> Default: <code>true</code> \u2013 This option specifies whether the plugin is enabled when building your project. If you want to speed up local builds, you can use an environment variable:</p> <pre><code>plugins:\n- optimize:\nenabled: !ENV [CI, false]\n</code></pre> <code>concurrency</code> <p> Default: number of CPUs \u2013 This option specifies how many CPUs the plugin is allowed to use when optimizing media files. With more CPUs, the plugin can do more work in the same time, thus complete optimization faster. Concurrent processing can be disabled with:</p> <pre><code>plugins:\n- optimize:\nconcurrency: 1\n</code></pre>"},{"location":"setup/building-an-optimized-site/#optimization","title":"Optimization","text":"<p>Technical documentation often includes screenshots or diagrams, both of which are prime candidates for compression. The built-in optimize plugin allows to automatically compress images using pngquant (for PNGs), and Pillow (for JPGs).</p> <p>The following configuration options are available for optimization:</p> <code>optimize_png</code> <p> Default: <code>true</code> \u2013 This option specifies whether the plugin should optimize PNG files using pngquant, which must be installed on the system. PNG optimization can be disabled with:</p> <pre><code>plugins:\n- optimize:\noptimize_png: false\n</code></pre> <code>optimize_png_speed</code> <p> Default: <code>4</code> of <code>[1,10]</code> \u2013 This option specifies the speed/quality tradeoff that pngquant applies when compressing. The lower the number, the more time will be spent optimizing:</p> Slower smallFaster rough <pre><code>plugins:\n- optimize:\noptimize_png_speed: 1\n</code></pre> <pre><code>plugins:\n- optimize:\noptimize_png_speed: 10\n</code></pre> <p>A factor of <code>10</code> has 5% lower quality, but is 8x faster than the default <code>4</code>.</p> <code>optimize_png_strip</code> <p> Default: <code>true</code> \u2013 This option specifies whether pngquant should remove all non-optional metadata that is not necessary for rendering images in a browser:</p> <pre><code>plugins:\n- optimize:\noptimize_png_strip: false\n</code></pre> <code>optimize_jpg</code> <p> Default: <code>true</code> \u2013 This option specifies whether the plugin should optimize JPG files using Pillow, a Python image processing library. JPG optimization can be disabled with:</p> <pre><code>plugins:\n- optimize:\noptimize_jpg: false\n</code></pre> <code>optimize_jpg_quality</code> <p> Default: <code>60</code> of <code>[0,100]</code> \u2013 This option specifies the image quality that Pillow uses when compressing. If the images look blurry, it's a good idea to tune and change this setting:</p> <pre><code>plugins:\n- optimize:\noptimize_jpg_quality: 75\n</code></pre> <code>optimize_jpg_progressive</code> <p> Default: <code>true</code> \u2013 This option specifies whether Pillow should use progressive encoding (faster rendering) when compressing JPGs. Progressive encoding can be disabled with:</p> <pre><code>plugins:\n- optimize:\noptimize_jpg_progressive: false\n</code></pre>"},{"location":"setup/building-an-optimized-site/#caching","title":"Caching","text":"<p>The built-in optimize plugin implements an intelligent caching mechanism, ensuring that media files are only pushed through the optimization pipeline when their contents change. If you swap out or update an image, the plugin will detect it and update the optimized version.</p> <p>The following configuration options are available for caching:</p> <code>cache</code> <p> Default: <code>true</code> \u2013 This option specifies whether the plugin queries its cache for an existing artifact before starting an optimization job. It's normally not necessary to change this setting, except for when debugging the plugin itself. Caching can be disabled with:</p> <pre><code>plugins:\n- optimize:\ncache: false\n</code></pre> <code>cache_dir</code> <p> Default: <code>.cache/plugins/optimize</code> \u2013 This option specifies the file system location of the plugin's cache. It's normally not necessary to change this setting, except for when debugging the plugin itself. The cache directory can be changed with:</p> <pre><code>plugins:\n- optimize:\ncache_dir: .cache/plugins/optimize\n</code></pre> <p>By default, all built-in plugins that implement caching will create a <code>.cache</code> directory in the same folder your <code>mkdocs.yml</code> resides, and create subfolders to not interfere with each other. If you use multiple instances of this plugin, it could be necessary to change this setting.</p>"},{"location":"setup/building-for-offline-usage/","title":"Building for offline usage","text":"<p>If you want to ship your documentation together with your product, MkDocs has you covered \u2013 with support from themes, MkDocs allows for building offline-capable documentation. Notably, Material for MkDocs offers offline support for many of its features.</p>"},{"location":"setup/building-for-offline-usage/#configuration","title":"Configuration","text":""},{"location":"setup/building-for-offline-usage/#built-in-offline-plugin","title":"Built-in offline plugin","text":"<p> 9.0.0 \u00b7  Plugin</p> <p>The built-in offline plugin makes sure that the site search works when you distribute the contents of your site directory as a download. Simply add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n- offline\n</code></pre> <p>The plugin will automatically disable the <code>use_directory_urls</code> setting, ensuring that users can open your documentation directly from the local file system.</p> <p>The following configuration options are available:</p> <code>enabled</code> <p> Default: <code>true</code> \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable:</p> <pre><code>plugins:\n- offline:\nenabled: !ENV [OFFLINE, false]\n</code></pre> <p>Now, after invoking <code>mkdocs build</code>, you can open <code>site/index.html</code> directly in your browser and the site search will work as if the documentation was hosted on a regular server.</p> <p>Automatically bundle all external assets</p> <p>The built-in privacy plugin makes it easy to use external assets while building documentation for offline usage, as it will automatically download all external assets to distribute them with your documentation.</p>"},{"location":"setup/building-for-offline-usage/#limitations","title":"Limitations","text":"<p>Material for MkDocs offers many interactive features, some of which will not work from the file system due to the restrictions of modern browsers: all features that use the <code>fetch</code> API will error.</p> <p>Thus, when building for offline usage, make sure to disable the following configuration settings: instant loading, site analytics, git repository, versioning and comment systems.</p>"},{"location":"setup/changing-the-colors/","title":"Changing the colors","text":"<p>As any proper Material Design implementation, Material for MkDocs supports Google's original color palette, which can be easily configured through  <code>mkdocs.yml</code>. Furthermore, colors can be customized with a few lines of CSS to fit your brand's identity by using CSS variables.</p>"},{"location":"setup/changing-the-colors/#configuration","title":"Configuration","text":""},{"location":"setup/changing-the-colors/#color-palette","title":"Color palette","text":""},{"location":"setup/changing-the-colors/#color-scheme","title":"Color scheme","text":"<p> 5.2.0 \u00b7  Default: <code>default</code></p> <p>Material for MkDocs supports two color schemes: a light mode, which is just called <code>default</code>, and a dark mode, which is called <code>slate</code>. The color scheme can be set via <code>mkdocs.yml</code>:</p> <pre><code>theme:\npalette:\nscheme: default\n</code></pre> <p>Click on a tile to change the color scheme:</p> <code>default</code> <code>slate</code>"},{"location":"setup/changing-the-colors/#primary-color","title":"Primary color","text":"<p> 0.2.0 \u00b7  Default: <code>indigo</code></p> <p>The primary color is used for the header, the sidebar, text links and several other components. In order to change the primary color, set the following value in <code>mkdocs.yml</code> to a valid color name:</p> <pre><code>theme:\npalette:\nprimary: indigo\n</code></pre> <p>Click on a tile to change the primary color:</p> <code>red</code> <code>pink</code> <code>purple</code> <code>deep purple</code> <code>indigo</code> <code>blue</code> <code>light blue</code> <code>cyan</code> <code>teal</code> <code>green</code> <code>light green</code> <code>lime</code> <code>yellow</code> <code>amber</code> <code>orange</code> <code>deep orange</code> <code>brown</code> <code>grey</code> <code>blue grey</code> <code>black</code> <code>white</code> <p>See our guide below to learn how to set custom colors.</p>"},{"location":"setup/changing-the-colors/#accent-color","title":"Accent color","text":"<p> 0.2.0 \u00b7  Default: <code>indigo</code></p> <p>The accent color is used to denote elements that can be interacted with, e.g. hovered links, buttons and scrollbars. It can be changed in <code>mkdocs.yml</code> by choosing a valid color name:</p> <pre><code>theme:\npalette:\naccent: indigo\n</code></pre> <p>Click on a tile to change the accent color:</p> <code>red</code> <code>pink</code> <code>purple</code> <code>deep purple</code> <code>indigo</code> <code>blue</code> <code>light blue</code> <code>cyan</code> <code>teal</code> <code>green</code> <code>light green</code> <code>lime</code> <code>yellow</code> <code>amber</code> <code>orange</code> <code>deep orange</code> <p>See our guide below to learn how to set custom colors.</p>"},{"location":"setup/changing-the-colors/#color-palette-toggle","title":"Color palette toggle","text":"<p> 7.1.0 \u00b7  Default: none</p> <p>Offering a light and dark color palette makes your documentation pleasant to read at different times of the day, so the user can choose accordingly. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\npalette: # (1)!\n# Palette toggle for light mode\n- scheme: default\ntoggle:\nicon: material/brightness-7 # (2)!\nname: Switch to dark mode\n# Palette toggle for dark mode\n- scheme: slate\ntoggle:\nicon: material/brightness-4\nname: Switch to light mode\n</code></pre> <ol> <li> <p>Note that the <code>theme.palette</code> setting is now defined as a list.</p> </li> <li> <p>Enter a few keywords to find the perfect icon using our icon search and     click on the shortcode to copy it to your clipboard:</p> <p> <ol></ol> </p> </li> </ol> <p>This configuration will render a color palette toggle next to the search bar. Note that you can also define separate settings for <code>primary</code> and <code>accent</code> per color palette.</p> <p>The following properties must be set for each toggle:</p> <code>icon</code> <p> Default: none \u00b7  Required \u2013 This property must point to a valid icon path referencing any icon bundled with the theme, or the build will not succeed. Some popular combinations:</p> <ul> <li> +  \u2013 <code>material/brightness-7</code> + <code>material/brightness-4</code></li> <li> +  \u2013 <code>material/toggle-switch</code> + <code>material/toggle-switch-off-outline</code></li> <li> +  \u2013 <code>material/weather-night</code> + <code>material/weather-sunny</code></li> <li> +  \u2013 <code>material/eye</code> + <code>material/eye-outline</code></li> <li> +  \u2013 <code>material/lightbulb</code> + <code>material/lightbulb-outline</code></li> </ul> <code>name</code> <p> Default: none \u00b7  Required \u2013 This property is used as the toggle's <code>title</code> attribute and should be set to a discernable name to improve accessibility. It's rendered as a tooltip.</p>"},{"location":"setup/changing-the-colors/#system-preference","title":"System preference","text":"<p> 7.1.0 \u00b7  Default: none</p> <p>Each color palette can be linked to the user's system preference for light and dark appearance by using a media query. Simply add a <code>media</code> property next to the <code>scheme</code> definition in <code>mkdocs.yml</code>:</p> <pre><code>theme:\npalette:\n# Palette toggle for light mode\n- media: \"(prefers-color-scheme: light)\"\nscheme: default\ntoggle:\nicon: material/brightness-7\nname: Switch to dark mode\n# Palette toggle for dark mode\n- media: \"(prefers-color-scheme: dark)\"\nscheme: slate\ntoggle:\nicon: material/brightness-4\nname: Switch to light mode\n</code></pre> <p>When the user first visits your site, the media queries are evaluated in the order of their definition. The first media query that matches selects the default color palette.</p>"},{"location":"setup/changing-the-colors/#automatic-light-dark-mode","title":"Automatic light / dark mode","text":"<p> Sponsors only \u00b7  insiders-4.18.0 \u00b7  Experimental</p> <p>Newer operating system allow to automatically switch between light and dark appearance during day and night times. Insiders adds support for automatic light / dark mode, delegating color palette selection to the user's operating system. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\npalette:\n# Palette toggle for automatic mode\n- media: \"(prefers-color-scheme)\"\ntoggle:\nicon: material/brightness-auto\nname: Switch to light mode\n# Palette toggle for light mode\n- media: \"(prefers-color-scheme: light)\"\nscheme: default # (1)!\ntoggle:\nicon: material/brightness-7\nname: Switch to dark mode\n# Palette toggle for dark mode\n- media: \"(prefers-color-scheme: dark)\"\nscheme: slate\ntoggle:\nicon: material/brightness-4\nname: Switch to system preference\n</code></pre> <ol> <li>You can also define separate settings for <code>primary</code> and     <code>accent</code> per color palette, i.e. different colors for     light and dark mode.</li> </ol> <p>Material for MkDocs will now change the color palette each time the operating system switches between light and dark appearance, even when the user doesn't reload the site.</p>"},{"location":"setup/changing-the-colors/#customization","title":"Customization","text":""},{"location":"setup/changing-the-colors/#custom-colors","title":"Custom colors","text":"<p>Material for MkDocs implements colors using CSS variables (custom properties). If you want to customize the colors beyond the palette (e.g. to use your brand-specific colors), you can add an additional style sheet and tweak the values of the CSS variables.</p> <p>First, set the <code>primary</code> or <code>accent</code> values in <code>mkdocs.yml</code> to <code>custom</code>, to signal to the theme that you want to define custom colors, e.g., when you want to override the <code>primary</code> color:</p> <pre><code>theme:\npalette:\nprimary: custom\n</code></pre> <p>Let's say you're  YouTube, and want to set the primary color to your brand's palette. Just add:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>:root {\n--md-primary-fg-color:        #EE0F0F;\n--md-primary-fg-color--light: #ECB7B7;\n--md-primary-fg-color--dark:  #90030C;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre> <p>See the file containing the color definitions for a list of all CSS variables.</p>"},{"location":"setup/changing-the-colors/#custom-color-schemes","title":"Custom color schemes","text":"<p>Besides overriding specific colors, you can create your own, named color scheme by wrapping the definitions in a <code>[data-md-color-scheme=\"...\"]</code> attribute selector, which you can then set via <code>mkdocs.yml</code> as described in the color schemes section:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>[data-md-color-scheme=\"youtube\"] {\n--md-primary-fg-color:        #EE0F0F;\n--md-primary-fg-color--light: #ECB7B7;\n--md-primary-fg-color--dark:  #90030C;\n}\n</code></pre> <pre><code>theme:\npalette:\nscheme: youtube\nextra_css:\n- stylesheets/extra.css\n</code></pre> <p>Additionally, the <code>slate</code> color scheme defines all of it's colors via <code>hsla</code> color functions and deduces its colors from the <code>--md-hue</code> CSS variable. You can tune the <code>slate</code> theme with:</p> <pre><code>[data-md-color-scheme=\"slate\"] {\n--md-hue: 210; /* (1)! */\n}\n</code></pre> <ol> <li>The <code>hue</code> value must be in the range of <code>[0, 360]</code></li> </ol>"},{"location":"setup/changing-the-fonts/","title":"Changing the fonts","text":"<p>Material for MkDocs makes it easy to change the typeface of your project documentation, as it directly integrates with Google Fonts. Alternatively, fonts can be custom-loaded if self-hosting is preferred for data privacy reasons or another destination should be used.</p>"},{"location":"setup/changing-the-fonts/#configuration","title":"Configuration","text":""},{"location":"setup/changing-the-fonts/#regular-font","title":"Regular font","text":"<p> 0.1.2 \u00b7  Default: <code>Roboto</code></p> <p>The regular font is used for all body copy, headlines, and essentially everything that does not need to be monospaced. It can be set to any valid Google Font via <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfont:\ntext: Roboto\n</code></pre> <p>The typeface will be loaded in 300, 400, 400i and 700.</p>"},{"location":"setup/changing-the-fonts/#monospaced-font","title":"Monospaced font","text":"<p> 0.1.2 \u00b7  Default: <code>Roboto Mono</code></p> <p>The monospaced font is used for code blocks and can be configured separately. Just like the regular font, it can be set to any valid Google Font via <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfont:\ncode: Roboto Mono\n</code></pre> <p>The typeface will be loaded in 400.</p>"},{"location":"setup/changing-the-fonts/#autoloading","title":"Autoloading","text":"<p> 1.0.0 \u00b7  Default: none</p> <p>If you want to prevent typefaces from being loaded from Google Fonts, e.g. to adhere to data privacy regulations, and fall back to system fonts, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfont: false\n</code></pre> <p>Automatically bundle Google Fonts</p> <p>The built-in privacy plugin makes it easy to use Google Fonts while complying with the General Data Protection Regulation (GDPR), by automatically downloading and self-hosting the web font files.</p>"},{"location":"setup/changing-the-fonts/#customization","title":"Customization","text":""},{"location":"setup/changing-the-fonts/#additional-fonts","title":"Additional fonts","text":"<p>If you want to load an (additional) font from another destination or override the system font, you can use an additional style sheet to add the corresponding <code>@font-face</code> definition:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>@font-face {\nfont-family: \"&lt;font&gt;\";\nsrc: \"...\";\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre> <p>The font can then be applied to specific elements, e.g. only headlines, or  globally to be used as the site-wide regular or monospaced font:</p> Regular fontMonospaced font <pre><code>:root {\n--md-text-font: \"&lt;font&gt;\"; /* (1)! */\n}\n</code></pre> <ol> <li>Always define fonts through CSS variables and not <code>font-family</code>, as     this would disable the system font fallback.</li> </ol> <pre><code>:root {\n--md-code-font: \"&lt;font&gt;\";\n}\n</code></pre>"},{"location":"setup/changing-the-language/","title":"Changing the language","text":"<p>Material for MkDocs supports internationalization (i18n) and provides translations for template variables and labels in 60+ languages. Additionally, the site search can be configured to use a language-specific stemmer, if available.</p>"},{"location":"setup/changing-the-language/#configuration","title":"Configuration","text":""},{"location":"setup/changing-the-language/#site-language","title":"Site language","text":"<p> 1.12.0 \u00b7  Default: <code>en</code></p> <p>You can set the site language in <code>mkdocs.yml</code> with:</p> <pre><code>theme:\nlanguage: en # (1)!\n</code></pre> <ol> <li> <p>HTML5 only allows to set a single language per document, which is why     Material for MkDocs only supports setting a canonical language for the     entire project, i.e. one per <code>mkdocs.yml</code>.</p> <p>The easiest way to build a multi-language documentation is to create one project in a subfolder per language, and then use the language selector to interlink those projects.</p> </li> </ol> <p>The following languages are supported:</p> <ol> <li> Afrikaans <code>af</code>  32 translations missing  </li> <li> Arabic <code>ar</code> Complete </li> <li> Armenian <code>hy</code> Complete </li> <li> Bahasa Malaysia <code>ms</code>  21 translations missing  </li> <li> Bengali (Bangla) <code>bn</code> Complete </li> <li> Bulgarian <code>bg</code> Complete </li> <li> Burmese <code>my</code>  27 translations missing  </li> <li> Catalan <code>ca</code> Complete </li> <li> Chinese (Simplified) <code>zh</code> Complete </li> <li> Chinese (Taiwanese) <code>zh-TW</code> Complete </li> <li> Chinese (Traditional) <code>zh-Hant</code> Complete </li> <li> Croatian <code>hr</code> Complete </li> <li> Czech <code>cs</code> Complete </li> <li> Danish <code>da</code>  32 translations missing  </li> <li> Dutch <code>nl</code> Complete </li> <li> English <code>en</code> Complete </li> <li> Esperanto <code>eo</code>  27 translations missing  </li> <li> Estonian <code>et</code>  32 translations missing  </li> <li> Finnish <code>fi</code>  32 translations missing  </li> <li> French <code>fr</code> Complete </li> <li> Galician <code>gl</code>  20 translations missing  </li> <li> Georgian <code>ka</code>  27 translations missing  </li> <li> German <code>de</code> Complete </li> <li> Greek <code>el</code>  1 translations missing  </li> <li> Hebrew <code>he</code> Complete </li> <li> Hindi <code>hi</code> Complete </li> <li> Hungarian <code>hu</code> Complete </li> <li> Icelandic <code>is</code> Complete </li> <li> Indonesian <code>id</code>  1 translations missing  </li> <li> Italian <code>it</code> Complete </li> <li> Japanese <code>ja</code> Complete </li> <li> Kannada <code>kn</code> Complete </li> <li> Korean <code>ko</code> Complete </li> <li> Kurdish (Soran\u00ee) <code>ku-IQ</code>  13 translations missing  </li> <li> Latvian <code>lv</code>  20 translations missing  </li> <li> Lithuanian <code>lt</code> Complete </li> <li> Macedonian <code>mk</code>  20 translations missing  </li> <li> Mongolian <code>mn</code>  25 translations missing  </li> <li> Norwegian Bokm\u00e5l <code>nb</code> Complete </li> <li> Norwegian Nynorsk <code>nn</code>  14 translations missing  </li> <li> Persian (Farsi) <code>fa</code> Complete </li> <li> Polish <code>pl</code> Complete </li> <li> Portuguese <code>pt</code> Complete </li> <li> Portuguese (Brasilian) <code>pt-BR</code> Complete </li> <li> Romanian <code>ro</code> Complete </li> <li> Russian <code>ru</code> Complete </li> <li> Sanskrit <code>sa</code> Complete </li> <li> Serbian <code>sr</code>  18 translations missing  </li> <li> Serbo-Croatian <code>sh</code>  18 translations missing  </li> <li> Sinhalese <code>si</code>  25 translations missing  </li> <li> Slovak <code>sk</code>  32 translations missing  </li> <li> Slovenian <code>sl</code>  14 translations missing  </li> <li> Spanish <code>es</code> Complete </li> <li> Swedish <code>sv</code> Complete </li> <li> Tagalog <code>tl</code>  18 translations missing  </li> <li> Telugu <code>te</code> Complete </li> <li> Thai <code>th</code> Complete </li> <li> Turkish <code>tr</code> Complete </li> <li> Ukrainian <code>uk</code> Complete </li> <li> Urdu <code>ur</code> Complete </li> <li> Uzbek <code>uz</code> Complete </li> <li> Vietnamese <code>vi</code> Complete </li> </ol> <p>Note that some languages will produce unreadable anchor links due to the way the default slug function works. Consider using a Unicode-aware slug function.</p> <p>Translations missing? Help us out, it takes only 5 minutes</p> <p>Material for MkDocs relies on outside contributions for adding and updating translations for the almost 60 languages it supports. If your language shows that some translations are missing, click on the link to add them. If your language is not in the list, click here to add a new language.</p>"},{"location":"setup/changing-the-language/#site-language-selector","title":"Site language selector","text":"<p> 7.0.0 \u00b7  Default: none</p> <p>If your documentation is available in multiple languages, a language selector pointing to those languages can be added to the header. Alternate languages can be defined via <code>mkdocs.yml</code>.</p> <pre><code>extra:\nalternate:\n- name: English\nlink: /en/ # (1)!\nlang: en\n- name: Deutsch\nlink: /de/\nlang: de\n</code></pre> <ol> <li>Note that this must be an absolute link. If it includes a domain part, it's     used as defined. Otherwise the domain part of the <code>site_url</code> as     set in <code>mkdocs.yml</code> is prepended to the link.</li> </ol> <p>The following properties are available for each alternate language:</p> <code>name</code> <p> Default: none \u00b7  Required \u2013 This value of this property is used inside the language selector as the name of the language and must be set to a non-empty string.</p> <code>link</code> <p> Default: none \u00b7  Required \u2013 This property must be set to an absolute link, which might also point to another domain or subdomain not necessarily generated with MkDocs.</p> <code>lang</code> <p> Default: none \u00b7  Required \u2013 This property must contain an ISO 639-1 language code and is used for the <code>hreflang</code> attribute of the link, improving discoverability via search engines.</p> <p></p>"},{"location":"setup/changing-the-language/#directionality","title":"Directionality","text":"<p> 2.5.0 \u00b7  Default: automatically set</p> <p>While many languages are read <code>ltr</code> (left-to-right), Material for MkDocs also supports <code>rtl</code> (right-to-left) directionality which is deduced from the selected language, but can also be set with:</p> <pre><code>theme:\ndirection: ltr\n</code></pre> <p>Click on a tile to change the directionality:</p> <code>ltr</code> <code>rtl</code>"},{"location":"setup/changing-the-language/#customization","title":"Customization","text":""},{"location":"setup/changing-the-language/#custom-translations","title":"Custom translations","text":"<p>If you want to customize some of the translations for a language, just follow the guide on theme extension and create a new partial in the <code>overrides</code> folder. Then, import the translations of the language as a fallback and only adjust the ones you want to override:</p> <code>overrides/partials/languages/custom.html</code> <code>mkdocs.yml</code> <pre><code>&lt;!-- Import translations for language and fallback --&gt;\n{% import \"partials/languages/de.html\" as language %}\n{% import \"partials/languages/en.html\" as fallback %} &lt;!-- (1)! --&gt;\n&lt;!-- Define custom translations --&gt;\n{% macro override(key) %}{{ {\n  \"source.file.date.created\": \"Erstellt am\", &lt;!-- (2)! --&gt;\n  \"source.file.date.updated\": \"Aktualisiert am\"\n}[key] }}{% endmacro %}\n\n&lt;!-- Re-export translations --&gt;\n{% macro t(key) %}{{\n  override(key) or language.t(key) or fallback.t(key)\n}}{% endmacro %}\n</code></pre> <ol> <li> <p>Note that <code>en</code> must always be used as a fallback language, as it's the     default theme language.</p> </li> <li> <p>Check the list of available languages, pick the translation you want     to override for your language and add them here.</p> </li> </ol> <pre><code>theme:\nlanguage: custom\n</code></pre>"},{"location":"setup/changing-the-logo-and-icons/","title":"Changing the logo and icons","text":"<p>When installing Material for MkDocs, you immediately get access to over 8,000  icons ready to be used for customization of specific parts of the theme and/or  when writing your documentation in Markdown. Not enough? You can also add additional icons with minimal effort.</p>"},{"location":"setup/changing-the-logo-and-icons/#configuration","title":"Configuration","text":""},{"location":"setup/changing-the-logo-and-icons/#logo","title":"Logo","text":"<p> 0.1.0 \u00b7  Default:  \u2013 <code>material/library</code></p> <p>The logo can be changed to a user-provided image (any type, incl. <code>*.png</code> and <code>*.svg</code>) located in the <code>docs</code> folder, or to any icon bundled with the theme. Add the following lines to <code>mkdocs.yml</code>:</p>  Image Icon, bundled <pre><code>theme:\nlogo: assets/logo.png\n</code></pre> <pre><code>theme:\nicon:\nlogo: material/library # (1)!\n</code></pre> <ol> <li> <p>Enter a few keywords to find the perfect icon using our icon search and     click on the shortcode to copy it to your clipboard:</p> <p> <ol></ol> </p> </li> </ol> <p>Normally, the logo in the header and sidebar links to the homepage of the documentation, which is the same as <code>site_url</code>. This behavior can be changed with the following configuration:</p> <pre><code>extra:\nhomepage: https://example.com\n</code></pre>"},{"location":"setup/changing-the-logo-and-icons/#favicon","title":"Favicon","text":"<p> 0.1.0 \u00b7  Default: <code>assets/images/favicon.png</code></p> <p>The favicon can be changed to a path pointing to a user-provided image, which  must be located in the <code>docs</code> folder. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfavicon: images/favicon.png\n</code></pre>"},{"location":"setup/changing-the-logo-and-icons/#customization","title":"Customization","text":""},{"location":"setup/changing-the-logo-and-icons/#additional-icons","title":"Additional icons","text":"<p>In order to use custom icons, extend the theme and create a new folder named <code>.icons</code> in the <code>custom_dir</code> you want to use for overrides. Next, add your <code>*.svg</code> icons into a subfolder of the <code>.icons</code> folder. Let's say you downloaded and unpacked the Bootstrap icon set, and want to add it to your project documentation. The structure of your project should look like this:</p> <pre><code>.\n\u251c\u2500 overrides/\n\u2502  \u2514\u2500 .icons/\n\u2502     \u2514\u2500 bootstrap/\n\u2502        \u2514\u2500 *.svg\n\u2514\u2500 mkdocs.yml\n</code></pre> <p>Then, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- pymdownx.emoji:\nemoji_index: !!python/name:materialx.emoji.twemoji\nemoji_generator: !!python/name:materialx.emoji.to_svg\noptions:\ncustom_icons:\n- overrides/.icons\n</code></pre> <p>You can now use all  Bootstrap icons anywhere in Markdown files, as well as everywhere icons can be used in <code>mkdocs.yml</code>. However, note that the syntaxes are slightly different:</p> <ul> <li> <p>Using icons in configuration: take the path of the <code>*.svg</code> icon file   starting at the <code>.icons</code> folder and drop the file extension, e.g. for   <code>.icons/bootstrap/envelope-paper.svg</code>, use:</p> <pre><code>theme:\nicon:\nlogo: bootstrap/envelope-paper\n</code></pre> </li> <li> <p>Using icons in Markdown files: additionally to taking the path from the   <code>.icons</code> folder as noted above, replace all <code>/</code> with <code>-</code> and enclose the icon   shortcode in two colons:</p> <pre><code>:bootstrap-envelope-paper:\n</code></pre> </li> </ul> <p>For further notes on icon usage, please consult the icon reference.</p>"},{"location":"setup/ensuring-data-privacy/","title":"Ensuring data privacy","text":"<p>Material for MkDocs makes compliance with data privacy regulations very easy,  as it offers a native cookie consent solution to seek explicit consent from users before setting up analytics. Additionally, external assets can be automatically downloaded for self-hosting.</p>"},{"location":"setup/ensuring-data-privacy/#configuration","title":"Configuration","text":""},{"location":"setup/ensuring-data-privacy/#cookie-consent","title":"Cookie consent","text":"<p> 8.4.0 \u00b7  Default: none \u00b7  Experimental</p> <p>Material for MkDocs ships a native and extensible cookie consent form which asks the user for consent prior to sending requests to third parties. Add the following to <code>mkdocs.yml</code>:</p> <pre><code>extra:\nconsent:\ntitle: Cookie consent\ndescription: &gt;- # (1)!\nWe use cookies to recognize your repeated visits and preferences, as well\nas to measure the effectiveness of our documentation and whether users\nfind what they're searching for. With your consent, you're helping us to\nmake our documentation better.\n</code></pre> <ol> <li>You can add arbitrary HTML tags in the <code>description</code>, e.g. to link to your     terms of service or other parts of the site.</li> </ol> <p>The following properties are available:</p> <code>title</code> <p> Default: none \u00b7  Required \u2013 This property sets the title of the cookie consent, which is rendered at the  top of the form and must be set to a non-empty string.</p> <code>description</code> <p> Default: none \u00b7  Required \u2013 This property sets the description of the cookie consent, is rendered below the title, and may include raw HTML (e.g. a links to the terms of service).</p> <code>cookies</code> <p> Default: none \u2013 This property allows to add custom  cookies or change the initial <code>checked</code> state and name of built-in cookies. Currently, the following cookies are built-in:</p> <ul> <li>Google Analytics \u2013 <code>analytics</code> (enabled by default)</li> <li>GitHub \u2013 <code>github</code> (enabled by default)</li> </ul> <p>Each cookie must receive a unique identifier which is used as a key in the <code>cookies</code> map, and can be either set to a string, or to a map defining <code>name</code> and <code>checked</code> state:</p> Custom cookie nameCustom initial stateCustom cookie <pre><code>extra:\nconsent:\ncookies:\nanalytics: Custom name\n</code></pre> <pre><code>extra:\nconsent:\ncookies:\nanalytics:\nname: Google Analytics\nchecked: false\n</code></pre> <pre><code>extra:\nconsent:\ncookies:\nanalytics: Google Analytics # (1)!\ncustom: Custom cookie\n</code></pre> <ol> <li>If you define a custom cookie as part of the <code>cookies</code> property,     the <code>analytics</code> cookie must be added back explicitly, or analytics     won't be triggered.</li> </ol> <p>If Google Analytics was configured via <code>mkdocs.yml</code>, the cookie consent will automatically include a setting for the user to disable it. Custom cookies can be used from JavaScript.</p> <code>actions</code> <p> Default: <code>[accept, manage]</code> \u2013 This property defines which buttons are shown and in which order, e.g. to allow the user to accept  cookies and manage settings:</p> <pre><code>extra:\nconsent:\nactions:\n- accept\n- manage # (1)!\n</code></pre> <ol> <li>If the <code>manage</code> settings button is omitted from the <code>actions</code> property,     the settings are always shown.</li> </ol> <p>The cookie consent form includes three types of buttons:</p> <ul> <li><code>accept</code> \u2013 Button to accept selected cookies</li> <li><code>reject</code> \u2013 Button to reject all cookies</li> <li><code>manage</code> \u2013 Button to manage settings</li> </ul> <p>When a user first visits your site, a cookie consent form is rendered:</p> <p></p>"},{"location":"setup/ensuring-data-privacy/#change-cookie-settings","title":"Change cookie settings","text":"<p>In order to comply with GDPR, users must be able to change their cookie settings at any time. This can be done by adding a simple link to your copyright notice  in <code>mkdocs.yml</code>:</p> <pre><code>copyright: &gt;\nCopyright &amp;copy; 2016 - 2023 Martin Donath \u2013\n&lt;a href=\"#__consent\"&gt;Change cookie settings&lt;/a&gt;\n</code></pre>"},{"location":"setup/ensuring-data-privacy/#built-in-privacy-plugin","title":"Built-in privacy plugin","text":"<p> Sponsors only \u00b7  insiders-4.9.0 \u00b7  Plugin \u00b7  Experimental</p> <p>The built-in privacy plugin automatically identifies external assets as part of the build process and downloads all assets for very simple self-hosting. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n- privacy\n</code></pre> <p>If you need to be able to build your documentation with and without Insiders, please refer to the built-in plugins section to learn how shared configurations help to achieve this.</p> <p>The following configuration options are available:</p> <code>enabled</code> <p> Default: <code>true</code> \u2013 This option specifies whether the plugin is enabled when building your project. If you want to speed up local builds, you can use an environment variable:</p> <pre><code>plugins:\n- privacy:\nenabled: !ENV [CI, false]\n</code></pre> <code>concurrency</code> <p> Default: number of CPUs \u2013 This option specifies how many CPUs the plugin is allowed to use when downloading external assets. With more CPUs, the plugin can do more work in the same time, thus complete its work faster. Concurrent processing can be disabled with:</p> <pre><code>plugins:\n- privacy:\nconcurrency: 1\n</code></pre>"},{"location":"setup/ensuring-data-privacy/#external-assets","title":"External assets","text":"<p>The following configuration options are available for external assets:</p> <code>assets</code> <p> Default: <code>true</code> \u2013 This option specifies whether the plugin should scan the HTML output to detect and process external assets:</p> <pre><code>plugins:\n- privacy:\nassets: true\n</code></pre> <p>If you've removed all external assets from your project via customization, it's still a good idea to enable the plugin, as the plugin will make sure that there are no hidden external links in any Markdown files that were  unintentionally added.</p> <p>Using <code>assets</code> in strict mode will make the build fail when external assets are detected.</p> <code>assets_fetch</code> <p> Default: <code>true</code> \u2013 This option specifies whether the plugin should download external assets it encountered and bundle them with your documentation:</p> <pre><code>plugins:\n- privacy:\nassets_fetch: true\n</code></pre> <code>assets_fetch_dir</code> <p> Default: <code>assets/external</code> \u2013 This option specifies where the downloaded external assets will be stored. It's normally not necessary to change this option:</p> <pre><code>plugins:\n- privacy:\nassets_fetch_dir: assets/external\n</code></pre> <p>The path must be defined relative to <code>docs_dir</code>.</p> <code>assets_include</code> <p> Default: none \u2013 This option allows to only include certain external assets for processing by the privacy plugin, so they will be downloaded and bundled during the build:</p> <pre><code>plugins:\n- privacy:\nassets_include:\n- unsplash.com/*\n</code></pre> <p>Hosting images externally and optimizing them automatically</p> <p>This option makes the built-in privacy plugin an excellent choice for when you want to host assets like images outside of your git repository in another location to keep them fresh and your repository lean.</p> <p>Additionally, as of  insiders-4.30.0, the built-in privacy plugin was entirely rewritten and now works perfectly with the built-in optimize plugin, which means that external assets can be passed through the same optimization pipeline as the rest of your documentation. This means you can store and edit unoptimized files outside of your repository, and let both plugins built a highly optimized site for you.</p> <p>If you want to implement separate pipelines, i.e., optimize some images differently from others or exclude some images from downloading, you can use multiple instances of the built-in privacy plugin.</p> <code>assets_exclude</code> <p> Default: none \u2013 This option allows to exclude certain external assets from processing by the privacy plugin, so they will not be downloaded and bundled during the build:</p> <pre><code>plugins:\n- privacy:\nassets_exclude: # (1)!\n- cdn.jsdelivr.net/npm/mathjax@3/* - giscus.app/*\n</code></pre> <ol> <li> <p>MathJax loads web fonts for typesetting of mathematical content     through relative URLs, and thus cannot be automatically bundled by the     privacy plugin. MathJax can be self-hosted.</p> <p>Giscus, which we recommend to use as a comment system, uses a technique called code-splitting to load only the code that is necessary, which is implemented via relative URLs. Giscus can be self-hosted as well.</p> </li> </ol> <p>Excluding specific external assets can be necessary if they contain dynamically created or relative URLs, which can't be resolved by the privacy plugin due to technical limitations.</p> <p>Why can't Material for MkDocs bundle all assets by design?</p> <p>The primary reason why Material for MkDocs can't just bundle all of its own assets is the integration with Google Fonts, which offers over a thousand different fonts that can be used to render your documentation. Most of the fonts include several weights and are split up into different character sets  to keep the download size small, so the browser only downloads what is really needed. For Roboto, our default regular font, this results in 42 <code>*.woff2</code> files in total.</p> <p>If Material for MkDocs would bundle all font files, the download size would be in the hundreds of megabytes, slowing down automated builds. Furthermore,  authors might add external assets like third-party scripts or style sheets  that would need to be remembered to be defined as further local assets.</p> <p>This is the very reason the built-in privacy plugin exists \u2014 it automates the process of downloading all external assets manually to ensure compliance with GDPR with some some technical limitations.</p>"},{"location":"setup/ensuring-data-privacy/#external-links","title":"External links","text":"<p> Sponsors only \u00b7  insiders-4.26.0 \u00b7  Experimental</p> <p>The following configuration options are available for external links:</p> <code>links</code> <p> Default: <code>true</code> \u2013 This option specifies whether the plugin should parse and process external links. If you want to speed up local builds, you can use an environment variable:</p> <pre><code>plugins:\n- privacy:\nlinks: !ENV [CI, false]\n</code></pre> <code>links_attr_map</code> <p> Default: None \u2013 This option specifies custom attributes that should be added to external links, like for example <code>target=\"_blank\"</code> so all external links open in a new window:</p> <pre><code>plugins:\n- privacy:\nlinks_attr_map:\ntarget: _blank\n</code></pre> <code>links_noopener</code> <p> Default: <code>true</code> \u2013 This option specifies whether the plugin should automatically add <code>rel=\"noopener\"</code> to all links with <code>target=\"_blank\"</code> for security reasons:</p> <pre><code>plugins:\n- privacy:\nlinks_noopener: true\n</code></pre>"},{"location":"setup/ensuring-data-privacy/#how-it-works","title":"How it works","text":"<p>The built-in privacy plugin scans the resulting HTML for links to external resources, including external scripts, style sheets, images and web fonts, and downloads them to bundle them with your documentation site. Every URL referring to an external resource, no matter if part of a template or Markdown file, is then replaced with the URL to the local copy. An example:</p> <pre><code>&lt;script src=\"https://example.com/script.js\"&gt;&lt;/script&gt;\n</code></pre> <p>The external script is downloaded, and the link is replaced with:</p> <pre><code>&lt;script src=\"assets/external/example.com/script.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Style sheets are scanned for external <code>url(...)</code> references, e.g. images and web fonts, which are then also downloaded and bundled with your documentation site. This means that Google Fonts can be configured in <code>mkdocs.yml</code> as usual, as the built-in privacy plugin automatically downloads and bundles all dependent resources.</p> <p>As a third measure, <code>preconnect</code> hints used for DNS pre-fetching which might also leak the visitors IP address to a third party are automatically removed during the build process.</p> Expand to inspect example <p>For the official documentation, the built-in privacy plugin downloads the following resources:</p> <pre><code>.\n\u2514\u2500 assets/external/\n   \u251c\u2500 unpkg.com/tablesort@5.3.0/dist/tablesort.min.js\n   \u251c\u2500 fonts.googleapis.com/css\n   \u251c\u2500 fonts.gstatic.com/s/\n   \u2502  \u251c\u2500 roboto/v29/\n   \u2502  \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TjASc-CsTKlA.woff2\n   \u2502  \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TjASc0CsTKlA.woff2\n   \u2502  \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TjASc1CsTKlA.woff2\n   \u2502  \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TjASc2CsTKlA.woff2\n   \u2502  \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TjASc3CsTKlA.woff2\n   \u2502  \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TjASc5CsTKlA.woff2\n   \u2502  \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TjASc6CsQ.woff2\n   \u2502  \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TzBic-CsTKlA.woff2\n   \u2502  \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TzBic0CsTKlA.woff2\n   \u2502  \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TzBic1CsTKlA.woff2\n   \u2502  \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TzBic2CsTKlA.woff2\n   \u2502  \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TzBic3CsTKlA.woff2\n   \u2502  \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TzBic5CsTKlA.woff2\n   \u2502  \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TzBic6CsQ.woff2\n   \u2502  \u2502  \u251c\u2500 KFOkCnqEu92Fr1Mu51xEIzIFKw.woff2\n   \u2502  \u2502  \u251c\u2500 KFOkCnqEu92Fr1Mu51xFIzIFKw.woff2\n   \u2502  \u2502  \u251c\u2500 KFOkCnqEu92Fr1Mu51xGIzIFKw.woff2\n   \u2502  \u2502  \u251c\u2500 KFOkCnqEu92Fr1Mu51xHIzIFKw.woff2\n   \u2502  \u2502  \u251c\u2500 KFOkCnqEu92Fr1Mu51xIIzI.woff2\n   \u2502  \u2502  \u251c\u2500 KFOkCnqEu92Fr1Mu51xLIzIFKw.woff2\n   \u2502  \u2502  \u251c\u2500 KFOkCnqEu92Fr1Mu51xMIzIFKw.woff2\n   \u2502  \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmSU5fABc4EsA.woff2\n   \u2502  \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmSU5fBBc4.woff2\n   \u2502  \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmSU5fBxc4EsA.woff2\n   \u2502  \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmSU5fCBc4EsA.woff2\n   \u2502  \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmSU5fCRc4EsA.woff2\n   \u2502  \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmSU5fChc4EsA.woff2\n   \u2502  \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmSU5fCxc4EsA.woff2\n   \u2502  \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmWUlfABc4EsA.woff2\n   \u2502  \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmWUlfBBc4.woff2\n   \u2502  \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmWUlfBxc4EsA.woff2\n   \u2502  \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmWUlfCBc4EsA.woff2\n   \u2502  \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmWUlfCRc4EsA.woff2\n   \u2502  \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmWUlfChc4EsA.woff2\n   \u2502  \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmWUlfCxc4EsA.woff2\n   \u2502  \u2502  \u251c\u2500 KFOmCnqEu92Fr1Mu4WxKOzY.woff2\n   \u2502  \u2502  \u251c\u2500 KFOmCnqEu92Fr1Mu4mxK.woff2\n   \u2502  \u2502  \u251c\u2500 KFOmCnqEu92Fr1Mu5mxKOzY.woff2\n   \u2502  \u2502  \u251c\u2500 KFOmCnqEu92Fr1Mu72xKOzY.woff2\n   \u2502  \u2502  \u251c\u2500 KFOmCnqEu92Fr1Mu7GxKOzY.woff2\n   \u2502  \u2502  \u251c\u2500 KFOmCnqEu92Fr1Mu7WxKOzY.woff2\n   \u2502  \u2502  \u2514\u2500 KFOmCnqEu92Fr1Mu7mxKOzY.woff2\n   \u2502  \u2514\u2500 robotomono/v13/\n   \u2502     \u251c\u2500 L0xTDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vrtSM1J-gEPT5Ese6hmHSV0mf0h.woff2\n   \u2502     \u251c\u2500 L0xTDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vrtSM1J-gEPT5Ese6hmHSZ0mf0h.woff2\n   \u2502     \u251c\u2500 L0xTDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vrtSM1J-gEPT5Ese6hmHSd0mf0h.woff2\n   \u2502     \u251c\u2500 L0xTDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vrtSM1J-gEPT5Ese6hmHSh0mQ.woff2\n   \u2502     \u251c\u2500 L0xTDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vrtSM1J-gEPT5Ese6hmHSt0mf0h.woff2\n   \u2502     \u251c\u2500 L0xTDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vrtSM1J-gEPT5Ese6hmHSx0mf0h.woff2\n   \u2502     \u251c\u2500 L0xdDF4xlVMF-BfR8bXMIjhOsXG-q2oeuFoqFrlnAIe2Imhk1T8rbociImtElOUlYIw.woff2\n   \u2502     \u251c\u2500 L0xdDF4xlVMF-BfR8bXMIjhOsXG-q2oeuFoqFrlnAIe2Imhk1T8rbociImtEleUlYIw.woff2\n   \u2502     \u251c\u2500 L0xdDF4xlVMF-BfR8bXMIjhOsXG-q2oeuFoqFrlnAIe2Imhk1T8rbociImtEluUlYIw.woff2\n   \u2502     \u251c\u2500 L0xdDF4xlVMF-BfR8bXMIjhOsXG-q2oeuFoqFrlnAIe2Imhk1T8rbociImtEm-Ul.woff2\n   \u2502     \u251c\u2500 L0xdDF4xlVMF-BfR8bXMIjhOsXG-q2oeuFoqFrlnAIe2Imhk1T8rbociImtEmOUlYIw.woff2\n   \u2502     \u2514\u2500 L0xdDF4xlVMF-BfR8bXMIjhOsXG-q2oeuFoqFrlnAIe2Imhk1T8rbociImtEn-UlYIw.woff2\n   \u2514\u2500 polyfill.io/v3/polyfill.min.js\n</code></pre>"},{"location":"setup/ensuring-data-privacy/#caching","title":"Caching recommended","text":"<p>All downloaded files are written to the <code>.cache</code> directory, significantly  reducing the duration of subsequent builds as only replacements need to be  carried out. You might want to:</p> <ol> <li>Ignore the <code>.cache</code> directory in your project, by adding it to <code>.gitignore</code>.</li> <li> <p>When building your site for publishing, use a build cache to save the     <code>.cache</code> directory in between builds. Taking the example from the     publishing guide, add the following lines:</p> <pre><code>name: ci\non:\npush:\nbranches:\n- master\n- main\njobs:\ndeploy:\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v3\n- uses: actions/setup-python@v4\nwith:\npython-version: 3.x\n- run: echo \"cache_id=$(date --utc '+%V')\" &gt;&gt; $GITHUB_ENV\n- uses: actions/cache@v3\nwith:\nkey: mkdocs-material-${{ env.cache_id }}\npath: .cache\nrestore-keys: |\nmkdocs-material-\n- run: pip install mkdocs-material\n- run: mkdocs gh-deploy --force\n</code></pre> </li> </ol>"},{"location":"setup/ensuring-data-privacy/#limitations","title":"Limitations","text":"<p>Note that dynamically created URLs as part of scripts are not detected, and thus cannot be automatically downloaded. The built-in privacy plugin does not execute scripts \u2013 it can only detect fully qualified URLs to download and replace.</p> <p>In short, don't do this:</p> <pre><code>const cdn = \"https://polyfill.io\"\nconst url = `${cdn}/v3/polyfill.min.js`\n</code></pre> <p>Instead, always use fully qualified URLs:</p> <pre><code>const url =\"https://polyfill.io/v3/polyfill.min.js\"\n</code></pre>"},{"location":"setup/ensuring-data-privacy/#customization","title":"Customization","text":""},{"location":"setup/ensuring-data-privacy/#custom-cookies","title":"Custom cookies","text":"<p>If you've customized the cookie consent and added a <code>custom</code> cookie, the user will be prompted to accept your custom cookie. Use additional JavaScript to check whether the user accepted it:</p> <code>docs/javascripts/consent.js</code> <code>mkdocs.yml</code> <pre><code>var consent = __md_get(\"__consent\")\nif (consent &amp;&amp; consent.custom) {\n/* The user accepted the cookie */\n}\n</code></pre> <pre><code>extra_javascript:\n- javascripts/consent.js\n</code></pre>"},{"location":"setup/setting-up-a-blog/","title":"Setting up a blog","text":"<p>Material for MkDocs makes it very easy to build a blog, either as a sidecar to your documentation or standalone. Focus on your content while the engine does all the heavy lifting, automatically generating archive and category indexes, post slugs, configurable pagination and more.</p> <p>Check out our blog, which is created with the new built-in blog plugin!</p>"},{"location":"setup/setting-up-a-blog/#configuration","title":"Configuration","text":""},{"location":"setup/setting-up-a-blog/#built-in-blog-plugin","title":"Built-in blog plugin","text":"<p> Sponsors only \u00b7  insiders-4.23.0 \u00b7  Plugin \u00b7  Experimental</p> <p>The built-in blog plugin adds support for building a blog from a folder of posts, which are annotated with dates and other structured data. First, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n- blog\n</code></pre> <p>If you need to be able to build your documentation with and without Insiders, please refer to the built-in plugins section to learn how shared configurations help to achieve this.</p> <p>By default, the built-in blog plugin assumes that your blog is hosted inside the <code>blog</code> subfolder of your documentation (this is configurable). Next, you need to create the following structure:</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 blog/\n\u2502     \u251c\u2500 posts/\n\u2502     \u2514\u2500 index.md\n\u2514\u2500 mkdocs.yml\n</code></pre> <p>Since the built-in blog plugin auto-generates archive and category indexes, it must know where to add those to the navigation. Thus, make sure to add a <code>blog/index.md</code> file in <code>mkdocs.yml</code>:</p> <pre><code>nav:\n- Blog:\n- blog/index.md # (1)!\n</code></pre> <ol> <li> <p>Within this file, you can specify the title of your blog, which is then     picked up and used by the built-in blog plugin:</p> <pre><code># Blog\n</code></pre> </li> </ol> <p>The following configuration options are available:</p> <code>enabled</code> <p> Default: <code>true</code> \u2013 This option specifies whether the plugin is enabled when building your project. If you want to speed up local builds, you can use an environment variable:</p> <pre><code>plugins:\n- blog:\nenabled: !ENV [CI, false]\n</code></pre> <code>blog_dir</code> <p> Default: <code>blog</code> \u2013 This option specifies the folder where your posts and metadata live. The name of the folder will also be included in the generated URLs as a prefix to all blog-related pages. If you want to build a standalone blog, change it to <code>.</code>:</p> SubdirectoryStandalone <pre><code>plugins:\n- blog:\nblog_dir: blog\n</code></pre> <pre><code>plugins:\n- blog:\nblog_dir: .\n</code></pre> <p>The path must be defined relative to <code>docs_dir</code>.</p> <code>blog_toc</code> <p> Default: <code>false</code> \u2013 This option specifies whether indexes include a table of contents with all post titles on the right side as an overview:</p> <pre><code>plugins:\n- blog:\nblog_toc: true\n</code></pre> <p>Note that this setting is also used as the default value for <code>archive_toc</code> and <code>categories_toc</code>, unless those settings are explicitly defined.</p> <p>The built-in blog plugin has dozens of options that allow for advanced configuration. It's a good idea to start writing your first post, and come back here later for fine-tuning the output.</p>"},{"location":"setup/setting-up-a-blog/#posts","title":"Posts","text":"<p>The following configuration options are available for posts:</p> <code>post_date_format</code> <p> Default: <code>long</code> \u2013 This option specifies the date format that is used when posts are rendered. Under the hood, the built-in blog plugin leverages Babel to render dates locale-aware using the configured site language. The following formats are supported:</p> Monday, January 31, 2022January 31, 2022Jan 31, 20221/31/22 <pre><code>plugins:\n- blog:\npost_date_format: full\n</code></pre> <pre><code>plugins:\n- blog:\npost_date_format: long\n</code></pre> <pre><code>plugins:\n- blog:\npost_date_format: medium\n</code></pre> <pre><code>plugins:\n- blog:\npost_date_format: short\n</code></pre> <p>Note that depending on the site language, formats might look different for other languages. Additionally, Babel supports a pattern syntax which allows for custom formats.</p> <code>post_url_date_format</code> <p> Default: <code>yyyy/MM/dd</code> \u2013 This option specifies the date format that is used in the URL of the post. The format string must adhere to Babel's pattern syntax. Some examples:</p>  blog/2022/01/31// blog/2022/01// blog/2022// <pre><code>plugins:\n- blog:\npost_url_date_format: yyyy/MM/dd\n</code></pre> <pre><code>plugins:\n- blog:\npost_url_date_format: yyyy/MM\n</code></pre> <pre><code>plugins:\n- blog:\npost_url_date_format: yyyy\n</code></pre> <p>If you want to exclude the date altogether, e.g. when your blog features mostly evergreen content, you can remove the <code>date</code> placeholder from the format string (see below).</p> <code>post_url_format</code> <p> Default: <code>{date}/{slug}</code> \u2013 This option specifies the format string that is used for the URL of the post. The following placeholders are currently supported:</p> <ul> <li> <p><code>categories</code> \u2013 Replaced with the post's slugified categories.</p> </li> <li> <p><code>date</code> \u2013 Replaced with the post's date, as configured in   <code>post_url_date_format</code>.</p> </li> <li> <p><code>slug</code> \u2013 Replaced with a slug generated from the post's title.</p> </li> <li> <p><code>file</code> \u2013 Replaced with the post's file name.</p> </li> </ul>  blog/2022// blog// <pre><code>plugins:\n- blog:\npost_url_format: \"{date}/{slug}\"\n</code></pre> <pre><code>plugins:\n- blog:\npost_url_format: \"{slug}\"\n</code></pre> <p>If you remove the <code>date</code> placeholder, make sure that post URLs don't collide with other the URLs of other pages added to the blog section, as this leads to undefined behavior.</p> <code>post_url_max_categories</code> <p> Default: <code>1</code> \u2013 This option specifies the number of categories that are included in the URL if the <code>categories</code> placeholder is part of <code>post_url_format</code>. If a post is assigned to multiple categories, they are joined with <code>/</code>:</p> <pre><code>plugins:\n- blog:\npost_url_format: \"{categories}/{slug}\"\npost_url_max_categories: 2\n</code></pre> <code>post_slugify</code> <p> Default: <code>headerid.slugify</code> \u2013 This option specifies which function to use for generating URL-compatible slugs from post titles.  Python Markdown Extensions comes with several Unicode-aware slug functions which should be a good choice for non-ASCII languages:</p> UnicodeUnicode, case-sensitive <pre><code>plugins:\n- blog:\npost_slugify: !!python/object/apply:pymdownx.slugs.slugify\nkwds:\ncase: lower\n</code></pre> <pre><code>plugins:\n- blog:\npost_slugify: !!python/object/apply:pymdownx.slugs.slugify\n</code></pre> <code>post_slugify_separator</code> <p> Default: <code>-</code> \u2013 This option specifies the separator which is used by the slug function. By default, a hyphen is used, but it can be changed to any string, including the empty string:</p> <pre><code>plugins:\n- blog:\npost_slugify_separator: \"-\"\n</code></pre> <code>post_excerpt</code> <p> Default: <code>optional</code> \u2013 This option specifies whether post excerpts should be considered being optional or required by the built-in blog plugin when generating indexes. If excerpts are required, the plugin terminates with an error if a post doesn't define an excerpt:</p> OptionalRequired <pre><code>plugins:\n- blog:\npost_excerpt: optional\n</code></pre> <pre><code>plugins:\n- blog:\npost_excerpt: required\n</code></pre> <code>post_excerpt_max_authors</code> <p> Default: <code>1</code> \u2013 This option specifies the number of authors rendered in post excerpts. While each post may be written by multiple authors, this setting allows to limit the display to just a few or even a single author, or disable authors in excerpts altogether:</p> Render up to 2 authors in excerptsDisable authors in excerpts <pre><code>plugins:\n- blog:\npost_excerpt_max_authors: 2\n</code></pre> <pre><code>plugins:\n- blog:\npost_excerpt_max_authors: 0\n</code></pre> <code>post_excerpt_max_categories</code> <p> Default: <code>5</code> \u2013 This option specifies the number of categories rendered in post excerpts. While each post may be assigned to multiple categories, the built-in blog plugin can be instructed to only show the first <code>n</code> categories to keep it short and concise:</p> Render up to 2 categories in excerptsDisable categories in excerpts <pre><code>plugins:\n- blog:\npost_excerpt_max_categories: 2\n</code></pre> <pre><code>plugins:\n- blog:\npost_excerpt_max_categories: 0\n</code></pre> <code>post_excerpt_separator</code> <p> Default: <code>&lt;!-- more --&gt;</code> \u2013 This option specifies the separator the built-in blog plugin will look for in a post's content when generating post excerpts. All content after the separator is not considered to be part of the excerpt.</p> <code>post_readtime</code> <p> Default: <code>true</code> \u2013 This option specifies whether the built-in blog plugin should compute the reading time of a post automatically, which is then rendered in post excerpts, as well as in the posts themselves. If you want to disable reading time computation, add:</p> <pre><code>plugins:\n- blog:\npost_readtime: false\n</code></pre> <code>post_readtime_words_per_minute</code> <p> Default: <code>265</code> \u2013 This option specifies the number of words that a reader is expected to read per minute when computing the reading time of a post. If you feel that estimation is not quite right, you can fine-tune reading time computation with the following setting:</p> <pre><code>plugins:\n- blog:\npost_readtime_words_per_minute: 265\n</code></pre>"},{"location":"setup/setting-up-a-blog/#archive","title":"Archive","text":"<p>The following configuration options are available for archive index generation:</p> <code>archive</code> <p> Default: <code>true</code> \u2013 This option specifies whether the built-in blog plugin should generate archive indexes. An archive indexes shows all posts for a specific interval (e.g. year, month, etc.) in reverse chronological order. If you want to disable archive index generation, add:</p> <pre><code>plugins:\n- blog:\narchive: false\n</code></pre> <code>archive_name</code> <p> Default: automatically set \u2013 This option specifies the title of the archive section which the built-in blog plugin will generate and add to the navigation. If this setting is omitted, it's sourced from the translations, falling back to English. Change it with:</p> <pre><code>plugins:\n- blog:\narchive_name: Archive\n</code></pre> <code>archive_date_format</code> <p> Default: <code>yyyy</code> \u2013 This option specifies the date format that is used when archive indexes are rendered. The format string must adhere to Babel's pattern syntax. Popular settings are:</p> 2022January 2022 <pre><code>plugins:\n- blog:\narchive_date_format: yyyy\n</code></pre> <pre><code>plugins:\n- blog:\narchive_date_format: MMMM yyyy\n</code></pre> <code>archive_url_date_format</code> <p> Default: <code>yyyy</code> \u2013 This option specifies the date format that is used in the archive index URL. The format string must adhere to Babel's pattern syntax. Some examples:</p>  blog/archive/2022/ blog/archive/2022/01/ <pre><code>plugins:\n- blog:\narchive_url_date_format: yyyy\n</code></pre> <pre><code>plugins:\n- blog:\narchive_url_date_format: yyyy/MM\n</code></pre> <code>archive_url_format</code> <p> Default: <code>archive/{date}</code> \u2013 This option specifies the format string that is used for the URL of the archive index, and can be used to localize the URL:</p>  blog/archive/2022/ blog/2022/ <pre><code>plugins:\n- blog:\narchive_url_format: \"archive/{date}\"\n</code></pre> <pre><code>plugins:\n- blog:\narchive_url_format: \"{date}\"\n</code></pre> <code>archive_toc</code> <p> Default: <code>false</code> \u2013 This option specifies whether an archive index includes a table of contents with all post titles on the right side as an overview:</p> <pre><code>plugins:\n- blog:\narchive_toc: true\n</code></pre>"},{"location":"setup/setting-up-a-blog/#categories","title":"Categories","text":"<p>The following configuration options are available for category index generation:</p> <code>categories</code> <p> Default: <code>true</code> \u2013 This option specifies whether the built-in blog plugin should generate category indexes. A category index shows all posts for a specific category in reverse chronological order. If you want to disable category index generation, add:</p> <pre><code>plugins:\n- blog:\ncategories: false\n</code></pre> <code>categories_name</code> <p> Default: automatically set \u2013 This option specifies the title of the category section which the built-in blog plugin will generate and add to the navigation. If this setting is omitted, it's sourced from the translations, falling back to English. Change it with:</p> <pre><code>plugins:\n- blog:\ncategories_name: Categories\n</code></pre> <code>categories_url_format</code> <p> Default: <code>category/{slug}</code> \u2013 This option specifies the format string that is used for the URL of a category index, and can be used to localize the URL:</p>  blog/category// blog// <pre><code>plugins:\n- blog:\ncategories_url_format: \"category/{slug}\"\n</code></pre> <pre><code>plugins:\n- blog:\ncategories_url_format: \"{slug}\"\n</code></pre> <code>categories_slugify</code> <p> Default: <code>headerid.slugify</code> \u2013 This option specifies which function to use for generating URL-compatible slugs from categories.  Python Markdown Extensions comes with several Unicode-aware slug functions which should be a good choice for non-ASCII languages:</p> UnicodeUnicode, case-sensitive <pre><code>plugins:\n- blog:\ncategories_slugify: !!python/object/apply:pymdownx.slugs.slugify kwds:\ncase: lower\n</code></pre> <pre><code>plugins:\n- blog:\ncategories_slugify: !!python/object/apply:pymdownx.slugs.slugify\n</code></pre> <code>categories_slugify_separator</code> <p> Default: <code>-</code> \u2013 This option specifies the separator which is used by the slug function. By default, a hyphen is used, but it can be changed to any string, including the empty string:</p> <pre><code>plugins:\n- blog:\ncategories_slugify_separator: \"-\"\n</code></pre> <code>categories_allowed</code> <p> Default: none \u2013 This option specifies the categories that are allowed to be used in posts. If this setting is omitted, the built-in blog plugin will not check category names. Use this option to define a list of categories in order to catch typos:</p> <pre><code>plugins:\n- blog:\ncategories_allowed:\n- General\n- Search\n- Performance\n</code></pre> <code>categories_toc</code> <p> Default: <code>false</code> \u2013 This option specifies whether a category index includes a table of contents with all post titles on the right side as an overview:</p> <pre><code>plugins:\n- blog:\ncategories_toc: true\n</code></pre>"},{"location":"setup/setting-up-a-blog/#pagination","title":"Pagination","text":"<p>The following configuration options are available for index pagination:</p> <code>pagination</code> <p> Default: <code>true</code> \u2013 This option specifies whether the built-in blog plugin should paginate the index. The index shows all posts in reverse chronological order, which can be many. If you want to disable index pagination, add:</p> <pre><code>plugins:\n- blog:\npagination: false\n</code></pre> <code>pagination_per_page</code> <p> Default: <code>10</code> \u2013 This option specifies the number of posts rendered on a single index page. If more posts are found, they are assigned to a 2nd page, and so on. If you have large post excerpts, it might be a good idea to reduce the number of posts per page:</p> <pre><code>plugins:\n- blog:\npagination_per_page: 5\n</code></pre> <code>pagination_url_format</code> <p> Default: <code>page/{page}</code> \u2013 This option specifies the format string that is used for the URL of the paginated index, and can be used to localize the URL:</p>  blog/page/n/ blog/n/ <pre><code>plugins:\n- blog:\npagination_url_format: \"page/{page}\"\n</code></pre> <pre><code>plugins:\n- blog:\npagination_url_format: \"{page}\"\n</code></pre> <code>pagination_template</code> <p> Default: <code>~2~</code> \u2013 This option specifies the format string that is provided to the paginate module, which allows to customize how pagination is constructed. Popular choices:</p> 1 2 3 .. n1 2 3 .. n  1  <pre><code>plugins:\n- blog:\npagination_template: \"~2~\"\n</code></pre> <pre><code>plugins:\n- blog:\npagination_template: \"$link_first $link_previous ~2~ $link_next $link_last\"\n</code></pre> <pre><code>plugins:\n- blog:\npagination_template: \"$link_previous $page $link_next\"\n</code></pre> <p>The paginate module exposes the following placeholders:</p> <ul> <li><code>$first_page</code> \u2013 number of first reachable page</li> <li><code>$last_page</code> \u2013 number of last reachable page</li> <li><code>$page</code> \u2013 number of currently selected page</li> <li><code>$page_count</code> \u2013 number of reachable pages</li> <li><code>$items_per_page</code> \u2013 maximal number of items per page</li> <li><code>$first_item</code> \u2013 index of first item on the current page</li> <li><code>$last_item</code> \u2013 index of last item on the current page</li> <li><code>$item_count</code> \u2013 total number of items</li> <li><code>$link_first</code> \u2013 link to first page (unless this is first page)</li> <li><code>$link_last</code> \u2013 link to last page (unless this is last page)</li> <li><code>$link_previous</code> \u2013 link to previous page (unless this is first page)</li> <li><code>$link_next</code> \u2013 link to next page (unless this is last page)</li> </ul> <code>pagination_keep_content</code> <p> Default: <code>false</code> \u2013 This option specifies whether paginated index pages should inherit the custom content from the index page, i.e. the content of <code>blog/index.md</code>:</p> <pre><code>plugins:\n- blog:\npagination_keep_content: true\n</code></pre>"},{"location":"setup/setting-up-a-blog/#authors","title":"Authors","text":"<p>The following configuration options are available for author info:</p> <code>authors</code> <p> Default: <code>true</code> \u2013 This option specifies whether the built-in blog plugin should generate author info. If it is enabled, the plugin will look up authors in a file called <code>.authors.yml</code> and include authors in indexes and in posts. If you want to disable this behavior, add:</p> <pre><code>plugins:\n- blog:\nauthors: false\n</code></pre> <code>authors_file</code> <p> Default: <code>.authors.yml</code> \u2013 This option specifies the name of the file where the authors for your posts resides. The default settings assumes that the file is called <code>.authors.yml</code> (mind the <code>.</code> at the beginning):</p> <pre><code>plugins:\n- blog:\nauthors_file: .authors.yml\n</code></pre> <p>The path must be defined relative to <code>blog_dir</code>. Also see the section on adding authors.</p>"},{"location":"setup/setting-up-a-blog/#drafts","title":"Drafts","text":"<p>The following configuration options are available for drafts:</p> <code>draft</code> <p> Default: <code>false</code> \u2013 This option specifies whether the built-in blog plugin should also include posts marked as drafts when the site is being built. Including draft posts might be desired in deploy previews, which is why it exists in the first place:</p> Render draftsDon't render drafts <pre><code>plugins:\n- blog:\ndraft: true\n</code></pre> <pre><code>plugins:\n- blog:\ndraft: false\n</code></pre> <code>draft_on_serve</code> <p> Default: <code>true</code> \u2013 This option specifies whether posts marked as drafts should be included when previewing your site with <code>mkdocs serve</code>. By default, drafts are rendered when previewing, but skipped when the site is being built:</p> <pre><code>plugins:\n- blog:\ndraft_on_serve: true\n</code></pre> <code>draft_if_future_date</code> <p> Default: <code>false</code> \u2013 This option specifies whether the built-in blog plugin should mark posts with a future date as drafts. When the date passed today, the post is automatically unmarked and included when the site is being built:</p> <pre><code>plugins:\n- blog:\ndraft_if_future_date: true\n</code></pre>"},{"location":"setup/setting-up-a-blog/#rss","title":"RSS","text":"<p> Sponsors only \u00b7  insiders-4.23.0 \u00b7  Plugin</p> <p>The built-in blog plugin integrates seamlessly with the RSS plugin, which provides a simple way to add an RSS feed to your blog (or to your whole  documentation). Install it with <code>pip</code>:</p> <pre><code>pip install mkdocs-rss-plugin\n</code></pre> <p>Then, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n- rss:\nmatch_path: blog/posts/.* # (1)!\ndate_from_meta:\nas_creation: date\ncategories:\n- categories\n- tags # (2)!\n</code></pre> <ol> <li> <p>The RSS plugin allows to filter for URLs to be included in the feed. In     this example, only blog posts will be part of the feed.</p> </li> <li> <p>If you want to include a post's categories as well as its tags in the feed,     add both <code>categories</code> and <code>tags</code> here.</p> </li> </ol> <p>The following configuration options are supported:</p> <code>enabled</code> <p> Default: <code>true</code> \u2013 This option specifies whether the plugin is enabled when building your project. If you want to speed up local builds, you can use an environment variable:</p> <pre><code>plugins:\n- rss:\nenabled: !ENV [CI, false]\n</code></pre> <code>match_path</code> <p> Default: <code>.*</code> \u2013 This option specifies which pages should be included in the feed. For example, to only include blog posts in the feed, use the following regular expression:</p> <pre><code>plugins:\n- rss:\nmatch_path: blog/posts/.*\n</code></pre> <code>date_from_meta</code> <p> Default: none \u2013 This option specifies which front matter property should be used as a creation date of a page in the  feed. It's recommended to use the <code>date</code> property:</p> <pre><code>plugins:\n- rss:\ndate_from_meta:\nas_creation: date\n</code></pre> <code>categories</code> <p> Default: none \u2013 This option specifies which front matter properties are used as categories as part of the feed. If you use categories and tags, add both with the following lines:</p> <pre><code>plugins:\n- rss:\ncategories:\n- categories\n- tags\n</code></pre> <code>comments_path</code> <p> Default: none \u2013 This option specifies the anchor at which comments for a post or page can be found. If you've integrated a comment system, add the following lines:</p> <pre><code>plugins:\n- rss:\ncomments_path: \"#__comments\"\n</code></pre> <p>Material for MkDocs will automatically add the necessary metadata to your site which will make the RSS feed discoverable by browsers and feed readers. Note that the RSS plugin comes with several other configuration options. For further information, see the documentation.</p>"},{"location":"setup/setting-up-a-blog/#usage","title":"Usage","text":""},{"location":"setup/setting-up-a-blog/#writing-your-first-post","title":"Writing your first post","text":"<p>After you've successfully set up the built-in blog plugin, it's time to write your first post. The plugin doesn't assume any specific directory structure, so you're completely free in how you organize your posts, as long as they are all located inside the <code>posts</code> directory:</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 blog/\n\u2502     \u251c\u2500 posts/\n\u2502     \u2502  \u2514\u2500 hello-world.md # (1)!\n\u2502     \u2514\u2500 index.md\n\u2514\u2500 mkdocs.yml\n</code></pre> <ol> <li>If you'd like to arrange posts differently, you're free to do so. The URLs     are built from the format specified in <code>post_url_format</code> and     the titles and dates of posts, no matter how they are organized     inside the <code>posts</code> directory.</li> </ol> <p>Create a new file called <code>hello-world.md</code> and add the following lines:</p> <pre><code>---\ndraft: true # (1)!\ndate: 2022-01-31\ncategories:\n- Hello\n- World\n---\n# Hello world!\n...\n</code></pre> <ol> <li>If you mark a post as a draft, a red marker appears next to the post date      on index pages. When the site is built, drafts are not included in the      output. This behavior can be changed, e.g. for rendering drafts when      building deploy previews.</li> </ol> <p>When you spin up the live preview server, you should be greeted by your first post! You'll also realize, that archive and category indexes have been automatically generated for you.</p>"},{"location":"setup/setting-up-a-blog/#adding-an-excerpt","title":"Adding an excerpt","text":"<p>The blog index, as well as archive and category indexes can either list the entire content of each post, or excerpts of posts. An excerpt can be created by adding a <code>&lt;!-- more --&gt;</code> separator after the first few paragraphs of a post:</p> <pre><code># Hello world!\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n&lt;!-- more --&gt;\n...\n</code></pre> <p>When the built-in blog plugin generates all indexes, the content before the excerpt separator is automatically extracted, allowing the user to start reading a post before deciding to jump in.</p>"},{"location":"setup/setting-up-a-blog/#adding-authors","title":"Adding authors","text":"<p>In order to add a little more personality to your posts, you can associate each post with one or multiple authors. First, create the <code>.authors.yml</code> file in your blog directory, and add an author:</p> <pre><code>squidfunk:\nname: Martin Donath\ndescription: Creator\navatar: https://github.com/squidfunk.png\n</code></pre> <p>The <code>.authors.yml</code> file associates each author with an identifier (in this example <code>squidfunk</code>), which can then be used in posts. The following properties are available for each author:</p> <code>name</code> <p> Default: none \u00b7  Required \u2013 This property must define a name for the author. The name is displayed in the left sidebar of each post as part of the author info.</p> <code>description</code> <p> Default: none \u00b7  Required \u2013 This property can be used to add a short description for the author, e.g. the role or profession of the author, or any other title.</p> <code>avatar</code> <p> Default: none \u00b7  Required \u2013 This property must point to a valid image URL, internal or external, and is used as part of posts and excerpts as the author's avatar.</p> <p>Now, you can assign one or more authors to a post by referencing their identifiers in the front matter of the Markdown file under the <code>authors</code> property. For each author, a small profile is rendered in the left sidebar of each post, as well as in post excerpts on index pages:</p> <pre><code>---\ndate: 2022-01-31\nauthors:\n- squidfunk\n...\n---\n# Hello world!\n...\n</code></pre>"},{"location":"setup/setting-up-a-blog/#adding-categories","title":"Adding categories","text":"<p>Categories are an excellent way for grouping your posts thematically on dedicated index pages. This way, a user interested in a specific topic can explore all of your posts on this topic. Make sure categories are enabled and add them to the front matter <code>categories</code> property:</p> <pre><code>---\ndate: 2022-01-31\ncategories:\n- Hello\n- World\n---\n# Hello world!\n...\n</code></pre> <p>If you want to save yourself from typos when typing out categories, you can define your desired categories in <code>mkdocs.yml</code> as part of the <code>categories_allowed</code> configuration option. The built-in blog plugin will stop the build if a category is not found within the list.</p>"},{"location":"setup/setting-up-a-blog/#adding-tags","title":"Adding tags","text":"<p>Besides categories, the built-in blog plugin also integrates with the built-in tags plugin. If you add tags in the front matter <code>tags</code> property as part of a post, the post is linked from the tags index:</p> <pre><code>---\ndate: 2022-01-31\ntags:\n- Foo\n- Bar\n---\n# Hello world!\n...\n</code></pre> <p>As usual, the tags are rendered above the main headline and posts are linked  on the tags index page, if configured. Note that posts are, as pages, only linked with their titles.</p>"},{"location":"setup/setting-up-a-blog/#adding-related-links","title":"Adding related links","text":"<p>Related links offer the perfect way to prominently add a further reading  section to your post that is included in the left sidebar, guiding the user to  other destinations of your documentation. Use the front matter <code>links</code> property  to add related links to a post:</p> <pre><code>---\ndate: 2022-01-31\nlinks:\n- setup/setting-up-site-search.md#built-in-search-plugin\n- insiders/index.md#how-to-become-a-sponsor\n---\n# Hello world!\n...\n</code></pre> <p>You can use the exact same syntax as for the <code>nav</code> section in <code>mkdocs.yml</code>, which means you can set explicit titles for links, add external links and even use nesting:</p> <pre><code>---\ndate: 2022-01-31\nlinks:\n- setup/setting-up-site-search.md#built-in-search-plugin\n- insiders/index.md#how-to-become-a-sponsor\n- Nested section:\n- External link: https://example.com\n- setup/setting-up-site-search.md\n---\n# Hello world!\n...\n</code></pre> <p>If you look closely, you'll realize that you can even use an anchor to link to a specific section of a document, extending the possibilities of the <code>nav</code>  syntax in <code>mkdocs.yml</code>. The built-in blog plugin resolves the anchor and sets  the title of the anchor as a subtitle of the related link.</p> <p>Note that all links must be relative to <code>docs_dir</code>, as is also the case for the <code>nav</code> setting.</p>"},{"location":"setup/setting-up-a-blog/#linking-from-and-to-posts","title":"Linking from and to posts","text":"<p>While post URLs are dynamically computed, the built-in blog  plugin ensures that all links from and to posts and a post's assets are  correct. If you want to link to a post, just use the path to the Markdown file  as a link reference (links must be relative):</p> <pre><code>[Hello World!](blog/posts/hello-world.md)\n</code></pre> <p>Linking from a post to a page, e.g. the index, follows the same method:</p> <pre><code>[Blog](../index.md)\n</code></pre> <p>All assets inside the <code>posts</code> directory are copied to the <code>blog/assets</code> folder  when the site is being built. Of course, you can also reference assets from posts outside of the <code>posts</code> directory. The built-in blog plugin ensures that all links are correct.</p>"},{"location":"setup/setting-up-a-blog/#setting-the-reading-time","title":"Setting the reading time","text":"<p>When enabled, the readtime package is used to compute the expected reading time of each post, which is rendered as part of the post and post excerpt. Nowadays, many blogs show reading times, which is why the built-in blog plugin  offers this capability as well.</p> <p>Sometimes, however, the computed reading time might not feel accurate, or result in odd and unpleasant numbers. For this reason, reading time can be  overridden and explicitly set with the front matter <code>readtime</code> property for a post:</p> <pre><code>---\ndate: 2022-01-31\nreadtime: 15\n---\n# Hello world!\n...\n</code></pre> <p>This will disable automatic reading time computation.</p>"},{"location":"setup/setting-up-a-blog/#setting-defaults","title":"Setting defaults","text":"<p>If you have a lot of posts, it might feel redundant to define all of the above for each post. Luckily, the built-in meta plugin allows to set default front matter properties per folder. You can group your posts by categories, or authors, and add a <code>.meta.yml</code> file to set common properties:</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 blog/\n\u2502     \u251c\u2500 posts/\n\u2502     \u251c\u2500 .meta.yml # (1)!\n\u2502     \u2514\u2500 index.md\n\u2514\u2500 mkdocs.yml\n</code></pre> <ol> <li> <p>As already noted, you can also place a <code>.meta.yml</code> file in nested folders     of the <code>posts</code> directory. This file then can define all front matter     properties that are valid in posts, e.g.:</p> <pre><code>authors:\n- squidfunk\ncategories:\n- Hello\n- World\n</code></pre> </li> </ol> <p>Note that order matters \u2013 the built-in meta plugin must be defined before the blog plugin in <code>mkdocs.yml</code>, so that all set defaults are correctly picked up by the built-in blog plugin:</p> <pre><code>plugins:\n- meta\n- blog\n</code></pre> <p>Lists and dictionaries in <code>.meta.yml</code> files are merged and deduplicated with the values defined for a post, which means you can define common properties in <code>.meta.yml</code> and then add specific properties or overrides for each post.</p>"},{"location":"setup/setting-up-a-blog/#adding-pages","title":"Adding pages","text":"<p>Besides posts, it's also possible to add static pages to your blog by listing the pages in the <code>nav</code> section of <code>mkdocs.yml</code>. All generated indexes are included after the last specified page. For example, to add a page on the  authors of the blog, add the following to <code>mkdocs.yml</code>:</p> <pre><code>nav:\n- Blog:\n- blog/index.md\n- blog/authors.md\n...\n</code></pre>"},{"location":"setup/setting-up-a-blog/#customization","title":"Customization","text":""},{"location":"setup/setting-up-a-blog/#custom-index-pages","title":"Custom index pages","text":"<p> insiders-4.24.0 \u00b7  Experimental</p> <p>If you want to add custom content to automatically generated archive and  category indexes, e.g. to add a category description prior to the list of posts, you can manually create the category page in the same location where the built-in blog plugin would create it:</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 blog/\n\u2502     \u251c\u2500 category/\n\u2502     \u2502  \u2514\u2500 hello.md # (1)!\n\u2502     \u251c\u2500 posts/\n\u2502     \u2514\u2500 index.md\n\u2514\u2500 mkdocs.yml\n</code></pre> <ol> <li> <p>The easiest way is to first add the category to the blog post, then take     the URL generated by the built-in blog plugin and create the file at the     corresponding location in the <code>blog_dir</code> folder.</p> <p>Note that the shown directory listing is based on the default configuration. If you specify different values for the following options, be sure to adjust the path accordingly:</p> <ul> <li><code>blog_dir</code></li> <li><code>categories_url_format</code></li> <li><code>categories_slugify</code></li> </ul> </li> </ol> <p>You can now add arbitrary content to the newly created file, or set specific front matter properties for this page, e.g. to change the page description:</p> <pre><code>---\ndescription: Nullam urna elit, malesuada eget finibus ut, ac tortor.\n---\n# Hello\n...\n</code></pre> <p>All post excerpts belonging to the category are automatically appended.</p>"},{"location":"setup/setting-up-a-blog/#overriding-templates","title":"Overriding templates","text":"<p>The built-in blog plugin is built on the same basis as Material for MkDocs, which means you can override all templates used for the blog by using theme extension as usual.</p> <p>The following templates are added by the built-in blog plugin:</p> <ul> <li><code>blog.html</code> \u2013 Template for blog index</li> <li><code>blog-post.html</code> \u2013 Template for blog post</li> <li><code>blog-archive.html</code> \u2013 Template for blog archive index</li> <li><code>blog-category.html</code> \u2013 Template for blog category index</li> </ul>"},{"location":"setup/setting-up-navigation/","title":"Setting up navigation","text":"<p>A clear and concise navigation structure is an important aspect of good project  documentation. Material for MkDocs provides a multitude of options to configure the behavior of navigational elements, including tabs and sections, and one of its flagship features: instant loading.</p>"},{"location":"setup/setting-up-navigation/#configuration","title":"Configuration","text":""},{"location":"setup/setting-up-navigation/#instant-loading","title":"Instant loading","text":"<p> 5.0.0 \u00b7  Feature flag</p> <p>When instant loading is enabled, clicks on all internal links will be intercepted and dispatched via XHR without fully reloading the page. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- navigation.instant\n</code></pre> <p>The resulting page is parsed and injected and all event handlers and components are rebound automatically, i.e., Material for MkDocs now behaves like a Single Page Application. Now, the search index survives navigation, which is especially useful for large documentation sites.</p>"},{"location":"setup/setting-up-navigation/#anchor-tracking","title":"Anchor tracking","text":"<p> 8.0.0 \u00b7  Feature flag</p> <p>When anchor tracking is enabled, the URL in the address bar is automatically updated with the active anchor as highlighted in the table of contents. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- navigation.tracking\n</code></pre>"},{"location":"setup/setting-up-navigation/#navigation-tabs","title":"Navigation tabs","text":"<p> 1.1.0 \u00b7  Feature flag</p> <p>When tabs are enabled, top-level sections are rendered in a menu layer below the header for viewports above <code>1220px</code>, but remain as-is on mobile.1 Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- navigation.tabs\n</code></pre> With tabsWithout <p></p> <p></p>"},{"location":"setup/setting-up-navigation/#sticky-navigation-tabs","title":"Sticky navigation tabs","text":"<p> 7.3.0 \u00b7  Feature flag</p> <p>When sticky tabs are enabled, navigation tabs will lock below the header and always remain visible when scrolling down. Just add the following two feature flags to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- navigation.tabs\n- navigation.tabs.sticky\n</code></pre> With sticky tabsWithout <p></p> <p></p>"},{"location":"setup/setting-up-navigation/#navigation-sections","title":"Navigation sections","text":"<p> 6.2.0 \u00b7  Feature flag</p> <p>When sections are enabled, top-level sections are rendered as groups in the sidebar for viewports above <code>1220px</code>, but remain as-is on mobile. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- navigation.sections\n</code></pre> With sectionsWithout <p></p> <p></p> <p>Both feature flags, <code>navigation.tabs</code> and <code>navigation.sections</code>, can be combined with each other. If both feature flags are enabled, sections are rendered for level 2 navigation items.</p>"},{"location":"setup/setting-up-navigation/#navigation-expansion","title":"Navigation expansion","text":"<p> 6.2.0 \u00b7  Feature flag</p> <p>When expansion is enabled, the left sidebar will expand all collapsible subsections by default, so the user doesn't have to open subsections manually. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- navigation.expand\n</code></pre> With expansionWithout <p></p> <p></p>"},{"location":"setup/setting-up-navigation/#navigation-path","title":"Navigation path Breadcrumbs","text":"<p> Sponsors only \u00b7  insiders-4.28.0 \u00b7  Experimental</p> <p>When navigation paths are activated, a breadcrumb navigation is rendered above the title of each page, which might make orientation easier for users visiting your documentation on devices with smaller screens. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- navigation.path\n</code></pre> With navigation pathWithout <p></p> <p></p>"},{"location":"setup/setting-up-navigation/#navigation-pruning","title":"Navigation pruning","text":"<p> Sponsors only \u00b7  insiders-4.16.0 \u00b7  Experimental</p> <p>When pruning is enabled, only the visible navigation items are included in the  rendered HTML, reducing the size of the built site by 33% or more. Add the  following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- navigation.prune # (1)!\n</code></pre> <ol> <li>This feature flag is not compatible with     <code>navigation.expand</code>, as navigation expansion requires     the complete navigation structure.</li> </ol> <p>This feature flag is especially useful for documentation sites with 100+ or even 1,000+ of pages, as the navigation makes up a significant fraction of the HTML. Navigation pruning will replace all expandable sections with links to the first page in that section (or the section index page).</p>"},{"location":"setup/setting-up-navigation/#section-index-pages","title":"Section index pages","text":"<p> 7.3.0 \u00b7  Feature flag</p> <p>When section index pages are enabled, documents can be directly attached to sections, which is particularly useful for providing overview pages. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- navigation.indexes # (1)!\n</code></pre> <ol> <li>This feature flag is not compatible with <code>toc.integrate</code>,     as sections cannot host the table of contents due to missing space.</li> </ol> With section index pagesWithout <p></p> <p></p> <p>In order to link a page to a section, create a new document with the name <code>index.md</code> in the respective folder, and add it to the beginning of your navigation section:</p> <pre><code>nav:\n- Section:\n- section/index.md # (1)!\n- Page 1: section/page-1.md\n...\n- Page n: section/page-n.md\n</code></pre> <ol> <li>MkDocs also considers files called <code>README.md</code> as index pages.</li> </ol>"},{"location":"setup/setting-up-navigation/#table-of-contents","title":"Table of contents","text":""},{"location":"setup/setting-up-navigation/#anchor-following","title":"Anchor following","text":"<p> 8.5.0 \u00b7  Experimental</p> <p>When anchor following for the table of contents is enabled, the sidebar is automatically scrolled so that the active anchor is always visible. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- toc.follow\n</code></pre>"},{"location":"setup/setting-up-navigation/#navigation-integration","title":"Navigation integration","text":"<p> 6.2.0 \u00b7  Feature flag</p> <p>When navigation integration for the table of contents is enabled, it is always rendered as part of the navigation sidebar on the left. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- toc.integrate # (1)!\n</code></pre> <ol> <li>This feature flag is not compatible with     <code>navigation.indexes</code>, as sections cannot host the     table of contents due to missing space.</li> </ol> With navigation integrationWithout <p></p> <p></p>"},{"location":"setup/setting-up-navigation/#back-to-top-button","title":"Back-to-top button","text":"<p> 7.1.0 \u00b7  Feature flag</p> <p>A back-to-top button can be shown when the user, after scrolling down, starts to scroll up again. It's rendered centered and just below the header. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- navigation.top\n</code></pre>"},{"location":"setup/setting-up-navigation/#usage","title":"Usage","text":""},{"location":"setup/setting-up-navigation/#hiding-the-sidebars","title":"Hiding the sidebars","text":"<p>The navigation and/or table of contents sidebars can be hidden for a document with the front matter <code>hide</code> property. Add the following lines at the top of a  Markdown file:</p> <pre><code>---\nhide:\n- navigation\n- toc\n---\n# Document title\n...\n</code></pre> Hide navigationHide table of contentsHide both <p></p> <p></p> <p></p>"},{"location":"setup/setting-up-navigation/#hiding-the-navigation-path","title":"Hiding the navigation path","text":"<p>While the navigation path is rendered above the main headline, sometimes, it might be desirable to hide it for a specific page, which can be achieved with the front matter <code>hide</code> property:</p> <pre><code>---\nhide:\n- path\n---\n# Document title\n...\n</code></pre>"},{"location":"setup/setting-up-navigation/#customization","title":"Customization","text":""},{"location":"setup/setting-up-navigation/#keyboard-shortcuts","title":"Keyboard shortcuts","text":"<p>Material for MkDocs includes several keyboard shortcuts that make it possible to navigate your project documentation via keyboard. There are two modes:</p> <code>search</code> <p>This mode is active when the search is focused. It provides several key bindings to make search accessible and navigable via keyboard:</p> <ul> <li>Down , Up : select next / previous result</li> <li>Esc , Tab : close search dialog</li> <li>Enter : follow selected result</li> </ul> <code>global</code> <p>This mode is active when search is not focussed and when there's no other focussed element that is susceptible to keyboard input. The following keys are bound:</p> <ul> <li>F , S , / : open search dialog</li> <li>P , , : go to previous page</li> <li>N , . : go to next page</li> </ul> <p>Let's say you want to bind some action to the X key. By using additional JavaScript, you can subscribe to the <code>keyboard$</code> observable and attach your custom event listener:</p> <code>docs/javascripts/shortcuts.js</code> <code>mkdocs.yml</code> <pre><code>keyboard$.subscribe(function(key) {\nif (key.mode === \"global\" &amp;&amp; key.type === \"x\") {\n/* Add custom keyboard handler here */\nkey.claim() // (1)!\n}\n})\n</code></pre> <ol> <li>The call to <code>key.claim()</code> will execute <code>preventDefault()</code> on the     underlying event, so the keypress will not propagate further and     touch other event listeners.</li> </ol> <pre><code>extra_javascript:\n- javascripts/shortcuts.js\n</code></pre>"},{"location":"setup/setting-up-navigation/#content-area-width","title":"Content area width","text":"<p>The width of the content area is set so the length of each line doesn't exceed 80-100 characters, depending on the width of the characters. While this is a reasonable default, as longer lines tend to be harder to read, it may be desirable to increase the overall width of the content area, or even make it stretch to the entire available space.</p> <p>This can easily be achieved with an additional style sheet and a few lines of CSS:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>.md-grid {\nmax-width: 1440px; /* (1)! */\n}\n</code></pre> <ol> <li> <p>If you want the content area to always stretch to the available screen     space, reset <code>max-width</code> with the following CSS:</p> <pre><code>.md-grid {\nmax-width: initial;\n}\n</code></pre> </li> </ol> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre> <ol> <li> <p>Prior to  6.2.0, navigation tabs had a slightly different behavior. All top-level pages (i.e. all top-level entries directly referring to a <code>*.md</code> file) defined inside the <code>nav</code> entry of <code>mkdocs.yml</code> were grouped under the first tab which received the title of the first page. This made it impossible to include a top-level page (or external link) as a tab item, as was reported in #1884 and #2072. From  6.2.0 on, navigation tabs include all top-level pages and sections.\u00a0\u21a9</p> </li> </ol>"},{"location":"setup/setting-up-site-analytics/","title":"Setting up site analytics","text":"<p>As with any other service offered on the web, understanding how your project documentation is actually used can be an essential success factor. Material for MkDocs natively integrates with Google Analytics and offers a customizable cookie consent and a feedback widget.</p>"},{"location":"setup/setting-up-site-analytics/#configuration","title":"Configuration","text":""},{"location":"setup/setting-up-site-analytics/#google-analytics","title":"Google Analytics","text":"<p> 7.1.8 \u00b7  Default: none</p> <p>Material for MkDocs integrates with both, Google Analytics 4 and the now phasing out Universal Analytics. Depending on the given property prefix, add the following lines to <code>mkdocs.yml</code>:</p>  Google Analytics 4 Universal Analytics <pre><code>extra:\nanalytics:\nprovider: google\nproperty: G-XXXXXXXXXX\n</code></pre> <pre><code>extra:\nanalytics:\nprovider: google\nproperty: UA-XXXXXXXX-X\n</code></pre> How to measure site search usage? <p>Besides page views and events, site search can be tracked to better understand how people use your documentation and what they expect to find. In order to enable site search tracking, the following steps are required:</p>  Google Analytics 4 Universal Analytics <ol> <li>Go to your Google Analytics admin settings</li> <li>Select the property for the respective tracking code</li> <li>Select the data streams tab and click the corresponding URL</li> <li>Click the gear icon within the enhanced measurement section</li> <li>Ensure that site search is enabled</li> </ol> <ol> <li>Go to your Google Analytics admin settings</li> <li>Select the property for the respective tracking code</li> <li>Go to the view settings tab</li> <li>Scroll down and enable site search settings</li> <li>Set the query parameter to <code>q</code></li> </ol>"},{"location":"setup/setting-up-site-analytics/#was-this-page-helpful","title":"Was this page helpful?","text":"<p> 8.4.0 \u00b7  Default: none</p> <p>A simple feedback widget can be included at the bottom of each page, encouraging users to give instant feedback whether a page was helpful or not. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>extra:\nanalytics: # (1)!\nfeedback:\ntitle: Was this page helpful?\nratings:\n- icon: material/emoticon-happy-outline\nname: This page was helpful\ndata: 1\nnote: &gt;-\nThanks for your feedback!\n- icon: material/emoticon-sad-outline\nname: This page could be improved\ndata: 0\nnote: &gt;- # (2)!\nThanks for your feedback! Help us improve this page by\nusing our &lt;a href=\"...\" target=\"_blank\" rel=\"noopener\"&gt;feedback form&lt;/a&gt;.\n</code></pre> <ol> <li> <p>This feature is natively integrated with Google Analytics,     which is why <code>provider</code> and <code>property</code> are also required. However, it's also     possible to provide a custom feedback integration.</p> </li> <li> <p>You can add arbitrary HTML tags to the note which is shown after the user     submitted the feedback, e.g. to link to a feedback form.</p> </li> </ol> <p>Both properties, <code>title</code> and <code>ratings</code>, are required. Note that it's allowed to define more than two ratings, e.g. to implement a 1-5 star rating. Since the feedback widget sends data to a third-party service, it is, of course, natively  integrated with the cookie consent feature1.</p> How to visualize the collected feedback ratings? <p>To visualize feedback ratings you'll need to create a custom report with Google Analytics that will quickly show you the worst- and best-rated pages of your project documentation.</p>  Google Analytics 4 Universal Analytics <ol> <li> <p>Go to your Google Analytics dashboard</p> </li> <li> <p>Go to the configure page on the left hand menu, then select     custom definitions</p> </li> <li> <p>Click the custom metrics tab and then create custom metrics,      enter the following values:</p> <ul> <li>Metric name: Page helpful</li> <li>Description: Was this page helpful?</li> <li>Event parameter: <code>data</code></li> <li>Unit of measurement: Standard</li> </ul> </li> <li> <p>Go to the explore page on the left hand menu, create a new     blank exploration</p> </li> <li> <p>Configure the report as follows:</p> <ul> <li>Dimensions: Add <code>Event name</code> and <code>Page location</code></li> <li>Metrics: Add <code>Event count</code> and <code>Page helpful</code>   (the custom metric created in step 3)</li> <li>Rows: <code>Page location</code></li> <li>Values: Drag in both <code>Event count</code> and <code>Page helpful</code></li> <li>Filters: Add a new filter for    <code>Event name / exactly matches / feedback</code></li> </ul> </li> </ol> <p>Delay in data availability</p> <p>The report may take 24 hours or longer to begin displaying data</p> <ol> <li>Go to your Google Analytics dashboard</li> <li>Open the customization panel on the left and go to custom reports</li> <li>Create a new custom report and set a custom title and name</li> <li>Add <code>Avg. Value</code> and <code>Total Events</code> to metric group</li> <li>Add <code>Event Label</code> to dimension drilldown</li> <li>Add <code>Event Category</code> to filters and filter for the value feedback</li> </ol> <p>Now, after you've saved the report and collected some feedback ratings, you'll have a list of all pages with the total number of ratings, and an average rating per page. This should help you identify pages that need to be improved:</p> <p></p> <p>The following properties are available for each rating:</p> <code>icon</code> <p> Default: none \u00b7  Required \u2013 This property must point to a valid icon path referencing any icon bundled with the theme, or the build will not succeed. Some popular combinations:</p> <ul> <li> +  \u2013 <code>material/emoticon-happy-outline</code> + <code>material/emoticon-sad-outline</code></li> <li> +  \u2013 <code>material/thumb-up-outline</code> + <code>material/thumb-down-outline</code></li> <li> +  \u2013 <code>material/heart</code> + <code>material/heart-broken</code></li> </ul> <code>name</code> <p> Default: none \u00b7  Required \u2013 The value of this property is shown on user interaction (i.e. keyboard focus or mouse hover), explaining the meaning of the rating behind the icon.</p> <code>data</code> <p> Default: none \u00b7  Required \u2013 The value of this property is sent as a data value with the custom event that is transmitted to Google Analytics2 (or any custom integration).</p> <code>note</code> <p> Default: none \u00b7  Required \u2013 The value of this property is shown after the user selected the rating. It may contain arbitrary HTML tags, which is especially useful to ask the user to provide more detailed feedback for the current page through a form. It's also possible to pre-fill forms with the URL and title of the current page by using the following placeholders:</p> <ul> <li><code>{url}</code> \u2013 Page URL</li> <li><code>{title}</code> \u2013 Page title</li> </ul> <pre><code>https://github.com/.../issues/new/?title=[Feedback]+{title}+-+{url}\n</code></pre> <p>In this example, when clicking the link, the user is redirected to the \"new  issue\" form of your repository, with a pre-filled title including the path of the current document, e.g.:</p> <pre><code>[Feedback] Setting up site analytics \u2013 /setup/setting-up-site-analytics/\n</code></pre> <p>An alternative to GitHub issues is Google Forms.</p>"},{"location":"setup/setting-up-site-analytics/#usage","title":"Usage","text":""},{"location":"setup/setting-up-site-analytics/#hiding-the-feedback-widget","title":"Hiding the feedback widget","text":"<p>The feedback widget can be hidden for a document with the front matter <code>hide</code> property. Add the following lines at the top of a Markdown file:</p> <pre><code>---\nhide:\n- feedback\n---\n# Document title\n...\n</code></pre>"},{"location":"setup/setting-up-site-analytics/#customization","title":"Customization","text":""},{"location":"setup/setting-up-site-analytics/#custom-site-analytics","title":"Custom site analytics","text":"<p>In order to integrate another analytics service provider offering a  JavaScript-based tracking solution, just follow the guide on theme extension and create a new partial in the <code>overrides</code> folder. The name of the partial is used to configure the custom integration via <code>mkdocs.yml</code>:</p> <code>overrides/partials/integrations/analytics/custom.html</code> <code>mkdocs.yml</code> <pre><code>&lt;script&gt;\n/* Add custom analytics integration here, e.g. */\nvar property = \"{{ config.extra.analytics.property }}\" // (1)!\n/* Wait for page to load and application to mount */\ndocument.addEventListener(\"DOMContentLoaded\", function() {\nlocation$.subscribe(function(url) {\n/* Add custom page event tracking here */ // (2)!\n})\n})\n&lt;/script&gt;\n</code></pre> <ol> <li>As an example, this variable receives the value set in <code>mkdocs.yml</code>,     which is <code>\"foobar\"</code> for <code>property</code>.</li> <li>If you're using instant loading, you can use the <code>location$</code>     observable to listen for navigation events, which always emits the     current <code>URL</code>.</li> </ol> <pre><code>extra:\nanalytics:\nprovider: custom\nproperty: foobar # (1)!\n</code></pre> <ol> <li>You can add arbitrary key-value combinations to configure your     custom integration. This is especially useful if you're sharing the     custom integration across multiple repositories.</li> </ol>"},{"location":"setup/setting-up-site-analytics/#custom-site-feedback","title":"Custom site feedback","text":"<p>A custom feedback widget integration just needs to process the events that are generated by users interacting with the feedback widget with the help of some additional JavaScript:</p> <code>docs/javascripts/feedback.js</code> <code>mkdocs.yml</code> <pre><code>var feedback = document.forms.feedback\nfeedback.addEventListener(\"submit\", function(ev) {\nev.preventDefault()\n/* Retrieve page and feedback value */\nvar page = document.location.pathname\nvar data = ev.submitter.getAttribute(\"data-md-value\")\n/* Send feedback value */\nconsole.log(page, data)\n})\n</code></pre> <pre><code>extra_javascript:\n- javascripts/feedback.js\n</code></pre> <p> </p> <ol> <li> <p>If the user doesn't accept the <code>analytics</code> cookie, the feedback widget is not shown.\u00a0\u21a9</p> </li> <li> <p>Note that for Google Analytics, the data value must be an integer.\u00a0\u21a9</p> </li> </ol>"},{"location":"setup/setting-up-site-search/","title":"Setting up site search","text":"<p>Material for MkDocs provides an excellent client-side search implementation, omitting the need for the integration of third-party services, which might not be compliant with privacy regulations. Moreover, search even works offline, allowing users to download your documentation.</p>","boost":1.05},{"location":"setup/setting-up-site-search/#configuration","title":"Configuration","text":"","boost":1.05},{"location":"setup/setting-up-site-search/#built-in-search-plugin","title":"Built-in search plugin","text":"<p> 0.1.0 \u00b7  Plugin</p> <p>The built-in search plugin integrates seamlessly with Material for MkDocs, adding multilingual client-side search with lunr and lunr-languages. It's  enabled by default, but must be re-added to <code>mkdocs.yml</code> when other plugins are used:</p> <pre><code>plugins:\n- search\n</code></pre> <p>The following configuration options are supported:</p> <code>lang</code> <p> Default: automatically set \u2013 This option allows to include the language-specific stemmers provided by lunr-languages. Note that Material for MkDocs will set this automatically based on the site language, but it may be overridden, e.g. to support multiple languages:</p> A single languageMultiple languages <pre><code>plugins:\n- search:\nlang: en\n</code></pre> <pre><code>plugins:\n- search:\nlang: # (1)!\n- en\n- de\n</code></pre> <ol> <li>Be aware that including support for other languages increases the     general JavaScript payload by around 20kb (before <code>gzip</code>) and by     another 15-30kb per language.</li> </ol> <p>The following languages are supported by lunr-languages:</p> <ul> <li><code>ar</code> \u2013 Arabic</li> <li><code>da</code> \u2013 Danish</li> <li><code>de</code> \u2013 German</li> <li><code>du</code> \u2013 Dutch</li> <li><code>en</code> \u2013 English</li> <li><code>es</code> \u2013 Spanish</li> <li><code>fi</code> \u2013 Finnish</li> <li><code>fr</code> \u2013 French</li> <li><code>hi</code> \u2013 Hindi</li> <li><code>hu</code> \u2013 Hungarian</li> <li><code>hy</code> \u2013 Armenian</li> <li><code>it</code> \u2013 Italian</li> <li><code>ja</code> \u2013 Japanese</li> <li><code>kn</code> - Kannada</li> <li><code>ko</code> \u2013 Korean</li> <li><code>no</code> \u2013 Norwegian</li> <li><code>pt</code> \u2013 Portuguese</li> <li><code>ro</code> \u2013 Romanian</li> <li><code>ru</code> \u2013 Russian</li> <li><code>sa</code> \u2013 Sanskrit</li> <li><code>sv</code> \u2013 Swedish</li> <li><code>ta</code> \u2013 Tamil</li> <li><code>te</code> \u2013 Telugu</li> <li><code>th</code> \u2013 Thai</li> <li><code>tr</code> \u2013 Turkish</li> <li><code>vi</code> \u2013 Vietnamese</li> <li><code>zh</code> \u2013 Chinese</li> </ul> <p>Material for MkDocs goes to great lengths to support languages that are not part of this list by automatically falling back to the stemmer yielding the best result.</p> <code>separator</code> <p> Default: automatically set \u2013 The separator for indexing and query tokenization can be customized, making it possible to index parts of words separated by other characters than whitespace and <code>-</code>, e.g. by including <code>.</code>:</p> <pre><code>plugins:\n- search:\nseparator: '[\\s\\-\\.]+'\n</code></pre> <p>With  9.0.0, a faster and more flexible tokenizer method is shipped, allowing for tokenizing with lookahead, which yields more influence on the way documents are indexed. As a result, we use the following separator setting for this site's search:</p> <pre><code>plugins:\n- search:\nseparator: '[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&amp;[lg]t;'\n</code></pre> <p>Broken into its parts, the separator induces the following behavior:</p> Special charactersCase changesVersion stringsHTML/XML tags <pre><code>[\\s\\-,:!=\\[\\]()\"/]+\n</code></pre> <p>The first part of the expression inserts token boundaries for each document before and after whitespace, hyphens, commas, brackets and other special characters. If several of those special characters are adjacent, they are treated as one.</p> <pre><code>(?!\\b)(?=[A-Z][a-z])\n</code></pre> <p>Many programming languages have naming conventions like <code>PascalCase</code> or <code>camelCase</code>. By adding this subexpression to the separator, words are split at case changes, tokenizing the word <code>PascalCase</code> into <code>Pascal</code> and <code>Case</code>.</p> <p> Read more on tokenizing case changes</p> <pre><code>\\.(?!\\d)\n</code></pre> <p>When adding <code>.</code> to the separator, version strings like <code>1.2.3</code> are split into <code>1</code>, <code>2</code> and <code>3</code>, which makes them undiscoverable via search. When using this subexpression, a small lookahead is introduced which will preserve version strings and keep them discoverable.</p> <p> Read more on tokenizing version numbers</p> <pre><code>&amp;[lg]t;\n</code></pre> <p>If your documentation includes HTML/XML code examples, you may want to allow users to find specific tag names. Unfortunately, the <code>&lt;</code> and <code>&gt;</code> control characters are encoded in code blocks as <code>&amp;lt;</code> and <code>&amp;gt;</code>. Adding this subexpression to the separator allows for just that.</p> <p> Read more on tokenizing HTML/XML tags</p>","boost":1.05},{"location":"setup/setting-up-site-search/#chinese-language-support","title":"Chinese language support","text":"<p> Sponsors only \u00b7  insiders-4.14.0 \u00b7  Experimental</p> <p>Insiders adds search support for the Chinese language (see our blog article from May 2022) by integrating with the text segmentation library jieba, which can be installed with <code>pip</code>.</p> <pre><code>pip install jieba\n</code></pre> <p>If jieba is installed, the built-in search plugin automatically detects Chinese characters and runs them through the segmenter. The following configuration options are available:</p> <code>jieba_dict</code> <p> insiders-4.17.2 \u00b7  Default: none \u2013 This option allows for specifying a custom dictionary to be used by jieba for segmenting text, replacing the default dictionary:</p> <pre><code>plugins:\n- search:\njieba_dict: dict.txt # (1)!\n</code></pre> <ol> <li> <p>The following alternative dictionaries are provided by jieba:</p> <ul> <li>dict.txt.small \u2013 \u5360\u7528\u5185\u5b58\u8f83\u5c0f\u7684\u8bcd\u5178\u6587\u4ef6</li> <li>dict.txt.big \u2013 \u652f\u6301\u7e41\u4f53\u5206\u8bcd\u66f4\u597d\u7684\u8bcd\u5178\u6587\u4ef6</li> </ul> </li> </ol> <code>jieba_dict_user</code> <p> insiders-4.17.2 \u00b7  Default: none \u2013 This option allows for specifying an additional user dictionary to be used by jieba for segmenting text, augmenting the default dictionary:</p> <pre><code>plugins:\n- search:\njieba_dict_user: user_dict.txt\n</code></pre> <p>User dictionaries can be used for tuning the segmenter to preserve technical terms.</p>","boost":1.05},{"location":"setup/setting-up-site-search/#search-suggestions","title":"Search suggestions","text":"<p> 7.2.0 \u00b7  Feature flag \u00b7  Experimental</p> <p>When search suggestions are enabled, the search will display the likeliest completion for the last word which can be accepted with the Right key. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- search.suggest\n</code></pre> <p>Searching for  search su yields search suggestions as a suggestion.</p>","boost":1.05},{"location":"setup/setting-up-site-search/#search-highlighting","title":"Search highlighting","text":"<p> 7.2.0 \u00b7  Feature flag \u00b7  Experimental</p> <p>When search highlighting is enabled and a user clicks on a search result, Material for MkDocs will highlight all occurrences after following the link. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- search.highlight\n</code></pre> <p>Searching for  code blocks highlights all occurrences of both terms.</p>","boost":1.05},{"location":"setup/setting-up-site-search/#search-sharing","title":"Search sharing","text":"<p> 7.2.0 \u00b7  Feature flag</p> <p>When search sharing is activated, a  share button is rendered next to the reset button, which allows to deep link to the current search query and result. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- search.share\n</code></pre> <p>When a user clicks the share button, the URL is automatically copied to the clipboard.</p>","boost":1.05},{"location":"setup/setting-up-site-search/#usage","title":"Usage","text":"","boost":1.05},{"location":"setup/setting-up-site-search/#search-boosting","title":"Search boosting","text":"<p> 8.3.0</p> <p>Pages can be boosted in search with the front matter <code>search.boost</code> property, which will make them rank higher. Add the following lines at the top of a Markdown file:</p>  Rank up Rank down <pre><code>---\nsearch:\nboost: 2 # (1)!\n---\n# Document title\n...\n</code></pre> <ol> <li> When boosting pages, be gentle and start with     low values.</li> </ol> <pre><code>---\nsearch:\nboost: 0.5\n---\n# Document title\n...\n</code></pre>","boost":1.05},{"location":"setup/setting-up-site-search/#search-exclusion","title":"Search exclusion","text":"<p> 9.0.0 \u00b7  Experimental</p> <p>Pages can be excluded from search with the front matter <code>search.exclude</code> property, removing them from the index. Add the following lines at the top of a  Markdown file:</p> <pre><code>---\nsearch:\nexclude: true\n---\n# Document title\n...\n</code></pre>","boost":1.05},{"location":"setup/setting-up-site-search/#excluding-sections","title":"Excluding sections","text":"<p>When Attribute Lists is enabled, specific sections of pages can be excluded from search by adding the <code>data-search-exclude</code> pragma after a Markdown heading:</p> <code>docs/page.md</code> <code>search_index.json</code> <pre><code># Document title\n## Section 1\nThe content of this section is included\n\n## Section 2 { data-search-exclude }\nThe content of this section is excluded\n</code></pre> <pre><code>{\n...\n\"docs\": [\n{\n\"location\":\"page/\",\n\"text\":\"\",\n\"title\":\"Document title\"\n},\n{\n\"location\":\"page/#section-1\",\n\"text\":\"&lt;p&gt;The content of this section is included&lt;/p&gt;\",\n\"title\":\"Section 1\"\n}\n]\n}\n</code></pre>","boost":1.05},{"location":"setup/setting-up-site-search/#excluding-blocks","title":"Excluding blocks","text":"<p>When Attribute Lists is enabled, specific sections of pages can be excluded from search by adding the <code>data-search-exclude</code> pragma after a Markdown inline- or block-level element:</p> <code>docs/page.md</code> <code>search_index.json</code> <pre><code># Document title\nThe content of this block is included\n\nThe content of this block is excluded\n{ data-search-exclude }\n</code></pre> <pre><code>{\n...\n\"docs\": [\n{\n\"location\":\"page/\",\n\"text\":\"&lt;p&gt;The content of this block is included&lt;/p&gt;\",\n\"title\":\"Document title\"\n}\n]\n}\n</code></pre>","boost":1.05},{"location":"setup/setting-up-social-cards/","title":"Setting up social cards","text":"<p>Material for MkDocs can automatically create beautiful social cards for your  documentation, which appear as link previews on social media platforms. You  can select from several pre-designed layouts or create custom layouts to match your unique style and branding.</p> <p></p> <p>Social card of our formatting reference</p>"},{"location":"setup/setting-up-social-cards/#configuration","title":"Configuration","text":""},{"location":"setup/setting-up-social-cards/#built-in-social-plugin","title":"Built-in social plugin","text":"<p> 8.5.0 \u00b7  Plugin \u00b7  Experimental</p> <p>The built-in social plugin automatically generate a custom preview image for  each page. Install all dependencies for image processing1 and add the  following lines to <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n- social\n</code></pre> <p>Note that Insiders contains a ground up rewrite of the social plugin that  generates images much more efficiently in parallel and allows to build  entirely custom layouts.</p> <p>The following configuration options are available:</p> <code>enabled</code> <p> Default: <code>true</code> \u2013 This option specifies whether the plugin is enabled when building your project. If you want to speed up local builds, you can use an environment variable:</p> <pre><code>plugins:\n- social:\nenabled: !ENV [CI, false]\n</code></pre> <code>concurrency</code> <p> insiders-4.33.0 \u00b7   Default: number of CPUs \u2013 How many CPUs the plugin is allowed to use when generating social cards. With more CPUs, the plugin can do more work in the same time, thus complete generation faster. Concurrent processing can be disabled with:</p> <pre><code>plugins:\n- social:\nconcurrency: 1\n</code></pre>"},{"location":"setup/setting-up-social-cards/#social-cards","title":"Social cards","text":"<p>The following configuration options are available for card generation:</p> <code>cards</code> <p> Default: <code>true</code> \u2013 This option specifies whether to generate social card images. If you want to switch the plugin off, e.g. for local builds, you can use an environment variable:</p> <pre><code>plugins:\n- social:\ncards: !ENV [CI, false]\n</code></pre> <code>cards_dir</code> <p> Default: <code>assets/images/social</code> \u2013 This option specifies where the generated social cards will be stored. While it's usually not necessary to change this option, change it with:</p> <pre><code>plugins:\n- social:\ncards_dir: assets/images/social\n</code></pre> <code>cards_color</code> \u2013  Deprecated, use <code>cards_layout_options</code> <p> Default: <code>theme.palette.primary</code> \u2013  This option specifies the colors for the background <code>fill</code> and foreground <code>text</code> when generating the social card:</p> <pre><code>plugins:\n- social:\ncards_color:\nfill: \"#0FF1CE\"\ntext: \"#FFFFFF\"\n</code></pre> <code>cards_font</code> \u2013  Deprecated, use <code>cards_layout_options</code> <p> Default: <code>theme.font.text</code> \u2013 This option specifies which font to use for rendering the social card, which can be any font hosted on Google Fonts:</p> <pre><code>plugins:\n- social:\ncards_font: Ubuntu\n</code></pre> <code>cards_layout_dir</code> <p> insiders-4.33.0 \u00b7  Default: none \u2013 This option specifies where the social plugin should try to resolve custom layouts from, taking precedence over the included layouts:</p> <pre><code>plugins:\n- social:\ncards_layout_dir: layouts\n</code></pre> <code>cards_layout</code> <p> insiders-4.33.0 \u00b7  Default: <code>default</code> \u2013 Layout specification the social card should use. The plugin includes the following layouts which make use of the color palette and font:</p> <code>default</code><code>default/variant</code><code>default/accent</code><code>default/invert</code> <pre><code>plugins:\n- social:\ncards_layout: default\n</code></pre> <p>This layout uses the configured primary color as a background:</p> <p></p> <pre><code>plugins:\n- social:\ncards_layout: default/variant\n</code></pre> <p>This layout includes the page icon as a watermark, if defined:</p> <p></p> <pre><code>plugins:\n- social:\ncards_layout: default/accent\n</code></pre> <p>This layout uses the configured accent color as a background:</p> <p></p> <pre><code>plugins:\n- social:\ncards_layout: default/invert\n</code></pre> <p>This layout inverts the background and foreground colors:</p> <p></p> <p>All <code>default</code> layouts make use of the following template variables:</p> <ul> <li> \u2013 <code>config.site_name</code></li> <li> \u2013 <code>page.meta.title</code> or <code>page.title</code></li> <li> \u2013 <code>page.meta.description</code> or <code>config.site_description</code></li> <li> \u2013 <code>theme.logo</code> or <code>theme.icon.logo</code></li> </ul> <code>cards_layout_options</code> <p> 9.1.10 \u00b7  Default: none \u2013 This option allows to set parameters as provided by the layout specification. For custom layouts, this key can be used to provide layout-specific options, making layouts entirely configurable.</p> <p>All <code>default</code> layouts expose the following parameters:</p> <code>background_color</code> <p>Set a background color, which can be a CSS color keyword, or a 3, 4, 6 or 8 letter HEX color code. Alpha channels are supported as well:</p> <pre><code>plugins:\n- social:\ncards_layout_options:\nbackground_color: \"#0FF1CE\"\n</code></pre> <code>background_image</code> <p> insiders-4.33.0 \u2013 Set a background image.  If a <code>background_color</code> is set, like for the <code>default</code> layouts, the image is tinted (overlayed) with the color. Thus, the background color must be (partially) transparent for the image to become visible:</p> <pre><code>plugins:\n- social:\ncards_layout_options:\nbackground_color: \"#00000000\"\nbackground_image: layouts/background.png\n</code></pre> <p>The path of the image must be defined relative to the project root.</p> <code>color</code> <p>Set a foreground color, which can be a CSS color keyword, or a 3, 4, 6 or 8 letter HEX color code. The color is primarily used to tint text and icons:</p> <pre><code>plugins:\n- social:\ncards_layout_options:\ncolor: \"#0FF1CE\"\n</code></pre> <code>font_family</code> <p>Set a font family. This overrides the font that is set as part of the theme configuration. The built-in social plugin will automatically download the font from Google Fonts:</p> <pre><code>plugins:\n- social:\ncards_layout_options:\nfont_family: Ubuntu\n</code></pre> <code>cards_include</code> <p> insiders-4.35.0 \u00b7  Default: none \u2013 This option allows to only generate social cards for certain subsections of your documentation, e.g. to generate different cards for different subfolders with multiple instances of the plugin:</p> <pre><code>plugins:\n- social:\ncards_include:\n- blog/*\n</code></pre> <code>cards_exclude</code> <p> Default: none \u2013 This option allows to exclude certain subsections of your documentation from generating social cards:</p> <pre><code>plugins:\n- social:\ncards_exclude:\n- changelog/*.md\n</code></pre>"},{"location":"setup/setting-up-social-cards/#debugging","title":"Debugging","text":"<p>The following configuration options are available for debugging:</p> <code>debug</code> <p> insiders-4.33.0 \u00b7  Default: <code>false</code> \u2013 This option enables a special debug mode, which renders each layer with an outline and its <code>x</code> and <code>y</code> offset in order to understand how the layout is composed, and optionally renders a grid for easier alignment:</p> <pre><code>plugins:\n- social:\ndebug: true\n</code></pre> With debug modeWithout <p></p> <p></p> <code>debug_on_build</code> <p> insiders-4.34.1 \u00b7  Default: <code>false</code> \u2013 Whether debug mode should be automatically disabled when building your site with <code>mkdocs build</code>. It can be changed with:</p> <pre><code>plugins:\n- social:\ndebug_on_build: true\n</code></pre> <p>This setting is just intended to be a safety net, so that when building your site social cards definitely won't contain the dot grid or layer outlines by accident.</p> <code>debug_grid</code> <p> insiders-4.33.0 \u00b7  Default: <code>true</code> \u2013 This option enables the rendering of a dot grid when <code>debug</code> is enabled (see screenshot above). The grid can be switched off with:</p> <pre><code>plugins:\n- social:\ndebug_grid: false\n</code></pre> <code>debug_grid_step</code> <p> insiders-4.33.0 \u00b7  Default: <code>32</code> \u2013 This option specifies the step size of the grid in pixels, if enabled, which can be used to align elements. It can be changed with:</p> <pre><code>plugins:\n- social:\ndebug_grid_step: 64\n</code></pre> <code>debug_color</code> <p> insiders-4.33.0 \u00b7  Default: <code>grey</code> \u2013 This option sets the color of the layer outlines and the grid which are rendered when <code>debug</code> is enabled. It can be changed with:</p> <pre><code>plugins:\n- social:\ndebug_color: yellow\n</code></pre>"},{"location":"setup/setting-up-social-cards/#caching","title":"Caching","text":"<p>The built-in social plugin implements an intelligent caching mechanism, ensuring that social cards are only re-generated when they're not contained in the cache or their contents change. If any of the variables used in a layout  changes, the plugin will detect it and re-generate the card.</p> <p>The following configuration options are available for caching:</p> <code>cache</code> <p> insiders-4.33.0 \u00b7  Default: <code>true</code> \u2013 Whether the plugin queries its cache for an existing artifact before starting a generation job. It's normally not necessary to change this setting, except for when debugging the plugin itself. Caching can be disabled with:</p> <pre><code>plugins:\n- social:\ncache: false\n</code></pre> <code>cache_dir</code> <p> Default: <code>.cache/plugins/social</code> \u2013 This option specifies the file system location of the plugin's cache. It's normally not necessary to change this setting, except for when debugging the plugin itself. The cache directory can be changed with:</p> <pre><code>plugins:\n- social:\ncache_dir: .cache/plugins/social\n</code></pre> <p>By default, all built-in plugins that implement caching will create a <code>.cache</code> directory in the same folder your <code>mkdocs.yml</code> resides, and create subfolders to not interfere with each other. If you use multiple instances of this plugin, it could be necessary to change this setting.</p>"},{"location":"setup/setting-up-social-cards/#usage","title":"Usage","text":"<p>If you want to adjust the title or set a custom description for the social card, you can set the front matter <code>title</code> and <code>description</code> properties, which take  precedence over the default values.</p> <ul> <li>Changing the title</li> <li>Changing the description</li> </ul>"},{"location":"setup/setting-up-social-cards/#choosing-a-font","title":"Choosing a font","text":"<p>Some fonts do not contain CJK characters, like for example the default font, <code>Roboto</code>. In case your <code>site_name</code>, <code>site_description</code>, or page title contain CJK characters, choose another font from Google Fonts which comes with CJK characters, e.g. one from the <code>Noto Sans</code> font family:</p> Chinese (Simplified)Chinese (Traditional)JapaneseKorean <pre><code>plugins:\n- social:\ncards_font: Noto Sans SC\n</code></pre> <pre><code>plugins:\n- social:\ncards_font: Noto Sans TC\n</code></pre> <pre><code>plugins:\n- social:\ncards_font: Noto Sans JP\n</code></pre> <pre><code>plugins:\n- social:\ncards_font: Noto Sans KR\n</code></pre>"},{"location":"setup/setting-up-social-cards/#customization","title":"Customization","text":"<p> Sponsors only \u00b7  insiders-4.33.0 \u00b7  Experimental</p> <p>Insiders ships a ground up rewrite of the built-in social plugin and introduces a brand new layout system based on a combination of YAML and Jinja templates \u2013 the same engine Material for MkDocs uses for HTML templating \u2013 allowing for the creation of complex custom layouts:</p> Layer 0 Layer 1 Layer 2 Layer 3 Layer 4 Layer 5 <p>Social cards are composed of layers, analogous to how they are represented in graphic design software such as Adobe Photoshop. As many layers are common across the cards generated for each page (e.g., backgrounds or logos), the built-in social plugin can automatically deduplicate layers and render them just once, substantially accelerating card generation. The generated cards are cached to ensure they are only regenerated when their contents change.</p> <p>Layouts are written in YAML syntax. Before starting to create a custom layout, it is a good idea to study the pre-designed layouts (link to Insiders repository), in order to get a better understanding of how they work. Then, create a new layout and reference it in <code>mkdocs.yml</code>:</p> <code>layouts/custom.yml</code> <code>mkdocs.yml</code> <pre><code>size: { width: 1200, height: 630 }\nlayers: []\n</code></pre> <pre><code>plugins:\n- social:\ncards_layout_dir: layouts\ncards_layout: custom\ndebug: true\n</code></pre> <p>Note that the <code>.yml</code> file extension should be omitted. Next, run <code>mkdocs serve</code>, and see how the <code>.cache</code> directory is populated with the generated cards. Open any card in your editor, so you can see your changes immediately. Since we haven't defined any layers, the cards are transparent.</p> <p>The following sections explain how to create custom layouts.</p>"},{"location":"setup/setting-up-social-cards/#size-and-offset","title":"Size and offset","text":"<p>Each layer has an associated size and offset, which is defined in pixels. The <code>size</code> is defined by a <code>width</code> and <code>height</code> property, and the <code>offset</code> by <code>x</code> and <code>y</code> properties:</p> <pre><code>size: { width: 1200, height: 630 }\nlayers:\n- size: { width: 1200, height: 630 }\noffset: { x: 0, y: 0 }\n</code></pre> <p>If the <code>size</code> is omitted, it defaults to the size of the layout. If the <code>offset</code> is omitted, it defaults to the top left corner, which is the defaut <code>origin</code>. Saving the layout and reloading renders:</p> <p></p> <p>The layer outline and grid are visible because we enabled <code>debug</code> mode in <code>mkdocs.yml</code>. The top left shows the layer index and offset, which is useful for alignment and composition.</p>"},{"location":"setup/setting-up-social-cards/#origin","title":"Origin","text":"<p> insiders-4.35.0 \u00b7  Experimental</p> <p>The <code>origin</code> for the <code>x</code> and <code>y</code> values can be changed, so that the layer is aligned to one of the edges or corners of the layout, e.g., to the bottom right corner of the layout:</p> <pre><code>size: { width: 1200, height: 630 }\nlayers:\n- size: { width: 1200, height: 630 }\noffset: { x: 0, y: 0 }\norigin: end bottom\n</code></pre> <p>The following table shows the supported values:</p> Origin <code>start top</code> <code>center top</code> <code>end top</code> <code>start center</code> <code>center</code> <code>end center</code> <code>start bottom</code> <code>center bottom</code> <code>end bottom</code>      Supported values for origin"},{"location":"setup/setting-up-social-cards/#backgrounds","title":"Backgrounds","text":"<p>Each layer can be assigned a background color and image. If both are given, the color is rendered on top of the image, allowing for semi-transparent, tinted backgrounds:</p> Background colorBackground imageBackground image, tinted <pre><code>size: { width: 1200, height: 630 }\nlayers:\n- background:\ncolor: \"#4051b5\"\n</code></pre> <p></p> <pre><code>size: { width: 1200, height: 630 }\nlayers:\n- background:\nimage: layouts/background.jpg\n</code></pre> <p></p> <pre><code>size: { width: 1200, height: 630 }\nlayers:\n- background:\nimage: layouts/background.jpg\ncolor: \"#4051b5ee\" # (1)!\n</code></pre> <ol> <li>The color value can be set to a CSS color keyword, or a 3, 4, 6 or 8     letter HEX color code, allowing for semi-transparent layers.</li> </ol> <p></p> <p>Background images are automatically scaled to fit the layer while preserving aspect-ratio. Notice how we omitted <code>size</code> and <code>offset</code>, because we want to fill the entire area of the social card.</p>"},{"location":"setup/setting-up-social-cards/#typography","title":"Typography","text":"<p>Now, we can add dynamic typography that is sourced from Markdown files - this is the actual raison d'\u00eatre of the built-in social plugin. Jinja templates are used to render a text string that is then added to the image:</p> <pre><code>size: { width: 1200, height: 630 }\nlayers:\n- size: { width: 832, height: 310 }\noffset: { x: 62, y: 160 }\ntypography:\ncontent: \"{{ page.title }}\" # (1)!\nalign: start\ncolor: white\nline:\namount: 3\nheight: 1.25\nfont:\nfamily: Roboto\nstyle: Bold\n</code></pre> <ol> <li> <p>The following variables can be used in Jinja templates:</p> <ul> <li><code>config.*</code></li> <li><code>page.*</code></li> <li><code>layout.*</code></li> </ul> <p>The author is free in defining <code>layout.*</code> options, which can be used to pass arbitrary data to the layout from <code>mkdocs.yml</code>.</p> </li> </ol> <p>This renders a text layer with the title of the page with a line height of 1.25, and a maximum number of 3 lines. The plugin automatically computes the font size from the line height, the number of lines, and font metrics like ascender and descender.2 This renders:</p> <p></p>"},{"location":"setup/setting-up-social-cards/#overflow","title":"Overflow","text":"<p>If the text overflows the layer, there are two possible behaviors: either the text is automatically truncated and shortened with an ellipsis, or the text is automatically scaled down to fit the layer:</p> <pre><code># If we use a very long headline, we can see how the text will be truncated\n</code></pre>  Ellipsis Shrink <p></p> <p></p> <p>While truncating with an ellipsis is the default, auto-shrinking can be enabled  by setting <code>overflow</code> to <code>shrink</code>:</p> <pre><code>size: { width: 1200, height: 630 }\nlayers:\n- size: { width: 832, height: 310 }\noffset: { x: 62, y: 160 }\ntypography:\ncontent: \"{{ page.title }}\"\noverflow: shrink\nalign: start\ncolor: white\nline:\namount: 3\nheight: 1.25\nfont:\nfamily: Roboto\nstyle: Bold\n</code></pre>"},{"location":"setup/setting-up-social-cards/#alignment","title":"Alignment","text":"<p>Text can be aligned to all corners and edges of the layer. For example, if we want to align the text to the middle of the layer, we can set <code>align</code> to  <code>start center</code>, which will render as:</p> <p></p> <p>The following table shows the supported values:</p> Alignment <code>start top</code> <code>center top</code> <code>end top</code> <code>start center</code> <code>center</code> <code>end center</code> <code>start bottom</code> <code>center bottom</code> <code>end bottom</code>      Supported values for text alignment"},{"location":"setup/setting-up-social-cards/#font","title":"Font","text":"<p>The built-in social plugin integrates with Google Fonts and will automatically download the font files for you. The <code>font</code> property accepts a <code>family</code> and <code>style</code> property, where the <code>family</code> must be set to the name of the font, and the <code>style</code> to one of the supported font styles. For example, setting <code>family</code> to <code>Roboto</code> will automatically download the following files:</p> <pre><code>.cache/plugins/social/fonts\n\u2514\u2500 Roboto/\n    \u251c\u2500 Black.ttf\n    \u251c\u2500 Black Italic.ttf\n    \u251c\u2500 Bold.ttf\n    \u251c\u2500 Bold Italic.ttf\n    \u251c\u2500 Italic.ttf\n    \u251c\u2500 Light.ttf\n    \u251c\u2500 Light Italic.ttf\n    \u251c\u2500 Medium.ttf\n    \u251c\u2500 Medium Italic.ttf\n    \u251c\u2500 Regular.ttf\n    \u251c\u2500 Thin.ttf\n    \u2514\u2500 Thin Italic.ttf\n</code></pre> <p>In that case, the author can use <code>Bold</code> or <code>Medium Italic</code> as the <code>style</code>. If the font style specified in the layer is not part of the font family, the font always falls back to <code>Regular</code> and prints a warning in <code>debug</code> mode, as <code>Regular</code> is included with all font families.</p>"},{"location":"setup/setting-up-social-cards/#icons","title":"Icons","text":"<p>Authors can leverage the full range of icons that are shipped with Material for MkDocs, or even provide custom icons by using theme extension and going through the process described in the guide on additional icons. Icons can even be tinted by using the <code>color</code> property:</p> <pre><code>size: { width: 1200, height: 630 }\nlayers:\n- background:\ncolor: \"#4051b5\"\n- size: { width: 144, height: 144 }\noffset: { x: 992, y: 64 }\nicon:\nvalue: material/cat\ncolor: white\n</code></pre> <p>This will render the icon in the top right corner of the social card:</p> <p></p> <p>The possibilities are endless. For example, icons can be used to draw shapes like circles:</p> <pre><code>size: { width: 1200, height: 630 }\nlayers:\n- background:\ncolor: \"#4051b5\"\n- size: { width: 2400, height: 2400 }\noffset: { x: -1024, y: 64 }\nicon:\nvalue: material/circle\ncolor: \"#5c6bc0\"\n- size: { width: 1800, height: 1800 }\noffset: { x: 512, y: -1024 }\nicon:\nvalue: material/circle\ncolor: \"#3949ab\"\n</code></pre> <p>This will add two circles to the background:</p> <p></p> <p>Are you missing something? Please open a discussion and let us know!</p> <ol> <li> <p>The awesome thing about social cards is that they are generated during  build time and directly distributed with your documentation, no external  services involved. While it would technically be simpler to generate  social cards using a web browser and an automation framework like  Puppeteer, it would add further liabilities to the toolchain, with the  potential to make build pipelines more complex and resource intense.</p> <p>For this reason, Material for MkDocs again follows its core principle of  making it as simple and powerful as possible, providing an easy-to-use  framework for building custom layouts using Python image processing  libraries.\u00a0\u21a9</p> </li> <li> <p>If the plugin would require the author to specify the font size and line height manually, it would be impossible to guarantee that the text fits into the layer. For this reason we implemented a declarative approach, where the author specifies the desired line height and number of lines, and the plugin computes the font size automatically.\u00a0\u21a9</p> </li> </ol>"},{"location":"setup/setting-up-tags/","title":"Setting up tags","text":"<p>Material for MkDocs adds first-class support for categorizing pages with tags, which adds the possibility to group related pages and make them discoverable via search and a dedicated tags index. If your documentation is large, tags can help to discover relevant information faster.</p>"},{"location":"setup/setting-up-tags/#configuration","title":"Configuration","text":""},{"location":"setup/setting-up-tags/#built-in-tags-plugin","title":"Built-in tags plugin","text":"<p> 8.2.0 \u00b7  Plugin</p> <p>The built-in tags plugin adds the ability to categorize any page with tags as part of the front matter of the page. In order to add support for tags, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n- tags\n</code></pre> <p>The following configuration options are available:</p> <code>enabled</code> <p> Default: <code>true</code> \u2013 This option specifies whether the plugin is enabled when building your project. If you want to speed up local builds, you can use an environment variable:</p> <pre><code>plugins:\n- tags:\nenabled: !ENV [CI, false]\n</code></pre> <code>tags_file</code> <p> Default: none \u2013 This option specifies which page should be used to render the tags index. See the section on adding a tags  index for more information. If this option is specified, tags become clickable, pointing to the corresponding section in the tags index:</p> <pre><code>plugins:\n- tags:\ntags_file: tags.md\n</code></pre> <p>The page holding the tags index can be linked anywhere in the <code>nav</code> section of <code>mkdocs.yml</code>. Note, however, that this options is not required \u2013 only use it if you want a tags index page.</p> <code>tags_extra_files</code> <p> insiders-4.20.0 \u00b7   Default: none \u2013 This option specifies additional pages, i.e. to render subsets of the tags index, in order to provide scoped tags indexes for  specific sections:</p> <pre><code>plugins:\n- tags:\ntags_extra_files:\ncompatibility.md:\n- compat # (1)!\nweb.md:\n- html\n- js\n- css\n</code></pre> <ol> <li> <p>Each page can be assigned a list of tag identifiers, which must be     defined as part of <code>extra.tags</code> in <code>mkdocs.yml</code>:</p> <pre><code>extra:\ntags:\nCompatibility: compat\nHTML5: html\nJavaScript: js\nCSS: css\n</code></pre> <p>In this example, all pages with the tag <code>Compatibility</code> will be included  in the additional tags index on <code>compatibility.md</code>, all pages defining at least one of the tags <code>HTML5</code>, <code>JavaScript</code> or <code>CSS</code> will be included in the additional tags index on <code>web.md</code>.</p> </li> </ol> <p>Note that the values listed under each tags extra file must be alphanumeric tag identifiers, not tags themselves. See #3864 for more information.</p> <code>tags_slugify</code> <p> insiders-4.25.0 \u00b7   Default: <code>headerid.slugify</code> \u2013 This option specifies which function to use for  generating URL-compatible slugs from tags. Python Markdown Extensions  includes several Unicode-aware slug functions which are a good choice for  non-ASCII languages:</p> UnicodeUnicode, case-sensitive <pre><code>plugins:\n- tags:\ntags_slugify: !!python/object/apply:pymdownx.slugs.slugify\nkwds:\ncase: lower\n</code></pre> <pre><code>plugins:\n- tags:\ntags_slugify: !!python/object/apply:pymdownx.slugs.slugify\n</code></pre> <code>tags_slugify_separator</code> <p> insiders-4.25.0 \u00b7   Default: <code>-</code> \u2013 This option specifies the separator which is used by the slug function. By default, a hyphen is used, but it can be changed to any string:</p> <pre><code>plugins:\n- tags:\ntags_slugify_separator: \"-\"\n</code></pre> <code>tags_compare</code> <p> insiders-4.26.2 \u00b7  Default: <code>None</code> \u2013 This option specifies which function to use when comparing tag values for sorting. If you wish to compare tags irregardless of casing, use:</p> <pre><code>plugins:\n- tags:\ntags_compare: !!python/name:material.plugins.tags.casefold\n</code></pre> <p>You can also define your own comparison function which must return a tag value (as a string) that is used for sorting, and reference it accordingly.</p> <code>tags_compare_reverse</code> <p> insiders-4.26.2 \u00b7  Default: <code>false</code> \u2013 This option specifies whether tags are sorted in reverse order. It is mainly provided for completeness. To change direction, use:</p> <pre><code>plugins:\n- tags:\ntags_compare_reverse: true\n</code></pre> <code>tags_allowed</code> <p> insiders-4.25.0 \u00b7   Default: none \u2013 This option allows the author to define explicitly which tags are allowed to be used on pages. If this setting is omitted, the built-in tags plugin won't check tag names. Use this option to define a list of tags in order to catch typos:</p> <pre><code>plugins:\n- tags:\ntags_allowed:\n- HTML5\n- JavaScript\n- CSS\n</code></pre>"},{"location":"setup/setting-up-tags/#tag-icons-and-identifiers","title":"Tag icons and identifiers","text":"<p> 8.5.0 \u00b7  Experimental</p> <p>Each tag can be associated with an icon, which is then rendered inside the tag. Before assigning icons to tags, associate each tag with a unique identifier, by adding the following to <code>mkdocs.yml</code>:</p> <pre><code>extra:\ntags:\n&lt;tag&gt;: &lt;identifier&gt; # (1)!\n</code></pre> <ol> <li> <p>The identifier can only include alphanumeric characters, as well as dashes     and underscores. For example, if you have a tag <code>Compatibility</code>, you can     set <code>compat</code> as an identifier:</p> <pre><code>extra:\ntags:\nCompatibility: compat\n</code></pre> <p>Identifiers can be reused between tags. Tags which are not explicitly associated will use the default tag icon which is </p> </li> </ol> <p>Next, each identifier can be associated with an icon, even a custom icon, by adding the following lines to <code>mkdocs.yml</code> under the <code>theme.icon</code> configuration  setting:</p> Tag iconTag default icon <pre><code>theme:\nicon:\ntag:\n&lt;identifier&gt;: &lt;icon&gt; # (1)!\n</code></pre> <ol> <li> <p>Enter a few keywords to find the perfect icon using our icon search and     click on the shortcode to copy it to your clipboard:</p> <p> <ol></ol> </p> </li> </ol> <pre><code>theme:\nicon:\ntag:\ndefault: &lt;icon&gt;\n</code></pre> Expand to inspect example <pre><code>theme:\nicon:\ntag:\nhtml: fontawesome/brands/html5\njs: fontawesome/brands/js\ncss:  fontawesome/brands/css3\nextra:\ntags:\nHTML5: html\nJavaScript: js\nCSS: css\n</code></pre>"},{"location":"setup/setting-up-tags/#usage","title":"Usage","text":""},{"location":"setup/setting-up-tags/#adding-tags","title":"Adding tags","text":"<p>When the built-in tags plugin is enabled, tags can be added for a document with the front matter <code>tags</code> property. Add the following lines at the top of a  Markdown file:</p> <pre><code>---\ntags:\n  - HTML5\n  - JavaScript\n  - CSS\n---\n\n...\n</code></pre> <p>The page will now render with those tags above the main headline and within the search preview, which now allows to find pages by tags.</p> How to set tags for an entire folder? <p>With the help of the built-in meta plugin, you can ensure that tags are set for an entire section and all nested pages, by creating a <code>.meta.yml</code> file in the corresponding folder with the following content:</p> <pre><code>tags:\n- HTML5\n- JavaScript\n- CSS\n</code></pre> <p>The tags set in <code>.meta.yml</code> are merged and deduplicated with the tags defined for a page, which means you can define common tags in <code>.meta.yml</code> and then add specific tags for each page. The tags in <code>.meta.yml</code> are appended.</p>"},{"location":"setup/setting-up-tags/#adding-a-tags-index","title":"Adding a tags index","text":"<p>The built-in tags plugin allows to define a file to render a tags index, which can be any page that is part of the <code>nav</code> section. To add a tags index, create a page, e.g. <code>tags.md</code>:</p> <pre><code># Tags\nFollowing is a list of relevant tags:\n\n[TAGS]\n</code></pre> <p>The <code>[TAGS]</code> marker specifies the position of the tags index, i.e. it is replaced with the actual tags index when the page is rendered. You can include arbitrary content before and after the marker:</p> <p></p>"},{"location":"setup/setting-up-tags/#hiding-tags-on-a-page","title":"Hiding tags on a page","text":"<p>While the tags are rendered above the main headline, sometimes, it might be desirable to hide them for a specific page, which can be achieved with the front matter <code>hide</code> property:</p> <pre><code>---\nhide:\n- tags\n---\n# Document title\n...\n</code></pre>"},{"location":"setup/setting-up-the-footer/","title":"Setting up the footer","text":"<p>The footer of your project documentation is a great place to add links to websites or platforms you or your company are using as additional marketing channels, e.g.  or , which you can easily configure via <code>mkdocs.yml</code>.</p>"},{"location":"setup/setting-up-the-footer/#configuration","title":"Configuration","text":""},{"location":"setup/setting-up-the-footer/#navigation","title":"Navigation","text":"<p> 9.0.0 \u00b7  Feature flag</p> <p>The footer can include links to the previous and next page of the current page. If you wish to enable this behavior, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- navigation.footer\n</code></pre>"},{"location":"setup/setting-up-the-footer/#social-links","title":"Social links","text":"<p> 1.0.0 \u00b7  Default: none</p> <p>Social links are rendered next to the copyright notice as part of the footer of your project documentation. Add a list of social links in <code>mkdocs.yml</code> with:</p> <ol> <li> <p>Enter a few keywords to find the perfect icon using our icon search and     click on the shortcode to copy it to your clipboard:</p> <p> <ol></ol> </p> </li> </ol> <p>The following properties are available for each link:</p> <code>icon</code> <p> Default: none \u00b7  Required \u2013 This property must contain a valid path to any icon bundled with the theme, or the build will not succeed. Some popular choices:</p> <ul> <li> \u2013 <code>fontawesome/brands/mastodon</code> automatically adds <code>rel=me</code></li> <li> \u2013 <code>fontawesome/brands/twitter</code></li> <li> \u2013 <code>fontawesome/brands/github</code></li> <li> \u2013 <code>fontawesome/brands/docker</code></li> <li> \u2013 <code>fontawesome/brands/facebook</code></li> <li> \u2013 <code>fontawesome/brands/medium</code></li> <li> \u2013 <code>fontawesome/brands/instagram</code></li> <li> \u2013 <code>fontawesome/brands/linkedin</code></li> <li> \u2013 <code>fontawesome/brands/pied-piper-alt</code></li> <li> \u2013 <code>fontawesome/brands/slack</code></li> <li> \u2013 <code>fontawesome/brands/discord</code></li> </ul> <code>link</code> <p> Default: none \u00b7  Required \u2013 This property must be set to a relative or absolute URL including the URI scheme. All URI schemes are supported, including <code>mailto</code> and <code>bitcoin</code>:</p>  Mastodon Email <pre><code>extra:\nsocial:\n- icon: fontawesome/solid/paper-plane\nlink: mailto:&lt;email-address&gt;\n</code></pre> <code>name</code> <p> Default: domain name from <code>link</code>, if available \u2013 This property is used as the link's <code>title</code> attribute and can be set to a discernable name to improve accessibility:</p>"},{"location":"setup/setting-up-the-footer/#copyright-notice","title":"Copyright notice","text":"<p> 0.1.0 \u00b7  Default: none</p> <p>A custom copyright banner can be rendered as part of the footer, which is displayed next to the social links. It can be defined as part of <code>mkdocs.yml</code>:</p> <pre><code>copyright: Copyright &amp;copy; 2016 - 2020 Martin Donath\n</code></pre>"},{"location":"setup/setting-up-the-footer/#generator-notice","title":"Generator notice","text":"<p> 7.3.0 \u00b7  Default: <code>true</code></p> <p>The footer displays a Made with Material for MkDocs notice to denote how the site was generated. The notice can be removed with the following option via <code>mkdocs.yml</code>:</p> <pre><code>extra:\ngenerator: false\n</code></pre> <p>Please read this before removing the generator notice</p> <p>The subtle Made with Material for MkDocs hint in the footer is one of the reasons why this project is so popular, as it tells the user how the site is generated, helping new users to discover this project. Before removing please consider that you're enjoying the benefits of @squidfunk's work for free, as this project is Open Source and has a permissive license. Thousands of hours went into this project, most of them without any financial return.</p> <p>Thus, if you remove this notice, please consider sponsoring the project. Thank you </p>"},{"location":"setup/setting-up-the-footer/#usage","title":"Usage","text":""},{"location":"setup/setting-up-the-footer/#hiding-prevnext-links","title":"Hiding prev/next links","text":"<p>The footer navigation showing links to the previous and next page can be hidden with the front matter <code>hide</code> property. Add the following lines at the top of a Markdown file:</p> <pre><code>---\nhide:\n- footer\n---\n# Document title\n</code></pre>"},{"location":"setup/setting-up-the-footer/#customization","title":"Customization","text":""},{"location":"setup/setting-up-the-footer/#custom-copyright","title":"Custom copyright","text":"<p> 8.0.0 \u00b7  Customization</p> <p>In order to customize and override the copyright notice, extend the theme and override the <code>copyright.html</code> partial, which normally includes the <code>copyright</code> property set in <code>mkdocs.yml</code>.</p>"},{"location":"setup/setting-up-the-header/","title":"Setting up the header","text":"<p>Material for MkDocs' header can be customized to show an announcement bar that  disappears upon scrolling, and provides some options for further configuration. It also includes the search bar and a place to display your project's git repository, as explained in those dedicated guides.</p>"},{"location":"setup/setting-up-the-header/#configuration","title":"Configuration","text":""},{"location":"setup/setting-up-the-header/#automatic-hiding","title":"Automatic hiding","text":"<p> 6.2.0 \u00b7  Feature flag</p> <p>When autohiding is enabled, the header is automatically hidden when the user scrolls past a certain threshold, leaving more space for content. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- header.autohide\n</code></pre>"},{"location":"setup/setting-up-the-header/#announcement-bar","title":"Announcement bar","text":"<p> 5.0.0 \u00b7  Customization</p> <p>Material for MkDocs includes an announcement bar, which is the perfect place to display project news or other important information to the user. When the user scrolls past the header, the bar will automatically disappear. In order to add an announcement bar, extend the theme and override the <code>announce</code> block, which is empty by default:</p> <pre><code>{% extends \"base.html\" %}\n\n{% block announce %}\n  &lt;!-- Add announcement here, including arbitrary HTML --&gt;\n{% endblock %}\n</code></pre>"},{"location":"setup/setting-up-the-header/#mark-as-read","title":"Mark as read","text":"<p> 8.4.0 \u00b7  Feature flag \u00b7  Experimental</p> <p>In order to render temporary announcements that can be marked as read by the user, a button to dismiss the current announcement can be included. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- announce.dismiss\n</code></pre> <p>When the user clicks the button, the current announcement is dismissed and not displayed again until the content of the announcement changes. This is handled automatically.</p> <p>Scroll to the top of this page to see it in action.</p>"},{"location":"setup/setting-up-versioning/","title":"Setting up versioning","text":"<p>Material for MkDocs makes it easy to deploy multiple versions of your project documentation by integrating with external utilities that add those capabilities to MkDocs, i.e. mike. When deploying a new version, older versions of your documentation remain untouched.</p>"},{"location":"setup/setting-up-versioning/#configuration","title":"Configuration","text":""},{"location":"setup/setting-up-versioning/#versioning","title":"Versioning","text":"<p> 7.0.0 \u00b7  Utility</p> <p>mike makes it easy to deploy multiple versions of your project documentation. It integrates natively with Material for MkDocs and can be enabled via <code>mkdocs.yml</code>:</p> <pre><code>extra:\nversion:\nprovider: mike\n</code></pre> <p>This renders a version selector in the header:</p> <p></p> <p>Check out the versioning example to see it in action \u2013 squidfunk.github.io/mkdocs-material-example-versioning</p> <p>Why use mike?</p> <p>mike is built around the idea that once you've generated your docs for a particular version, you should never need to touch that version again. This means you never have to worry about breaking changes in MkDocs, since your old docs (built with an old version of MkDocs) are already generated and sitting in your <code>gh-pages</code> branch.</p> <p>While mike is flexible, it's optimized around putting your docs in a <code>&lt;major&gt;.&lt;minor&gt;</code> directory, with optional aliases (e.g. <code>latest</code> or <code>dev</code>) to particularly notable versions. This makes it easy to make permalinks to whatever version of the documentation you want to direct people to.</p>"},{"location":"setup/setting-up-versioning/#version-warning","title":"Version warning","text":"<p> 8.0.0 \u00b7  Customization</p> <p>If you're using versioning, you might want to display a warning when the user visits any other version than the latest version. Using theme extension, you can override the <code>outdated</code> block:</p> <pre><code>{% extends \"base.html\" %}\n\n{% block outdated %}\n  You're not viewing the latest version.\n  &lt;a href=\"{{ '../' ~ base_url }}\"&gt; &lt;!-- (1)! --&gt;\n&lt;strong&gt;Click here to go to latest.&lt;/strong&gt;\n&lt;/a&gt;\n{% endblock %}\n</code></pre> <ol> <li>Given this value for the <code>href</code> attribute, the link will always redirect to      the root of your site, which will then redirect to the latest version. This     ensures that older versions of your site do not depend on a specific alias,     e.g. <code>latest</code>, to allow for changing the alias later on without breaking     earlier versions.</li> </ol> <p>This will render a version warning above the header:</p> <p></p> <p>The default version is identified by the <code>latest</code> alias. If you wish to set another alias as the latest version, e.g. <code>stable</code>, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>extra:\nversion:\ndefault: stable # (1)!\n</code></pre> <ol> <li> <p>You can also define multiple aliases as the default version, e.g. <code>stable</code>     and <code>development</code>.</p> <pre><code>extra:\nversion:\ndefault:\n- stable\n- development\n</code></pre> <p>Now every version that has the <code>stable</code> and <code>development</code> aliases will not display the version warning.</p> </li> </ol> <p>Make sure one alias matches the default version, as this is where users are redirected to.</p>"},{"location":"setup/setting-up-versioning/#usage","title":"Usage","text":"<p>While this section outlines the basic workflow for publishing new versions,  it's best to check out mike's documentation to make yourself familiar with its mechanics.</p>"},{"location":"setup/setting-up-versioning/#publishing-a-new-version","title":"Publishing a new version","text":"<p>If you want to publish a new version of your project documentation, choose a version identifier and update the alias set as the default version with:</p> <pre><code>mike deploy --push --update-aliases 0.1 latest\n</code></pre> <p>Note that every version will be deployed as a subdirectory of your <code>site_url</code>, e.g.:</p> <ul> <li>docs.example.com/0.1/</li> <li>docs.example.com/0.2/</li> <li>...</li> </ul>"},{"location":"setup/setting-up-versioning/#setting-a-default-version","title":"Setting a default version","text":"<p>When starting with mike, a good idea is to set an alias as a default version, e.g. <code>latest</code>, and when publishing a new version, always update the alias to point to the latest version:</p> <pre><code>mike set-default --push latest\n</code></pre> <p>When publishing a new version, mike will create a redirect in the root of your project documentation to the version associated with the alias:</p> <p>docs.example.com docs.example.com/0.1</p>"},{"location":"setup/dependencies/image-processing/","title":"Image processing","text":"<p>Material for MkDocs depends on several libraries to allow for image processing as part of the build pipeline, including social cards and image optimization. For this reason, a few external libraries must be installed on the host system. This section explains how to install them.</p>"},{"location":"setup/dependencies/image-processing/#dependencies","title":"Dependencies","text":"<p>Install the Python dependencies for image processing with:</p> <pre><code>pip install pillow cairosvg\n</code></pre>"},{"location":"setup/dependencies/image-processing/#cairo-graphics","title":"Cairo Graphics","text":"<p>Cairo Graphics is a graphics library and dependency of Pillow, which Material for MkDocs makes use of for generating social cards and performing image optimization. See the following section which explains how to install Cairo Graphics and its dependencies on your system:</p>  macOS Windows Linux <p>Make sure Homebrew is installed, which is a modern package manager for macOS. Next, use the following command to install all necessary dependencies:</p> <pre><code>brew install cairo freetype libffi libjpeg libpng zlib\n</code></pre> <p>As stated in the installation guide, the easiest way to get up and running with the Cairo Graphics library on Windows is by installing GTK+, since it has Cairo as a dependency. You can also download and install a precompiled GTK runtime.</p> <p>There are several package managers for Linux with varying availability per distribution. The installation guide explains how to install the Cairo Graphics library for your distribution:</p>  Ubuntu Fedora openSUSE <pre><code>apt-get install libcairo2-dev libfreetype6-dev libffi-dev libjpeg-dev libpng-dev libz-dev\n</code></pre> <pre><code>yum install cairo-devel freetype-devel libffi-devel libjpeg-devel libpng-devel zlib-devel\n</code></pre> <pre><code>zypper install cairo-devel freetype-devel libffi-devel libjpeg-devel libpng-devel zlib-devel\n</code></pre> <p>The following environments come with a preinstalled version of Cairo Graphics:</p> <ul> <li> No installation needed in Docker image</li> <li> No installation needed in GitHub Actions (Ubuntu)</li> </ul>"},{"location":"setup/dependencies/image-processing/#pngquant","title":"pngquant","text":"<p>pngquant is an excellent library for lossy PNG compression, and a direct dependency of the built-in optimize plugin. See the following section which  explains how to install pngquant system:</p>  macOS Windows Linux <p>Make sure Homebrew is installed, which is a modern package manager for macOS. Next, use the following command to install all necessary dependencies:</p> <pre><code>brew install pngquant\n</code></pre> <p>Installing pngquant on Windows is a little more involved. The  pngquant-winbuild repository contains a guide on how to set up an  environment for building pngquant on Windows.</p> <p>All popular Linux distributions, regardless of package manager, should allow to install pngquant with the bundled package manager. For example, on Ubuntu, pngquant can be installed with:</p> <pre><code>apt-get install pngquant\n</code></pre> <p>The same is true for <code>yum</code> and <code>zypper</code>.</p>"},{"location":"setup/extensions/","title":"Extensions","text":"<p>Markdown is a very small language with a kind-of reference implementation called John Gruber's Markdown. Python Markdown and Python Markdown Extensions are two packages that enhance the Markdown writing experience, adding useful syntax extensions for technical writing.</p>"},{"location":"setup/extensions/#supported-extensions","title":"Supported extensions","text":"<p>The following extensions are all supported by Material for MkDocs and therefore  strongly recommended. Click on each extension to learn about its purpose and configuration:</p> <ul> <li>Abbreviations</li> <li>Admonition</li> <li>Arithmatex</li> <li>Attribute Lists</li> <li>BetterEm</li> <li>Caret, Mark &amp; Tilde</li> <li>Critic</li> <li>Definition Lists</li> <li>Details</li> <li>Emoji</li> <li>Footnotes</li> <li>Highlight</li> <li>Keys</li> <li>Markdown in HTML</li> <li>SmartSymbols</li> <li>Snippets</li> <li>SuperFences</li> <li>Tabbed</li> <li>Table of Contents</li> <li>Tables</li> <li>Tasklist</li> </ul>"},{"location":"setup/extensions/#configuration","title":"Configuration","text":"<p>Extensions are configured as part of <code>mkdocs.yml</code> \u2013 the MkDocs configuration file. The following sections contain two example configurations to bootstrap your documentation project.</p>"},{"location":"setup/extensions/#minimal-configuration","title":"Minimal configuration","text":"<p>This configuration is a good starting point for when you're using Material for  MkDocs for the first time. The best idea is to explore the reference, and  gradually add what you want to use:</p> <pre><code>markdown_extensions:\n# Python Markdown\n- toc:\npermalink: true\n# Python Markdown Extensions\n- pymdownx.highlight\n- pymdownx.superfences\n</code></pre>"},{"location":"setup/extensions/#recommended-configuration","title":"Recommended configuration","text":"<p>This configuration enables all Markdown-related features of Material for MkDocs and is great for experienced users bootstrapping a new documentation project:</p> <pre><code>markdown_extensions:\n# Python Markdown\n- abbr\n- admonition\n- attr_list\n- def_list\n- footnotes\n- md_in_html\n- toc:\npermalink: true\n# Python Markdown Extensions\n- pymdownx.arithmatex:\ngeneric: true\n- pymdownx.betterem:\nsmart_enable: all\n- pymdownx.caret\n- pymdownx.details\n- pymdownx.emoji:\nemoji_index: !!python/name:materialx.emoji.twemoji\nemoji_generator: !!python/name:materialx.emoji.to_svg\n- pymdownx.highlight\n- pymdownx.inlinehilite\n- pymdownx.keys\n- pymdownx.mark\n- pymdownx.smartsymbols\n- pymdownx.superfences\n- pymdownx.tabbed:\nalternate_style: true\n- pymdownx.tasklist:\ncustom_checkbox: true\n- pymdownx.tilde\n</code></pre>"},{"location":"setup/extensions/python-markdown-extensions/","title":"Python Markdown Extensions","text":"<p>The Python Markdown Extensions package is an excellent collection of additional extensions perfectly suited for advanced technical writing. Material for MkDocs lists this package as an explicit dependency, so it's automatically installed with a supported version.</p>"},{"location":"setup/extensions/python-markdown-extensions/#supported-extensions","title":"Supported extensions","text":"<p>In general, all extensions that are part of Python Markdown Extensions should work with Material for MkDocs. The following list includes all extensions that are natively supported, meaning they work without any further adjustments.</p>"},{"location":"setup/extensions/python-markdown-extensions/#arithmatex","title":"Arithmatex","text":"<p> 1.0.0 \u00b7  Extension</p> <p>The Arithmatex extension allows for rendering of block and inline block equations and integrates seamlessly with MathJax1 \u2013 a library for mathematical typesetting. Enable it via <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- pymdownx.arithmatex:\ngeneric: true\n</code></pre> <p>Besides enabling the extension in <code>mkdocs.yml</code>, a MathJax configuration and  the JavaScript runtime need to be included, which can be done with a few lines of additional JavaScript:</p> <code>docs/javascripts/mathjax.js</code> <code>mkdocs.yml</code> <pre><code>window.MathJax = {\ntex: {\ninlineMath: [[\"\\\\(\", \"\\\\)\"]],\ndisplayMath: [[\"\\\\[\", \"\\\\]\"]],\nprocessEscapes: true,\nprocessEnvironments: true\n},\noptions: {\nignoreHtmlClass: \".*|\",\nprocessHtmlClass: \"arithmatex\"\n}\n};\ndocument$.subscribe(() =&gt; {\nMathJax.typesetPromise()\n})\n</code></pre> <pre><code>extra_javascript:\n- javascripts/mathjax.js\n- https://polyfill.io/v3/polyfill.min.js?features=es6\n- https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\n</code></pre> <p>The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.</p> <p>See reference for usage:</p> <ul> <li>Using block syntax</li> <li>Using inline block syntax</li> </ul>"},{"location":"setup/extensions/python-markdown-extensions/#betterem","title":"BetterEm","text":"<p> 0.1.0 \u00b7  Extension</p> <p>The BetterEm extension improves the detection of Markup to emphasize text in Markdown using special characters, i.e. for <code>**bold**</code> and <code>_italic_</code> formatting. Enable it via <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- pymdownx.betterem\n</code></pre> <p>The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. See the BetterEm  documentation for more information.</p>"},{"location":"setup/extensions/python-markdown-extensions/#caret-mark-tilde","title":"Caret, Mark &amp; Tilde","text":"<p> 1.0.0 \u00b7  Extension</p> <p>The Caret, Mark and Tilde extensions add the ability to highlight text and define sub- and superscript using a simple syntax. Enable them together via <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- pymdownx.caret\n- pymdownx.mark\n- pymdownx.tilde\n</code></pre> <p>The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. See the Caret, Mark and Tilde documentation for guidance.</p> <p>See reference for usage:</p> <ul> <li>Highlighting text</li> <li>Sub- and superscripts</li> </ul>"},{"location":"setup/extensions/python-markdown-extensions/#critic","title":"Critic","text":"<p> 1.0.0 \u00b7  Extension</p> <p>The Critic extension allows for the usage of Critic Markup to highlight added, deleted or updated sections in a document, i.e. for tracking changes in Markdown syntax. Enable it via <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- pymdownx.critic\n</code></pre> <p>The following configuration options are supported:</p> <code>mode</code> <p> Default: <code>view</code> \u2013 This option defines how the markup  should be parsed, i.e. whether to just <code>view</code> all suggested changes, or alternatively <code>accept</code> or <code>reject</code> them:</p> View changesAccept changesReject changes <pre><code>markdown_extensions:\n- pymdownx.critic:\nmode: view\n</code></pre> <pre><code>markdown_extensions:\n- pymdownx.critic:\nmode: accept\n</code></pre> <pre><code>markdown_extensions:\n- pymdownx.critic:\nmode: reject\n</code></pre> <p>See reference for usage:</p> <ul> <li>Highlighting changes</li> </ul>"},{"location":"setup/extensions/python-markdown-extensions/#details","title":"Details","text":"<p> 1.9.0 \u00b7  Extension</p> <p>The Details extension supercharges the Admonition extension, making the resulting call-outs collapsible, allowing them to be opened and closed by the user. Enable it via <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- pymdownx.details\n</code></pre> <p>No configuration options are available. See reference for usage:</p> <ul> <li>Collapsible blocks</li> </ul>"},{"location":"setup/extensions/python-markdown-extensions/#emoji","title":"Emoji","text":"<p> 1.0.0 \u00b7  Extension</p> <p>The Emoji extension automatically inlines bundled and custom icons and emojis in <code>*.svg</code> file format into the resulting HTML page. Enable it via <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- pymdownx.emoji:\nemoji_index: !!python/name:materialx.emoji.twemoji # (1)!\nemoji_generator: !!python/name:materialx.emoji.to_svg\n</code></pre> <ol> <li>Python Markdown Extensions uses the <code>pymdownx</code> namespace, but in order to     support the inlining of icons, the <code>materialx</code> namespace must be used, as it     extends the functionality of <code>pymdownx</code>.</li> </ol> <p>The following configuration options are supported:</p> <code>emoji_index</code> <p> Default: <code>emojione</code> \u2013 This option defines which set of emojis is used for rendering. Note that the use of <code>emojione</code> is not recommended due to restrictions in licensing:</p> <pre><code>markdown_extensions:\n- pymdownx.emoji:\nemoji_index: !!python/name:materialx.emoji.twemoji\n</code></pre> <code>emoji_generator</code> <p> Default: <code>to_png</code> \u2013 This option defines how the resolved emoji or icon shortcode is render. Note that icons can only be used together with the <code>to_svg</code> configuration:</p> <pre><code>markdown_extensions:\n- pymdownx.emoji:\nemoji_generator: !!python/name:materialx.emoji.to_svg\n</code></pre> <code>options.custom_icons</code> <p> Default: none \u2013 This option allows to list folders with additional icon sets to be used in Markdown or <code>mkdocs.yml</code>, which is  explained in more detail in the icon customization guide:</p> <pre><code>markdown_extensions:\n- pymdownx.emoji:\nemoji_index: !!python/name:materialx.emoji.twemoji\nemoji_generator: !!python/name:materialx.emoji.to_svg\noptions:\ncustom_icons:\n- overrides/.icons\n</code></pre> <p>The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.</p> <p>See reference for usage:</p> <ul> <li>Using emojis</li> <li>Using icons</li> <li>Using icons in templates</li> </ul>"},{"location":"setup/extensions/python-markdown-extensions/#highlight","title":"Highlight","text":"<p> 5.0.0 \u00b7  Extension \u00b7  Supersedes CodeHilite</p> <p>The Highlight extension adds support for syntax highlighting of code blocks (with the help of SuperFences) and inline code blocks (with the help of InlineHilite). Enable it via <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- pymdownx.highlight:\nanchor_linenums: true\n- pymdownx.superfences # (1)!\n</code></pre> <ol> <li>Highlight is used by the SuperFences extension to     perform syntax highlighting on code blocks, not the other way round, which     is why this extension also needs to be enabled.</li> </ol> <p>The following configuration options are supported:</p> <code>use_pygments</code> <p> Default: <code>true</code> \u2013 This option allows to control whether highlighting should be carried out during build time using Pygments or in the browser with a JavaScript syntax highlighter:</p> PygmentsJavaScript <pre><code>markdown_extensions:\n- pymdownx.highlight:\nuse_pygments: true\n- pymdownx.superfences\n</code></pre> <pre><code>markdown_extensions:\n- pymdownx.highlight:\nuse_pygments: false\n</code></pre> <p>As an example, Highlight.js, a JavaScript syntax highlighter, can be  integrated with some additional JavaScript and an additional style sheet in <code>mkdocs.yml</code>:</p> <code>docs/javascripts/highlight.js</code> <code>mkdocs.yml</code> <pre><code>document$.subscribe(() =&gt; {\nhljs.highlightAll()\n})\n</code></pre> <pre><code>extra_javascript:\n- https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/highlight.min.js\n- javascripts/highlight.js\nextra_css:\n- https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/styles/default.min.css\n</code></pre> <p>Note that Highlight.js has no affiliation with the Highlight extension.</p> <p>All following configuration options are only compatible with build-time syntax highlighting using Pygments, so they don't apply if <code>use_pygments</code> is set to <code>false</code>.</p> <code>pygments_lang_class</code> <p> Default: <code>false</code> \u2013 This option instructs Pygments to add a CSS class to identify the language of the code block, which is essential for custom annotation markers to function:</p> <pre><code>markdown_extensions:\n- pymdownx.highlight:\npygments_lang_class: true\n</code></pre> <code>auto_title</code> <p> Default: <code>false</code> \u2013 This option will automatically add a title to all code blocks that shows the name of the language being used, e.g. <code>Python</code> is printed for a <code>py</code> block:</p> <pre><code>markdown_extensions:\n- pymdownx.highlight:\nauto_title: true\n</code></pre> <code>linenums</code> <p> Default: <code>false</code> \u2013 This option will add line numbers to all code blocks. If you wish to add line numbers to some, but not all code blocks, consult the section on adding line numbers in the code block reference, which also contains some tips on working with line numbers:</p> <pre><code>markdown_extensions:\n- pymdownx.highlight:\nlinenums: true\n</code></pre> <code>linenums_style</code> <p> Default: <code>table</code> \u2013 The Highlight extension provides three ways to add line numbers, two of which are supported by Material for MkDocs. While <code>table</code> wraps a code block in a <code>&lt;table&gt;</code> element, <code>pymdownx-inline</code> renders line numbers as part of the line itself:</p> <pre><code>markdown_extensions:\n- pymdownx.highlight:\nlinenums_style: pymdownx-inline\n</code></pre> <p>Note that <code>inline</code> will put line numbers next to the actual code, which means that they will be included when selecting text with the cursor or  copying a code block to the clipboard. Thus, the usage of either <code>table</code> or <code>pymdownx-inline</code> is recommended.</p> <code>anchor_linenums</code> <p> 8.1.0 \u00b7  Default: <code>false</code> \u2013 If a code blocks contains line numbers, enabling this setting will wrap them with anchor links, so they can be hyperlinked and shared more easily:</p> <pre><code>markdown_extensions:\n- pymdownx.highlight:\nanchor_linenums: true\n</code></pre> <code>line_spans</code> <p> Default: none \u2013 When this option is set, each line of a code block is wrapped in a <code>span</code>, which is essential for features like line highlighting to work correctly:</p> <pre><code>markdown_extensions:\n- pymdownx.highlight:\nline_spans: __span\n</code></pre> <p>The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.</p> <p>See reference for usage:</p> <ul> <li>Using code blocks</li> <li>Adding a title</li> <li>Adding line numbers</li> <li>Highlighting specific lines</li> <li>Custom syntax theme</li> </ul>"},{"location":"setup/extensions/python-markdown-extensions/#inlinehilite","title":"InlineHilite","text":"<p> 5.0.0 \u00b7  Extension</p> <p>The InlineHilite extension add support for syntax highlighting of inline code  blocks. It's built on top of the Highlight extension, from which it sources its configuration. Enable it via <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- pymdownx.highlight\n- pymdownx.inlinehilite\n</code></pre> <p>The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. The only exception is the <code>css_class</code> option, which must not be changed. See the  InlineHilite documentation for guidance.</p> <p>See reference for usage:</p> <ul> <li>Highlighting inline code blocks</li> </ul>"},{"location":"setup/extensions/python-markdown-extensions/#keys","title":"Keys","text":"<p> 1.0.0 \u00b7  Extension</p> <p>The Keys extension adds a simple syntax to allow for the rendering of keyboard  keys and combinations, e.g. Ctrl+Alt+Del. Enable it via <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- pymdownx.keys\n</code></pre> <p>The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. The only exception is the <code>class</code> option, which must not be changed. See the  Keys documentation for more information.</p> <p>See reference for usage:</p> <ul> <li>Adding keyboard keys</li> </ul>"},{"location":"setup/extensions/python-markdown-extensions/#smartsymbols","title":"SmartSymbols","text":"<p> 0.1.0 \u00b7  Extension</p> <p>The SmartSymbols extension converts some sequences of characters into their  corresponding symbols, e.h. copyright symbols or fractions. Enable it via <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- pymdownx.smartsymbols\n</code></pre> <p>The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. See the SmartSymbols  documentation for guidance.</p>"},{"location":"setup/extensions/python-markdown-extensions/#snippets","title":"Snippets","text":"<p> 0.1.0 \u00b7  Extension</p> <p>The Snippets extension adds the ability to embed content from arbitrary files into a document, including other documents or source files, by using a simple syntax. Enable it via <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- pymdownx.snippets\n</code></pre> <p>The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. See the Snippets  documentation for more information.</p> <p>See reference for usage:</p> <ul> <li>Adding a glossary</li> <li>Embedding external files</li> </ul>"},{"location":"setup/extensions/python-markdown-extensions/#superfences","title":"SuperFences","text":"<p> 0.1.0 \u00b7  Extension \u00b7  Supersedes Fenced Code Blocks</p> <p>The SuperFences extension allows for arbitrary nesting of code and content blocks inside each other, including admonitions, tabs, lists and all other elements. Enable it via <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- pymdownx.superfences\n</code></pre> <p>The following configuration options are supported:</p> <code>custom_fences</code> <p> Default: none \u2013 This option allows to define a handler for custom fences, e.g. to preserve the definitions of Mermaid.js diagrams to be interpreted in the browser:</p> <pre><code>markdown_extensions:\n- pymdownx.superfences:\ncustom_fences:\n- name: mermaid\nclass: mermaid\nformat: !!python/name:pymdownx.superfences.fence_code_format\n</code></pre> <p>Note that this will primarily prevent syntax highlighting from being applied. See the reference on diagrams to learn how Mermaid.js is integrated with Material for MkDocs.</p> <p>The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.</p> <p>See reference for usage:</p> <ul> <li>Using annotations</li> <li>Using code blocks</li> <li>Using content tabs</li> <li>Using flowcharts</li> <li>Using sequence diagrams</li> <li>Using state diagrams</li> <li>Using class diagrams</li> <li>Using entity-relationship diagrams</li> </ul>"},{"location":"setup/extensions/python-markdown-extensions/#tabbed","title":"Tabbed","text":"<p> 5.0.0 \u00b7  Extension</p> <p>The Tabbed extension allows the usage of content tabs, a simple way to group related content and code blocks under accessible tabs. Enable it via <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- pymdownx.tabbed:\nalternate_style: true\n</code></pre> <p>The following configuration options are supported:</p> <code>alternate_style</code> <p> 7.3.1 \u00b7  Default: <code>false</code> \u00b7  Required \u2013  This option enables the content tabs alternate style, which has better behavior on mobile viewports, and is the only supported style:</p> <pre><code>markdown_extensions:\n- pymdownx.tabbed:\nalternate_style: true\n</code></pre> <code>slugify</code> <p> Default: <code>headerid.slugify</code> \u2013 This option allows for customization of the slug function. For some languages, the default may not produce good and readable identifiers \u2013 consider using another slug function like for example those from Python Markdown Extensions:</p> UnicodeUnicode, case-sensitive <pre><code>markdown_extensions:\n- pymdownx.tabbed:\nslugify: !!python/object/apply:pymdownx.slugs.slugify\nkwds:\ncase: lower\n</code></pre> <pre><code>markdown_extensions:\n- pymdownx.tabbed:\nslugify: !!python/object/apply:pymdownx.slugs.slugify\n</code></pre> <p>The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.</p> <p>See reference for usage:</p> <ul> <li>Grouping code blocks</li> <li>Grouping other content</li> <li>Embedded content</li> </ul>"},{"location":"setup/extensions/python-markdown-extensions/#tasklist","title":"Tasklist","text":"<p> 1.0.0 \u00b7  Extension</p> <p>The Tasklist extension allows for the usage of GitHub Flavored Markdown inspired task lists, following the same syntactical conventions. Enable it via <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- pymdownx.tasklist:\ncustom_checkbox: true\n</code></pre> <p>The following configuration options are supported:</p> <code>custom_checkbox</code> <p> Default: <code>false</code> \u00b7 This option toggles the rendering style of checkboxes, replacing native checkbox styles with beautiful icons,  and is therefore recommended:</p> <pre><code>markdown_extensions:\n- pymdownx.tasklist:\ncustom_checkbox: true\n</code></pre> <code>clickable_checkbox</code> <p> Default: <code>false</code> \u00b7 This option toggles whether checkboxes are clickable. As the state is not persisted, the use of this  option is rather discouraged from a user experience perspective:</p> <pre><code>markdown_extensions:\n- pymdownx.tasklist:\nclickable_checkbox: true\n</code></pre> <p>The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.</p> <p>See reference for usage:</p> <ul> <li>Using task lists</li> </ul> <ol> <li> <p>Other libraries like KaTeX are also supported and can be integrated with some additional effort. See the Arithmatex documentation on KaTeX for further guidance, as this is beyond the scope of Material for MkDocs.\u00a0\u21a9</p> </li> </ol>"},{"location":"setup/extensions/python-markdown/","title":"Python Markdown","text":"<p>Material for MkDocs supports a large number of Python Markdown extensions, which is part of what makes it so attractive for technical writing. Following is a list of all supported extensions, linking to the relevant sections of the reference for which features they need to be enabled.</p>"},{"location":"setup/extensions/python-markdown/#supported-extensions","title":"Supported extensions","text":""},{"location":"setup/extensions/python-markdown/#abbreviations","title":"Abbreviations","text":"<p> 1.0.0 \u00b7  Extension</p> <p>The Abbreviations extension adds the ability to add a small tooltip to an element, by wrapping it with an <code>abbr</code> tag. Only plain text (no markup) is supported. Enable it via <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- abbr\n</code></pre> <p>No configuration options are available. See reference for usage:</p> <ul> <li>Adding abbreviations</li> <li>Adding a glossary</li> </ul>"},{"location":"setup/extensions/python-markdown/#admonition","title":"Admonition","text":"<p> 0.1.0 \u00b7  Extension</p> <p>The Admonition extension adds support for admonitions, more commonly known as  call-outs, which can be defined in Markdown by using a simple syntax. Enable it via <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- admonition\n</code></pre> <p>No configuration options are available. See reference for usage:</p> <ul> <li>Adding admonitions</li> <li>Changing the title</li> <li>Removing the title</li> <li>Supported types</li> </ul>"},{"location":"setup/extensions/python-markdown/#attribute-lists","title":"Attribute Lists","text":"<p> 0.1.0 \u00b7  Extension</p> <p>The Attribute Lists extension allows to add HTML attributes and CSS classes to almost every Markdown inline- and block-level element with a special syntax. Enable it via <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- attr_list\n</code></pre> <p>No configuration options are available. See reference for usage:</p> <ul> <li>Using annotations</li> <li>Using grids</li> <li>Adding buttons</li> <li>Adding tooltips</li> <li>Using icons with colors</li> <li>Using icons with animations</li> <li>Image alignment</li> <li>Image lazy-loading</li> </ul>"},{"location":"setup/extensions/python-markdown/#definition-lists","title":"Definition Lists","text":"<p> 1.1.0 \u00b7  Extension</p> <p>The Definition Lists extension adds the ability to add definition lists (more commonly known as description lists \u2013 <code>dl</code> in HTML) via Markdown to a document. Enable it via <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- def_list\n</code></pre> <p>No configuration options are available. See reference for usage:</p> <ul> <li>Using definition lists</li> </ul>"},{"location":"setup/extensions/python-markdown/#footnotes","title":"Footnotes","text":"<p> 1.0.0 \u00b7  Extension</p> <p>The Footnotes extension allows to define inline footnotes, which are then rendered below all Markdown content of a document. Enable it via <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- footnotes\n</code></pre> <p>No configuration options are supported. See reference for usage:</p> <ul> <li>Adding footnote references</li> <li>Adding footnote content</li> </ul>"},{"location":"setup/extensions/python-markdown/#markdown-in-html","title":"Markdown in HTML","text":"<p> 0.1.0 \u00b7  Extension</p> <p>The Markdown in HTML extension allows for writing Markdown inside of HTML, which is useful for wrapping Markdown content with custom elements. Enable it via <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- md_in_html\n</code></pre> <p>By default, Markdown ignores any content within a raw HTML block-level element. With the <code>md_in_html</code> extension enabled, the content of a raw HTML block-level element can be parsed as Markdown by including a <code>markdown</code> attribute on the opening tag. The <code>markdown</code> attribute will be stripped from the output, while all other attributes will be preserved.</p> <p>No configuration options are available. See reference for usage:</p> <ul> <li>Using annotations</li> <li>Using grids</li> <li>Image captions</li> </ul>"},{"location":"setup/extensions/python-markdown/#table-of-contents","title":"Table of Contents","text":"<p> 0.1.0 \u00b7  Extension</p> <p>The Table of Contents extension automatically generates a table of contents from a document, which Material for MkDocs will render as part of the resulting  page. Enable it via <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- toc:\npermalink: true\n</code></pre> <p>The following configuration options are supported:</p> <code>title</code> <p> 7.3.5 \u00b7  Default: automatically set \u2013 This option sets the title of the table of contents in the right navigation sidebar, which is normally automatically sourced from the translations for the site language as set in <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- toc:\ntitle: On this page\n</code></pre> <code>permalink</code> <p> Default: <code>false</code> \u2013 This option adds an anchor link containing the paragraph symbol <code>\u00b6</code> or another custom symbol at the end of each headline, exactly like on the page you're currently viewing, which Material for MkDocs will make appear on hover:</p> \u00b6\u2693\ufe0e <pre><code>markdown_extensions:\n- toc:\npermalink: true\n</code></pre> <pre><code>markdown_extensions:\n- toc:\npermalink: \u2693\ufe0e\n</code></pre> <code>permalink_title</code> <p> Default: <code>Permanent link</code> \u2013 This option sets the title of the anchor link which is shown on hover and read by screen readers. For accessibility reasons, it might be beneficial to change it to a more  discernable name, stating that the anchor links to the section itself:</p> <pre><code>markdown_extensions:\n- toc:\npermalink_title: Anchor link to this section for reference\n</code></pre> <code>slugify</code> <p> Default: <code>headerid.slugify</code> \u2013 This option allows for customization of the slug function. For some languages, the default may not produce good and readable identifiers \u2013 consider using another slug function like for example those from Python Markdown Extensions:</p> UnicodeUnicode, case-sensitive <pre><code>markdown_extensions:\n- toc:\nslugify: !!python/object/apply:pymdownx.slugs.slugify\nkwds:\ncase: lower\n</code></pre> <pre><code>markdown_extensions:\n- toc:\nslugify: !!python/object/apply:pymdownx.slugs.slugify\n</code></pre> <code>toc_depth</code> <p> Default: <code>6</code> \u2013 Define the range of levels to be included in the table of contents. This may be useful for project documentation with deeply structured headings to decrease the length of the table of contents, or to remove the table of contents altogether:</p> Hide levels 4-6Hide table of contents <pre><code>markdown_extensions:\n- toc:\ntoc_depth: 3\n</code></pre> <pre><code>markdown_extensions:\n- toc:\ntoc_depth: 0\n</code></pre> <p>The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.</p>"},{"location":"setup/extensions/python-markdown/#tables","title":"Tables","text":"<p> 0.1.0 \u00b7  Extension</p> <p>The Tables extension adds the ability to create tables in Markdown by using a  simple syntax. Enable it via <code>mkdocs.yml</code> (albeit it should be enabled by default):</p> <pre><code>markdown_extensions:\n- tables\n</code></pre> <p>No configuration options are available. See reference for usage:</p> <ul> <li>Using data tables</li> <li>Column alignment</li> </ul>"},{"location":"setup/extensions/python-markdown/#superseded-extensions","title":"Superseded extensions","text":"<p>The following Python Markdown extensions are not (or might not be) supported  anymore, and are therefore not recommended for use. Instead, the alternatives should be considered.</p>"},{"location":"setup/extensions/python-markdown/#fenced-code-blocks","title":"Fenced Code Blocks","text":"<p> 0.1.0 \u00b7  Extension</p> <p>Superseded by SuperFences. This extension might still work, but the SuperFences extension is superior in many ways, as it allows for arbitrary  nesting, and is therefore recommended.</p>"},{"location":"setup/extensions/python-markdown/#codehilite","title":"CodeHilite","text":"<p> 0.1.0 ... 5.5.14 \u00b7  Extension</p> <p>Superseded by Highlight. Support for CodeHilite was dropped in  6.0.0, as Highlight has a better integration with other  essential extensions like SuperFences and InlineHilite.</p>"}]}